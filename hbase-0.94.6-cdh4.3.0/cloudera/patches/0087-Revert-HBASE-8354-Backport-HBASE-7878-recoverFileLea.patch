From c5d6b90eb8f7492390f9d743e0fd976223e09165 Mon Sep 17 00:00:00 2001
From: Jimmy Xiang <jxiang@cloudera.com>
Date: Thu, 2 May 2013 13:29:23 -0700
Subject: [PATCH 87/96] Revert "HBASE-8354 Backport HBASE-7878 'recoverFileLease does not check return value of recoverLease' to 0.94 (Liang Xie)"

Reason: Bug
Ref: CDH-11864

This reverts commit 57a4c03bbb2011645fbbe577e8ccef39acc352c4.
---
 .../hbase/regionserver/wal/HLogSplitter.java       |   33 ++-----------
 .../org/apache/hadoop/hbase/util/FSHDFSUtils.java  |   37 +++++----------
 .../hadoop/hbase/regionserver/wal/TestHLog.java    |   27 ++--------
 .../hbase/regionserver/wal/TestHLogSplit.java      |   51 +++++++------------
 4 files changed, 41 insertions(+), 107 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogSplitter.java b/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogSplitter.java
index 098b7aa..59686e5 100644
--- a/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogSplitter.java
+++ b/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogSplitter.java
@@ -34,7 +34,6 @@ import java.util.Set;
 import java.util.TreeMap;
 import java.util.TreeSet;
 import java.util.concurrent.atomic.AtomicReference;
-import java.util.concurrent.CountDownLatch;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -177,20 +176,6 @@ public class HLogSplitter {
    */
   public List<Path> splitLog()
       throws IOException {
-    return splitLog((CountDownLatch) null);
-  }
-  
-  /**
-   * Split up a bunch of regionserver commit log files that are no longer being
-   * written to, into new files, one per region for region to replay on startup.
-   * Delete the old log files when finished.
-   *
-   * @param latch
-   * @throws IOException will throw if corrupted hlogs aren't tolerated
-   * @return the list of splits
-   */
-  public List<Path> splitLog(CountDownLatch latch)
-      throws IOException {
     Preconditions.checkState(!hasSplit,
         "An HLogSplitter instance may only be used once");
     hasSplit = true;
@@ -214,7 +199,7 @@ public class HLogSplitter {
     }
     logAndReport("Splitting " + logfiles.length + " hlog(s) in "
     + srcDir.toString());
-    splits = splitLog(logfiles, latch);
+    splits = splitLog(logfiles);
 
     splitTime = EnvironmentEdgeManager.currentTimeMillis() - startTime;
     String msg = "hlog file splitting completed in " + splitTime +
@@ -274,8 +259,7 @@ public class HLogSplitter {
    * After the process is complete, the log files are archived to a separate
    * directory.
    */
-  private List<Path> splitLog(final FileStatus[] logfiles, CountDownLatch latch)
-      throws IOException {
+  private List<Path> splitLog(final FileStatus[] logfiles) throws IOException {
     List<Path> processedLogs = new ArrayList<Path>();
     List<Path> corruptedLogs = new ArrayList<Path>();
     List<Path> splits = null;
@@ -317,19 +301,10 @@ public class HLogSplitter {
       }
       status.setStatus("Log splits complete. Checking for orphaned logs.");
       
-      if (latch != null) {
-        try {
-          latch.await();
-        } catch (InterruptedException ie) {
-          LOG.warn("wait for latch interrupted");
-          Thread.currentThread().interrupt();
-        }
-      }
-      FileStatus[] currFiles = fs.listStatus(srcDir);
-      if (currFiles.length > processedLogs.size()
+      if (fs.listStatus(srcDir).length > processedLogs.size()
           + corruptedLogs.size()) {
         throw new OrphanHLogAfterSplitException(
-          "Discovered orphan hlog after split. Maybe the "
+            "Discovered orphan hlog after split. Maybe the "
             + "HRegionServer was not dead when we started");
       }
     } finally {
diff --git a/src/main/java/org/apache/hadoop/hbase/util/FSHDFSUtils.java b/src/main/java/org/apache/hadoop/hbase/util/FSHDFSUtils.java
index 968e3c4..30f92e4 100644
--- a/src/main/java/org/apache/hadoop/hbase/util/FSHDFSUtils.java
+++ b/src/main/java/org/apache/hadoop/hbase/util/FSHDFSUtils.java
@@ -51,8 +51,6 @@ public class FSHDFSUtils extends FSUtils{
    */
   public static final long LEASE_SOFTLIMIT_PERIOD = 60 * 1000;
 
-  public static final String TEST_TRIGGER_DFS_APPEND = "hbase.test.trigger.dfs.append";
-
   @Override
   public void recoverFileLease(final FileSystem fs, final Path p,
       Configuration conf, CancelableProgressable reporter) throws IOException{
@@ -70,37 +68,26 @@ public class FSHDFSUtils extends FSUtils{
 
     // Trying recovery
     boolean recovered = false;
-    long recoveryTimeout = conf.getInt("hbase.lease.recovery.timeout", 300000);
-    // conf parameter passed from unit test, indicating whether fs.append() should be triggered
-    boolean triggerAppend = conf.getBoolean(TEST_TRIGGER_DFS_APPEND, false);
-    Exception ex = null;
     while (!recovered) {
       try {
         try {
-          DistributedFileSystem dfs = (DistributedFileSystem) fs;
-          if (triggerAppend) throw new IOException();
-          try {
-            recovered = (Boolean) DistributedFileSystem.class.getMethod(
-              "recoverLease", new Class[] { Path.class }).invoke(dfs, p);
-            if (!recovered) LOG.debug("recoverLease returned false");
-          } catch (InvocationTargetException ite) {
-            // function was properly called, but threw it's own exception
-            throw (IOException) ite.getCause();
+          if (fs instanceof DistributedFileSystem) {
+            DistributedFileSystem dfs = (DistributedFileSystem)fs;
+            DistributedFileSystem.class.getMethod("recoverLease",
+              new Class[] {Path.class}).invoke(dfs, p);
+          } else {
+            throw new Exception("Not a DistributedFileSystem");
           }
+        } catch (InvocationTargetException ite) {
+          // function was properly called, but threw it's own exception
+          throw (IOException) ite.getCause();
         } catch (Exception e) {
           LOG.debug("Failed fs.recoverLease invocation, " + e.toString() +
             ", trying fs.append instead");
-          ex = e;
-        }
-        if (ex != null || System.currentTimeMillis() - startWaiting > recoveryTimeout) {
-          LOG.debug("trying fs.append for " + p + " with " + ex);
-          ex = null; // assume the following append() call would succeed
           FSDataOutputStream out = fs.append(p);
           out.close();
-          recovered = true;
-          LOG.debug("fs.append passed");
         }
-        if (recovered) break;
+        recovered = true;
       } catch (IOException e) {
         e = RemoteExceptionHandler.checkIOException(e);
         if (e instanceof AlreadyBeingCreatedException) {
@@ -128,9 +115,9 @@ public class FSHDFSUtils extends FSUtils{
 
       try {
         Thread.sleep(1000);
-      } catch (InterruptedException ie) {
+      } catch (InterruptedException ex) {
         InterruptedIOException iioe = new InterruptedIOException();
-        iioe.initCause(ie);
+        iioe.initCause(ex);
         throw iioe;
       }
     }
diff --git a/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLog.java b/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLog.java
index a9d4aeb..09f8a34 100644
--- a/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLog.java
+++ b/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLog.java
@@ -42,7 +42,6 @@ import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.*;
 import org.apache.hadoop.hbase.regionserver.wal.HLog.Reader;
 import org.apache.hadoop.hbase.util.Bytes;
-import org.apache.hadoop.hbase.util.FSHDFSUtils;
 import org.apache.hadoop.hbase.util.FSUtils;
 import org.apache.hadoop.hbase.Coprocessor;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
@@ -102,7 +101,6 @@ public class TestHLog  {
     // Make block sizes small.
     TEST_UTIL.getConfiguration().setInt("dfs.blocksize", 1024 * 1024);
     // needed for testAppendClose()
-    TEST_UTIL.getConfiguration().setBoolean("dfs.support.broken.append", true);
     TEST_UTIL.getConfiguration().setBoolean("dfs.support.append", true);
     // quicker heartbeat interval for faster DN death notification
     TEST_UTIL.getConfiguration().setInt("heartbeat.recheck.interval", 5000);
@@ -372,29 +370,17 @@ public class TestHLog  {
     }
   }
   
-  /*
-   * We pass different values to recoverFileLease() so that different code paths are covered
-   * 
-   * For this test to pass, requires:
-   * 1. HDFS-200 (append support)
-   * 2. HDFS-988 (SafeMode should freeze file operations
-   *              [FSNamesystem.nextGenerationStampForBlock])
-   * 3. HDFS-142 (on restart, maintain pendingCreates)
-   */
+  // For this test to pass, requires:
+  // 1. HDFS-200 (append support)
+  // 2. HDFS-988 (SafeMode should freeze file operations
+  //              [FSNamesystem.nextGenerationStampForBlock])
+  // 3. HDFS-142 (on restart, maintain pendingCreates)
   @Test
   public void testAppendClose() throws Exception {
-    testAppendClose(true);
-    testAppendClose(false);
-  }
-
-  /*
-   * @param triggerDirectAppend whether to trigger direct call of fs.append()
-   */
-  public void testAppendClose(final boolean triggerDirectAppend) throws Exception {
     byte [] tableName = Bytes.toBytes(getName());
     HRegionInfo regioninfo = new HRegionInfo(tableName,
              HConstants.EMPTY_START_ROW, HConstants.EMPTY_END_ROW, false);
-    Path subdir = new Path(dir, "hlogdir" + triggerDirectAppend);
+    Path subdir = new Path(dir, "hlogdir");
     Path archdir = new Path(dir, "hlogdir_archive");
     HLog wal = new HLog(fs, subdir, archdir, conf);
     final int total = 20;
@@ -468,7 +454,6 @@ public class TestHLog  {
       public Exception exception = null;
       public void run() {
           try {
-            rlConf.setBoolean(FSHDFSUtils.TEST_TRIGGER_DFS_APPEND, triggerDirectAppend);
             FSUtils.getInstance(fs, rlConf)
               .recoverFileLease(recoveredFs, walPath, rlConf, null);
           } catch (IOException e) {
diff --git a/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogSplit.java b/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogSplit.java
index 97cee04..6115cc6 100644
--- a/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogSplit.java
+++ b/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogSplit.java
@@ -33,7 +33,6 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.NavigableSet;
-import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
@@ -122,11 +121,12 @@ public class TestHLogSplit {
 
   @BeforeClass
   public static void setUpBeforeClass() throws Exception {
-    TEST_UTIL.getConfiguration().setStrings("hbase.rootdir", hbaseDir.toString());
-    TEST_UTIL.getConfiguration().setClass("hbase.regionserver.hlog.writer.impl",
-      InstrumentedSequenceFileLogWriter.class, HLog.Writer.class);
-    TEST_UTIL.getConfiguration().setBoolean("dfs.support.broken.append", true);
-    TEST_UTIL.getConfiguration().setBoolean("dfs.support.append", true);
+    TEST_UTIL.getConfiguration().
+            setStrings("hbase.rootdir", hbaseDir.toString());
+    TEST_UTIL.getConfiguration().
+            setClass("hbase.regionserver.hlog.writer.impl",
+                InstrumentedSequenceFileLogWriter.class, HLog.Writer.class);
+
     TEST_UTIL.startMiniDFSCluster(2);
   }
 
@@ -218,12 +218,11 @@ public class TestHLogSplit {
 
     generateHLogs(-1);
 
-    CountDownLatch latch = new CountDownLatch(1);
     try {
-      (new ZombieNewLogWriterRegionServer(latch, stop)).start();
-      HLogSplitter logSplitter = HLogSplitter.createLogSplitter(conf, hbaseDir, hlogDir, oldLogDir,
-        fs);
-      logSplitter.splitLog(latch);
+    (new ZombieNewLogWriterRegionServer(stop)).start();
+    HLogSplitter logSplitter = HLogSplitter.createLogSplitter(conf,
+        hbaseDir, hlogDir, oldLogDir, fs);
+    logSplitter.splitLog();
     } finally {
       stop.set(true);
     }
@@ -583,23 +582,16 @@ public class TestHLogSplit {
     AtomicBoolean stop = new AtomicBoolean(false);
     generateHLogs(-1);
     fs.initialize(fs.getUri(), conf);
-    CountDownLatch latch = new CountDownLatch(1);
-    Thread zombie = new ZombieNewLogWriterRegionServer(latch, stop);
+    Thread zombie = new ZombieNewLogWriterRegionServer(stop);
 
-    List<Path> splits = null;
     try {
       zombie.start();
       try {
         HLogSplitter logSplitter = HLogSplitter.createLogSplitter(conf,
             hbaseDir, hlogDir, oldLogDir, fs);
-        splits = logSplitter.splitLog(latch);
-      } catch (IOException ex) {
-        /* expected */
-        LOG.warn("testSplitWillNotTouchLogsIfNewHLogGetsCreatedAfterSplitStarted", ex);
-      }
-      FileStatus[] files = fs.listStatus(hlogDir);
-      if (files == null) fail("no files in " + hlogDir + " with splits " + splits);
-      int logFilesNumber = files.length;
+        logSplitter.splitLog();
+      } catch (IOException ex) {/* expected */}
+      int logFilesNumber = fs.listStatus(hlogDir).length;
 
       assertEquals("Log files should not be archived if there's an extra file after split",
               NUM_WRITERS + 1, logFilesNumber);
@@ -1073,10 +1065,8 @@ public class TestHLogSplit {
    */
   class ZombieNewLogWriterRegionServer extends Thread {
     AtomicBoolean stop;
-    CountDownLatch latch;
-    public ZombieNewLogWriterRegionServer(CountDownLatch latch, AtomicBoolean stop) {
+    public ZombieNewLogWriterRegionServer(AtomicBoolean stop) {
       super("ZombieNewLogWriterRegionServer");
-      this.latch = latch;
       this.stop = stop;
     }
 
@@ -1093,7 +1083,7 @@ public class TestHLogSplit {
       try {
 
         while (!fs.exists(recoveredEdits) && !stop.get()) {
-          LOG.info("Juliet: split not started, sleeping a bit...");
+          flushToConsole("Juliet: split not started, sleeping a bit...");
           Threads.sleep(10);
         }
  
@@ -1103,10 +1093,8 @@ public class TestHLogSplit {
         appendEntry(writer, "juliet".getBytes(), ("juliet").getBytes(),
             ("r").getBytes(), FAMILY, QUALIFIER, VALUE, 0);
         writer.close();
-        LOG.info("Juliet file creator: created file " + julietLog);
-        latch.countDown();
+        flushToConsole("Juliet file creator: created file " + julietLog);
       } catch (IOException e1) {
-        LOG.error("Failed to create file " + julietLog, e1);
         assertTrue("Failed to create file " + julietLog, false);
       }
     }
@@ -1310,7 +1298,7 @@ public class TestHLogSplit {
       }
       if (i != leaveOpen) {
         writer[i].close();
-        LOG.info("Closing writer " + i);
+        flushToConsole("Closing writer " + i);
       }
     }
   }
@@ -1421,9 +1409,8 @@ public class TestHLogSplit {
                           byte[] row, byte[] family, byte[] qualifier,
                           byte[] value, long seq)
           throws IOException {
-    LOG.info(Thread.currentThread().getName() + " append");
+
     writer.append(createTestEntry(table, region, row, family, qualifier, value, seq));
-    LOG.info(Thread.currentThread().getName() + " sync");
     writer.sync();
     return seq;
   }
-- 
1.7.0.4

