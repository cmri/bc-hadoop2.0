From 24661cf4286820d81531a50b6e1476e1e9892008 Mon Sep 17 00:00:00 2001
From: Jean-Daniel Cryans <jdcryans@cloudera.com>
Date: Tue, 30 Apr 2013 15:53:46 -0700
Subject: [PATCH 84/96] CDH-11720  sqoop-hive integration test fails due to thrift error

Reason: Bug
Author: Jean-Daniel Cryans
Ref: CDH-11720
---
 pom.xml                                            |    2 +-
 .../hbase/thrift/generated/AlreadyExists.java      |    8 +-
 .../hbase/thrift/generated/BatchMutation.java      |   10 +-
 .../hbase/thrift/generated/ColumnDescriptor.java   |   49 +-
 .../hadoop/hbase/thrift/generated/Hbase.java       | 1162 ++++++++++++--------
 .../hadoop/hbase/thrift/generated/IOError.java     |    8 +-
 .../hbase/thrift/generated/IllegalArgument.java    |    8 +-
 .../hadoop/hbase/thrift/generated/Mutation.java    |   25 +-
 .../hadoop/hbase/thrift/generated/TCell.java       |   19 +-
 .../hadoop/hbase/thrift/generated/TIncrement.java  |   19 +-
 .../hadoop/hbase/thrift/generated/TRegionInfo.java |   31 +-
 .../hadoop/hbase/thrift/generated/TRowResult.java  |    8 +-
 .../hadoop/hbase/thrift/generated/TScan.java       |   63 +-
 .../hadoop/hbase/thrift2/generated/TColumn.java    |   19 +-
 .../hbase/thrift2/generated/TColumnIncrement.java  |   19 +-
 .../hbase/thrift2/generated/TColumnValue.java      |   19 +-
 .../hadoop/hbase/thrift2/generated/TDelete.java    |   29 +-
 .../hbase/thrift2/generated/TDeleteType.java       |    2 +-
 .../hadoop/hbase/thrift2/generated/TGet.java       |   32 +-
 .../hbase/thrift2/generated/THBaseService.java     |  331 ++++--
 .../hadoop/hbase/thrift2/generated/TIOError.java   |    8 +-
 .../hbase/thrift2/generated/TIllegalArgument.java  |    8 +-
 .../hadoop/hbase/thrift2/generated/TIncrement.java |   23 +-
 .../hadoop/hbase/thrift2/generated/TPut.java       |   29 +-
 .../hadoop/hbase/thrift2/generated/TResult.java    |   10 +-
 .../hadoop/hbase/thrift2/generated/TScan.java      |   32 +-
 .../hadoop/hbase/thrift2/generated/TTimeRange.java |   25 +-
 27 files changed, 1235 insertions(+), 763 deletions(-)

diff --git a/pom.xml b/pom.xml
index 58fd6d7..1b7379f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1082,7 +1082,7 @@
     <mockito-all.version>1.8.5</mockito-all.version>
     <protobuf.version>2.4.0a</protobuf.version>
     <stax-api.version>1.0.1</stax-api.version>
-    <thrift.version>0.8.0</thrift.version>
+    <thrift.version>${cdh.thrift.version}</thrift.version>
     <zookeeper.version>${cdh.zookeeper.version}</zookeeper.version>
     <hadoop-snappy.version>${cdh.hadoop-snappy.version}</hadoop-snappy.version>
     <clover.version>2.6.3</clover.version>
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift/generated/AlreadyExists.java b/src/main/java/org/apache/hadoop/hbase/thrift/generated/AlreadyExists.java
index a5b81f5..029645c 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift/generated/AlreadyExists.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift/generated/AlreadyExists.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -31,7 +34,7 @@ import org.slf4j.LoggerFactory;
  * An AlreadyExists exceptions signals that a table with the specified
  * name already exists
  */
-public class AlreadyExists extends Exception implements org.apache.thrift.TBase<AlreadyExists, AlreadyExists._Fields>, java.io.Serializable, Cloneable {
+public class AlreadyExists extends TException implements org.apache.thrift.TBase<AlreadyExists, AlreadyExists._Fields>, java.io.Serializable, Cloneable {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AlreadyExists");
 
   private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -280,6 +283,7 @@ public class AlreadyExists extends Exception implements org.apache.thrift.TBase<
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift/generated/BatchMutation.java b/src/main/java/org/apache/hadoop/hbase/thrift/generated/BatchMutation.java
index d5df940..8566ea4 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift/generated/BatchMutation.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift/generated/BatchMutation.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -386,6 +389,7 @@ public class BatchMutation implements org.apache.thrift.TBase<BatchMutation, Bat
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -437,7 +441,7 @@ public class BatchMutation implements org.apache.thrift.TBase<BatchMutation, Bat
                 struct.mutations = new ArrayList<Mutation>(_list0.size);
                 for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                 {
-                  Mutation _elem2; // optional
+                  Mutation _elem2; // required
                   _elem2 = new Mutation();
                   _elem2.read(iprot);
                   struct.mutations.add(_elem2);
@@ -534,7 +538,7 @@ public class BatchMutation implements org.apache.thrift.TBase<BatchMutation, Bat
           struct.mutations = new ArrayList<Mutation>(_list5.size);
           for (int _i6 = 0; _i6 < _list5.size; ++_i6)
           {
-            Mutation _elem7; // optional
+            Mutation _elem7; // required
             _elem7 = new Mutation();
             _elem7.read(iprot);
             struct.mutations.add(_elem7);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift/generated/ColumnDescriptor.java b/src/main/java/org/apache/hadoop/hbase/thrift/generated/ColumnDescriptor.java
index 4ce85e7..a163bb0 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift/generated/ColumnDescriptor.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift/generated/ColumnDescriptor.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -150,7 +153,7 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
   private static final int __BLOOMFILTERNBHASHES_ISSET_ID = 3;
   private static final int __BLOCKCACHEENABLED_ISSET_ID = 4;
   private static final int __TIMETOLIVE_ISSET_ID = 5;
-  private BitSet __isset_bit_vector = new BitSet(6);
+  private byte __isset_bitfield = 0;
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -228,8 +231,7 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
    * Performs a deep copy on <i>other</i>.
    */
   public ColumnDescriptor(ColumnDescriptor other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetName()) {
       this.name = other.name;
     }
@@ -317,16 +319,16 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
   }
 
   public void unsetMaxVersions() {
-    __isset_bit_vector.clear(__MAXVERSIONS_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXVERSIONS_ISSET_ID);
   }
 
   /** Returns true if field maxVersions is set (has been assigned a value) and false otherwise */
   public boolean isSetMaxVersions() {
-    return __isset_bit_vector.get(__MAXVERSIONS_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __MAXVERSIONS_ISSET_ID);
   }
 
   public void setMaxVersionsIsSet(boolean value) {
-    __isset_bit_vector.set(__MAXVERSIONS_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXVERSIONS_ISSET_ID, value);
   }
 
   public String getCompression() {
@@ -364,16 +366,16 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
   }
 
   public void unsetInMemory() {
-    __isset_bit_vector.clear(__INMEMORY_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INMEMORY_ISSET_ID);
   }
 
   /** Returns true if field inMemory is set (has been assigned a value) and false otherwise */
   public boolean isSetInMemory() {
-    return __isset_bit_vector.get(__INMEMORY_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __INMEMORY_ISSET_ID);
   }
 
   public void setInMemoryIsSet(boolean value) {
-    __isset_bit_vector.set(__INMEMORY_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INMEMORY_ISSET_ID, value);
   }
 
   public String getBloomFilterType() {
@@ -411,16 +413,16 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
   }
 
   public void unsetBloomFilterVectorSize() {
-    __isset_bit_vector.clear(__BLOOMFILTERVECTORSIZE_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOOMFILTERVECTORSIZE_ISSET_ID);
   }
 
   /** Returns true if field bloomFilterVectorSize is set (has been assigned a value) and false otherwise */
   public boolean isSetBloomFilterVectorSize() {
-    return __isset_bit_vector.get(__BLOOMFILTERVECTORSIZE_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __BLOOMFILTERVECTORSIZE_ISSET_ID);
   }
 
   public void setBloomFilterVectorSizeIsSet(boolean value) {
-    __isset_bit_vector.set(__BLOOMFILTERVECTORSIZE_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOOMFILTERVECTORSIZE_ISSET_ID, value);
   }
 
   public int getBloomFilterNbHashes() {
@@ -434,16 +436,16 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
   }
 
   public void unsetBloomFilterNbHashes() {
-    __isset_bit_vector.clear(__BLOOMFILTERNBHASHES_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOOMFILTERNBHASHES_ISSET_ID);
   }
 
   /** Returns true if field bloomFilterNbHashes is set (has been assigned a value) and false otherwise */
   public boolean isSetBloomFilterNbHashes() {
-    return __isset_bit_vector.get(__BLOOMFILTERNBHASHES_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __BLOOMFILTERNBHASHES_ISSET_ID);
   }
 
   public void setBloomFilterNbHashesIsSet(boolean value) {
-    __isset_bit_vector.set(__BLOOMFILTERNBHASHES_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOOMFILTERNBHASHES_ISSET_ID, value);
   }
 
   public boolean isBlockCacheEnabled() {
@@ -457,16 +459,16 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
   }
 
   public void unsetBlockCacheEnabled() {
-    __isset_bit_vector.clear(__BLOCKCACHEENABLED_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKCACHEENABLED_ISSET_ID);
   }
 
   /** Returns true if field blockCacheEnabled is set (has been assigned a value) and false otherwise */
   public boolean isSetBlockCacheEnabled() {
-    return __isset_bit_vector.get(__BLOCKCACHEENABLED_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __BLOCKCACHEENABLED_ISSET_ID);
   }
 
   public void setBlockCacheEnabledIsSet(boolean value) {
-    __isset_bit_vector.set(__BLOCKCACHEENABLED_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKCACHEENABLED_ISSET_ID, value);
   }
 
   public int getTimeToLive() {
@@ -480,16 +482,16 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
   }
 
   public void unsetTimeToLive() {
-    __isset_bit_vector.clear(__TIMETOLIVE_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMETOLIVE_ISSET_ID);
   }
 
   /** Returns true if field timeToLive is set (has been assigned a value) and false otherwise */
   public boolean isSetTimeToLive() {
-    return __isset_bit_vector.get(__TIMETOLIVE_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __TIMETOLIVE_ISSET_ID);
   }
 
   public void setTimeToLiveIsSet(boolean value) {
-    __isset_bit_vector.set(__TIMETOLIVE_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMETOLIVE_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -904,6 +906,7 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -917,7 +920,7 @@ public class ColumnDescriptor implements org.apache.thrift.TBase<ColumnDescripto
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java b/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java
index e9ca236..bf06560 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift/generated/Hbase.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -3626,16 +3629,20 @@ public class Hbase {
       return processMap;
     }
 
-    private static class enableTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enableTable_args> {
+    public static class enableTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enableTable_args> {
       public enableTable() {
         super("enableTable");
       }
 
-      protected enableTable_args getEmptyArgsInstance() {
+      public enableTable_args getEmptyArgsInstance() {
         return new enableTable_args();
       }
 
-      protected enableTable_result getResult(I iface, enableTable_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public enableTable_result getResult(I iface, enableTable_args args) throws org.apache.thrift.TException {
         enableTable_result result = new enableTable_result();
         try {
           iface.enableTable(args.tableName);
@@ -3646,16 +3653,20 @@ public class Hbase {
       }
     }
 
-    private static class disableTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disableTable_args> {
+    public static class disableTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disableTable_args> {
       public disableTable() {
         super("disableTable");
       }
 
-      protected disableTable_args getEmptyArgsInstance() {
+      public disableTable_args getEmptyArgsInstance() {
         return new disableTable_args();
       }
 
-      protected disableTable_result getResult(I iface, disableTable_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public disableTable_result getResult(I iface, disableTable_args args) throws org.apache.thrift.TException {
         disableTable_result result = new disableTable_result();
         try {
           iface.disableTable(args.tableName);
@@ -3666,16 +3677,20 @@ public class Hbase {
       }
     }
 
-    private static class isTableEnabled<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isTableEnabled_args> {
+    public static class isTableEnabled<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isTableEnabled_args> {
       public isTableEnabled() {
         super("isTableEnabled");
       }
 
-      protected isTableEnabled_args getEmptyArgsInstance() {
+      public isTableEnabled_args getEmptyArgsInstance() {
         return new isTableEnabled_args();
       }
 
-      protected isTableEnabled_result getResult(I iface, isTableEnabled_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public isTableEnabled_result getResult(I iface, isTableEnabled_args args) throws org.apache.thrift.TException {
         isTableEnabled_result result = new isTableEnabled_result();
         try {
           result.success = iface.isTableEnabled(args.tableName);
@@ -3687,16 +3702,20 @@ public class Hbase {
       }
     }
 
-    private static class compact<I extends Iface> extends org.apache.thrift.ProcessFunction<I, compact_args> {
+    public static class compact<I extends Iface> extends org.apache.thrift.ProcessFunction<I, compact_args> {
       public compact() {
         super("compact");
       }
 
-      protected compact_args getEmptyArgsInstance() {
+      public compact_args getEmptyArgsInstance() {
         return new compact_args();
       }
 
-      protected compact_result getResult(I iface, compact_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public compact_result getResult(I iface, compact_args args) throws org.apache.thrift.TException {
         compact_result result = new compact_result();
         try {
           iface.compact(args.tableNameOrRegionName);
@@ -3707,16 +3726,20 @@ public class Hbase {
       }
     }
 
-    private static class majorCompact<I extends Iface> extends org.apache.thrift.ProcessFunction<I, majorCompact_args> {
+    public static class majorCompact<I extends Iface> extends org.apache.thrift.ProcessFunction<I, majorCompact_args> {
       public majorCompact() {
         super("majorCompact");
       }
 
-      protected majorCompact_args getEmptyArgsInstance() {
+      public majorCompact_args getEmptyArgsInstance() {
         return new majorCompact_args();
       }
 
-      protected majorCompact_result getResult(I iface, majorCompact_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public majorCompact_result getResult(I iface, majorCompact_args args) throws org.apache.thrift.TException {
         majorCompact_result result = new majorCompact_result();
         try {
           iface.majorCompact(args.tableNameOrRegionName);
@@ -3727,16 +3750,20 @@ public class Hbase {
       }
     }
 
-    private static class getTableNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTableNames_args> {
+    public static class getTableNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTableNames_args> {
       public getTableNames() {
         super("getTableNames");
       }
 
-      protected getTableNames_args getEmptyArgsInstance() {
+      public getTableNames_args getEmptyArgsInstance() {
         return new getTableNames_args();
       }
 
-      protected getTableNames_result getResult(I iface, getTableNames_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getTableNames_result getResult(I iface, getTableNames_args args) throws org.apache.thrift.TException {
         getTableNames_result result = new getTableNames_result();
         try {
           result.success = iface.getTableNames();
@@ -3747,16 +3774,20 @@ public class Hbase {
       }
     }
 
-    private static class getColumnDescriptors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getColumnDescriptors_args> {
+    public static class getColumnDescriptors<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getColumnDescriptors_args> {
       public getColumnDescriptors() {
         super("getColumnDescriptors");
       }
 
-      protected getColumnDescriptors_args getEmptyArgsInstance() {
+      public getColumnDescriptors_args getEmptyArgsInstance() {
         return new getColumnDescriptors_args();
       }
 
-      protected getColumnDescriptors_result getResult(I iface, getColumnDescriptors_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getColumnDescriptors_result getResult(I iface, getColumnDescriptors_args args) throws org.apache.thrift.TException {
         getColumnDescriptors_result result = new getColumnDescriptors_result();
         try {
           result.success = iface.getColumnDescriptors(args.tableName);
@@ -3767,16 +3798,20 @@ public class Hbase {
       }
     }
 
-    private static class getTableRegions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTableRegions_args> {
+    public static class getTableRegions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTableRegions_args> {
       public getTableRegions() {
         super("getTableRegions");
       }
 
-      protected getTableRegions_args getEmptyArgsInstance() {
+      public getTableRegions_args getEmptyArgsInstance() {
         return new getTableRegions_args();
       }
 
-      protected getTableRegions_result getResult(I iface, getTableRegions_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getTableRegions_result getResult(I iface, getTableRegions_args args) throws org.apache.thrift.TException {
         getTableRegions_result result = new getTableRegions_result();
         try {
           result.success = iface.getTableRegions(args.tableName);
@@ -3787,16 +3822,20 @@ public class Hbase {
       }
     }
 
-    private static class createTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createTable_args> {
+    public static class createTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createTable_args> {
       public createTable() {
         super("createTable");
       }
 
-      protected createTable_args getEmptyArgsInstance() {
+      public createTable_args getEmptyArgsInstance() {
         return new createTable_args();
       }
 
-      protected createTable_result getResult(I iface, createTable_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public createTable_result getResult(I iface, createTable_args args) throws org.apache.thrift.TException {
         createTable_result result = new createTable_result();
         try {
           iface.createTable(args.tableName, args.columnFamilies);
@@ -3811,16 +3850,20 @@ public class Hbase {
       }
     }
 
-    private static class deleteTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTable_args> {
+    public static class deleteTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTable_args> {
       public deleteTable() {
         super("deleteTable");
       }
 
-      protected deleteTable_args getEmptyArgsInstance() {
+      public deleteTable_args getEmptyArgsInstance() {
         return new deleteTable_args();
       }
 
-      protected deleteTable_result getResult(I iface, deleteTable_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public deleteTable_result getResult(I iface, deleteTable_args args) throws org.apache.thrift.TException {
         deleteTable_result result = new deleteTable_result();
         try {
           iface.deleteTable(args.tableName);
@@ -3831,16 +3874,20 @@ public class Hbase {
       }
     }
 
-    private static class get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_args> {
+    public static class get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_args> {
       public get() {
         super("get");
       }
 
-      protected get_args getEmptyArgsInstance() {
+      public get_args getEmptyArgsInstance() {
         return new get_args();
       }
 
-      protected get_result getResult(I iface, get_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public get_result getResult(I iface, get_args args) throws org.apache.thrift.TException {
         get_result result = new get_result();
         try {
           result.success = iface.get(args.tableName, args.row, args.column, args.attributes);
@@ -3851,16 +3898,20 @@ public class Hbase {
       }
     }
 
-    private static class getVer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVer_args> {
+    public static class getVer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVer_args> {
       public getVer() {
         super("getVer");
       }
 
-      protected getVer_args getEmptyArgsInstance() {
+      public getVer_args getEmptyArgsInstance() {
         return new getVer_args();
       }
 
-      protected getVer_result getResult(I iface, getVer_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getVer_result getResult(I iface, getVer_args args) throws org.apache.thrift.TException {
         getVer_result result = new getVer_result();
         try {
           result.success = iface.getVer(args.tableName, args.row, args.column, args.numVersions, args.attributes);
@@ -3871,16 +3922,20 @@ public class Hbase {
       }
     }
 
-    private static class getVerTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVerTs_args> {
+    public static class getVerTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVerTs_args> {
       public getVerTs() {
         super("getVerTs");
       }
 
-      protected getVerTs_args getEmptyArgsInstance() {
+      public getVerTs_args getEmptyArgsInstance() {
         return new getVerTs_args();
       }
 
-      protected getVerTs_result getResult(I iface, getVerTs_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getVerTs_result getResult(I iface, getVerTs_args args) throws org.apache.thrift.TException {
         getVerTs_result result = new getVerTs_result();
         try {
           result.success = iface.getVerTs(args.tableName, args.row, args.column, args.timestamp, args.numVersions, args.attributes);
@@ -3891,16 +3946,20 @@ public class Hbase {
       }
     }
 
-    private static class getRow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRow_args> {
+    public static class getRow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRow_args> {
       public getRow() {
         super("getRow");
       }
 
-      protected getRow_args getEmptyArgsInstance() {
+      public getRow_args getEmptyArgsInstance() {
         return new getRow_args();
       }
 
-      protected getRow_result getResult(I iface, getRow_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getRow_result getResult(I iface, getRow_args args) throws org.apache.thrift.TException {
         getRow_result result = new getRow_result();
         try {
           result.success = iface.getRow(args.tableName, args.row, args.attributes);
@@ -3911,16 +3970,20 @@ public class Hbase {
       }
     }
 
-    private static class getRowWithColumns<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowWithColumns_args> {
+    public static class getRowWithColumns<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowWithColumns_args> {
       public getRowWithColumns() {
         super("getRowWithColumns");
       }
 
-      protected getRowWithColumns_args getEmptyArgsInstance() {
+      public getRowWithColumns_args getEmptyArgsInstance() {
         return new getRowWithColumns_args();
       }
 
-      protected getRowWithColumns_result getResult(I iface, getRowWithColumns_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getRowWithColumns_result getResult(I iface, getRowWithColumns_args args) throws org.apache.thrift.TException {
         getRowWithColumns_result result = new getRowWithColumns_result();
         try {
           result.success = iface.getRowWithColumns(args.tableName, args.row, args.columns, args.attributes);
@@ -3931,16 +3994,20 @@ public class Hbase {
       }
     }
 
-    private static class getRowTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowTs_args> {
+    public static class getRowTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowTs_args> {
       public getRowTs() {
         super("getRowTs");
       }
 
-      protected getRowTs_args getEmptyArgsInstance() {
+      public getRowTs_args getEmptyArgsInstance() {
         return new getRowTs_args();
       }
 
-      protected getRowTs_result getResult(I iface, getRowTs_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getRowTs_result getResult(I iface, getRowTs_args args) throws org.apache.thrift.TException {
         getRowTs_result result = new getRowTs_result();
         try {
           result.success = iface.getRowTs(args.tableName, args.row, args.timestamp, args.attributes);
@@ -3951,16 +4018,20 @@ public class Hbase {
       }
     }
 
-    private static class getRowWithColumnsTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowWithColumnsTs_args> {
+    public static class getRowWithColumnsTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowWithColumnsTs_args> {
       public getRowWithColumnsTs() {
         super("getRowWithColumnsTs");
       }
 
-      protected getRowWithColumnsTs_args getEmptyArgsInstance() {
+      public getRowWithColumnsTs_args getEmptyArgsInstance() {
         return new getRowWithColumnsTs_args();
       }
 
-      protected getRowWithColumnsTs_result getResult(I iface, getRowWithColumnsTs_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getRowWithColumnsTs_result getResult(I iface, getRowWithColumnsTs_args args) throws org.apache.thrift.TException {
         getRowWithColumnsTs_result result = new getRowWithColumnsTs_result();
         try {
           result.success = iface.getRowWithColumnsTs(args.tableName, args.row, args.columns, args.timestamp, args.attributes);
@@ -3971,16 +4042,20 @@ public class Hbase {
       }
     }
 
-    private static class getRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRows_args> {
+    public static class getRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRows_args> {
       public getRows() {
         super("getRows");
       }
 
-      protected getRows_args getEmptyArgsInstance() {
+      public getRows_args getEmptyArgsInstance() {
         return new getRows_args();
       }
 
-      protected getRows_result getResult(I iface, getRows_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getRows_result getResult(I iface, getRows_args args) throws org.apache.thrift.TException {
         getRows_result result = new getRows_result();
         try {
           result.success = iface.getRows(args.tableName, args.rows, args.attributes);
@@ -3991,16 +4066,20 @@ public class Hbase {
       }
     }
 
-    private static class getRowsWithColumns<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowsWithColumns_args> {
+    public static class getRowsWithColumns<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowsWithColumns_args> {
       public getRowsWithColumns() {
         super("getRowsWithColumns");
       }
 
-      protected getRowsWithColumns_args getEmptyArgsInstance() {
+      public getRowsWithColumns_args getEmptyArgsInstance() {
         return new getRowsWithColumns_args();
       }
 
-      protected getRowsWithColumns_result getResult(I iface, getRowsWithColumns_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getRowsWithColumns_result getResult(I iface, getRowsWithColumns_args args) throws org.apache.thrift.TException {
         getRowsWithColumns_result result = new getRowsWithColumns_result();
         try {
           result.success = iface.getRowsWithColumns(args.tableName, args.rows, args.columns, args.attributes);
@@ -4011,16 +4090,20 @@ public class Hbase {
       }
     }
 
-    private static class getRowsTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowsTs_args> {
+    public static class getRowsTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowsTs_args> {
       public getRowsTs() {
         super("getRowsTs");
       }
 
-      protected getRowsTs_args getEmptyArgsInstance() {
+      public getRowsTs_args getEmptyArgsInstance() {
         return new getRowsTs_args();
       }
 
-      protected getRowsTs_result getResult(I iface, getRowsTs_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getRowsTs_result getResult(I iface, getRowsTs_args args) throws org.apache.thrift.TException {
         getRowsTs_result result = new getRowsTs_result();
         try {
           result.success = iface.getRowsTs(args.tableName, args.rows, args.timestamp, args.attributes);
@@ -4031,16 +4114,20 @@ public class Hbase {
       }
     }
 
-    private static class getRowsWithColumnsTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowsWithColumnsTs_args> {
+    public static class getRowsWithColumnsTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowsWithColumnsTs_args> {
       public getRowsWithColumnsTs() {
         super("getRowsWithColumnsTs");
       }
 
-      protected getRowsWithColumnsTs_args getEmptyArgsInstance() {
+      public getRowsWithColumnsTs_args getEmptyArgsInstance() {
         return new getRowsWithColumnsTs_args();
       }
 
-      protected getRowsWithColumnsTs_result getResult(I iface, getRowsWithColumnsTs_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getRowsWithColumnsTs_result getResult(I iface, getRowsWithColumnsTs_args args) throws org.apache.thrift.TException {
         getRowsWithColumnsTs_result result = new getRowsWithColumnsTs_result();
         try {
           result.success = iface.getRowsWithColumnsTs(args.tableName, args.rows, args.columns, args.timestamp, args.attributes);
@@ -4051,16 +4138,20 @@ public class Hbase {
       }
     }
 
-    private static class mutateRow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutateRow_args> {
+    public static class mutateRow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutateRow_args> {
       public mutateRow() {
         super("mutateRow");
       }
 
-      protected mutateRow_args getEmptyArgsInstance() {
+      public mutateRow_args getEmptyArgsInstance() {
         return new mutateRow_args();
       }
 
-      protected mutateRow_result getResult(I iface, mutateRow_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public mutateRow_result getResult(I iface, mutateRow_args args) throws org.apache.thrift.TException {
         mutateRow_result result = new mutateRow_result();
         try {
           iface.mutateRow(args.tableName, args.row, args.mutations, args.attributes);
@@ -4073,16 +4164,20 @@ public class Hbase {
       }
     }
 
-    private static class mutateRowTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutateRowTs_args> {
+    public static class mutateRowTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutateRowTs_args> {
       public mutateRowTs() {
         super("mutateRowTs");
       }
 
-      protected mutateRowTs_args getEmptyArgsInstance() {
+      public mutateRowTs_args getEmptyArgsInstance() {
         return new mutateRowTs_args();
       }
 
-      protected mutateRowTs_result getResult(I iface, mutateRowTs_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public mutateRowTs_result getResult(I iface, mutateRowTs_args args) throws org.apache.thrift.TException {
         mutateRowTs_result result = new mutateRowTs_result();
         try {
           iface.mutateRowTs(args.tableName, args.row, args.mutations, args.timestamp, args.attributes);
@@ -4095,16 +4190,20 @@ public class Hbase {
       }
     }
 
-    private static class mutateRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutateRows_args> {
+    public static class mutateRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutateRows_args> {
       public mutateRows() {
         super("mutateRows");
       }
 
-      protected mutateRows_args getEmptyArgsInstance() {
+      public mutateRows_args getEmptyArgsInstance() {
         return new mutateRows_args();
       }
 
-      protected mutateRows_result getResult(I iface, mutateRows_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public mutateRows_result getResult(I iface, mutateRows_args args) throws org.apache.thrift.TException {
         mutateRows_result result = new mutateRows_result();
         try {
           iface.mutateRows(args.tableName, args.rowBatches, args.attributes);
@@ -4117,16 +4216,20 @@ public class Hbase {
       }
     }
 
-    private static class mutateRowsTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutateRowsTs_args> {
+    public static class mutateRowsTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutateRowsTs_args> {
       public mutateRowsTs() {
         super("mutateRowsTs");
       }
 
-      protected mutateRowsTs_args getEmptyArgsInstance() {
+      public mutateRowsTs_args getEmptyArgsInstance() {
         return new mutateRowsTs_args();
       }
 
-      protected mutateRowsTs_result getResult(I iface, mutateRowsTs_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public mutateRowsTs_result getResult(I iface, mutateRowsTs_args args) throws org.apache.thrift.TException {
         mutateRowsTs_result result = new mutateRowsTs_result();
         try {
           iface.mutateRowsTs(args.tableName, args.rowBatches, args.timestamp, args.attributes);
@@ -4139,16 +4242,20 @@ public class Hbase {
       }
     }
 
-    private static class atomicIncrement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, atomicIncrement_args> {
+    public static class atomicIncrement<I extends Iface> extends org.apache.thrift.ProcessFunction<I, atomicIncrement_args> {
       public atomicIncrement() {
         super("atomicIncrement");
       }
 
-      protected atomicIncrement_args getEmptyArgsInstance() {
+      public atomicIncrement_args getEmptyArgsInstance() {
         return new atomicIncrement_args();
       }
 
-      protected atomicIncrement_result getResult(I iface, atomicIncrement_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public atomicIncrement_result getResult(I iface, atomicIncrement_args args) throws org.apache.thrift.TException {
         atomicIncrement_result result = new atomicIncrement_result();
         try {
           result.success = iface.atomicIncrement(args.tableName, args.row, args.column, args.value);
@@ -4162,16 +4269,20 @@ public class Hbase {
       }
     }
 
-    private static class deleteAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAll_args> {
+    public static class deleteAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAll_args> {
       public deleteAll() {
         super("deleteAll");
       }
 
-      protected deleteAll_args getEmptyArgsInstance() {
+      public deleteAll_args getEmptyArgsInstance() {
         return new deleteAll_args();
       }
 
-      protected deleteAll_result getResult(I iface, deleteAll_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public deleteAll_result getResult(I iface, deleteAll_args args) throws org.apache.thrift.TException {
         deleteAll_result result = new deleteAll_result();
         try {
           iface.deleteAll(args.tableName, args.row, args.column, args.attributes);
@@ -4182,16 +4293,20 @@ public class Hbase {
       }
     }
 
-    private static class deleteAllTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAllTs_args> {
+    public static class deleteAllTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAllTs_args> {
       public deleteAllTs() {
         super("deleteAllTs");
       }
 
-      protected deleteAllTs_args getEmptyArgsInstance() {
+      public deleteAllTs_args getEmptyArgsInstance() {
         return new deleteAllTs_args();
       }
 
-      protected deleteAllTs_result getResult(I iface, deleteAllTs_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public deleteAllTs_result getResult(I iface, deleteAllTs_args args) throws org.apache.thrift.TException {
         deleteAllTs_result result = new deleteAllTs_result();
         try {
           iface.deleteAllTs(args.tableName, args.row, args.column, args.timestamp, args.attributes);
@@ -4202,16 +4317,20 @@ public class Hbase {
       }
     }
 
-    private static class deleteAllRow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAllRow_args> {
+    public static class deleteAllRow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAllRow_args> {
       public deleteAllRow() {
         super("deleteAllRow");
       }
 
-      protected deleteAllRow_args getEmptyArgsInstance() {
+      public deleteAllRow_args getEmptyArgsInstance() {
         return new deleteAllRow_args();
       }
 
-      protected deleteAllRow_result getResult(I iface, deleteAllRow_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public deleteAllRow_result getResult(I iface, deleteAllRow_args args) throws org.apache.thrift.TException {
         deleteAllRow_result result = new deleteAllRow_result();
         try {
           iface.deleteAllRow(args.tableName, args.row, args.attributes);
@@ -4222,16 +4341,20 @@ public class Hbase {
       }
     }
 
-    private static class increment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, increment_args> {
+    public static class increment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, increment_args> {
       public increment() {
         super("increment");
       }
 
-      protected increment_args getEmptyArgsInstance() {
+      public increment_args getEmptyArgsInstance() {
         return new increment_args();
       }
 
-      protected increment_result getResult(I iface, increment_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public increment_result getResult(I iface, increment_args args) throws org.apache.thrift.TException {
         increment_result result = new increment_result();
         try {
           iface.increment(args.increment);
@@ -4242,16 +4365,20 @@ public class Hbase {
       }
     }
 
-    private static class incrementRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, incrementRows_args> {
+    public static class incrementRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, incrementRows_args> {
       public incrementRows() {
         super("incrementRows");
       }
 
-      protected incrementRows_args getEmptyArgsInstance() {
+      public incrementRows_args getEmptyArgsInstance() {
         return new incrementRows_args();
       }
 
-      protected incrementRows_result getResult(I iface, incrementRows_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public incrementRows_result getResult(I iface, incrementRows_args args) throws org.apache.thrift.TException {
         incrementRows_result result = new incrementRows_result();
         try {
           iface.incrementRows(args.increments);
@@ -4262,16 +4389,20 @@ public class Hbase {
       }
     }
 
-    private static class deleteAllRowTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAllRowTs_args> {
+    public static class deleteAllRowTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAllRowTs_args> {
       public deleteAllRowTs() {
         super("deleteAllRowTs");
       }
 
-      protected deleteAllRowTs_args getEmptyArgsInstance() {
+      public deleteAllRowTs_args getEmptyArgsInstance() {
         return new deleteAllRowTs_args();
       }
 
-      protected deleteAllRowTs_result getResult(I iface, deleteAllRowTs_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public deleteAllRowTs_result getResult(I iface, deleteAllRowTs_args args) throws org.apache.thrift.TException {
         deleteAllRowTs_result result = new deleteAllRowTs_result();
         try {
           iface.deleteAllRowTs(args.tableName, args.row, args.timestamp, args.attributes);
@@ -4282,16 +4413,20 @@ public class Hbase {
       }
     }
 
-    private static class scannerOpenWithScan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerOpenWithScan_args> {
+    public static class scannerOpenWithScan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerOpenWithScan_args> {
       public scannerOpenWithScan() {
         super("scannerOpenWithScan");
       }
 
-      protected scannerOpenWithScan_args getEmptyArgsInstance() {
+      public scannerOpenWithScan_args getEmptyArgsInstance() {
         return new scannerOpenWithScan_args();
       }
 
-      protected scannerOpenWithScan_result getResult(I iface, scannerOpenWithScan_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public scannerOpenWithScan_result getResult(I iface, scannerOpenWithScan_args args) throws org.apache.thrift.TException {
         scannerOpenWithScan_result result = new scannerOpenWithScan_result();
         try {
           result.success = iface.scannerOpenWithScan(args.tableName, args.scan, args.attributes);
@@ -4303,16 +4438,20 @@ public class Hbase {
       }
     }
 
-    private static class scannerOpen<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerOpen_args> {
+    public static class scannerOpen<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerOpen_args> {
       public scannerOpen() {
         super("scannerOpen");
       }
 
-      protected scannerOpen_args getEmptyArgsInstance() {
+      public scannerOpen_args getEmptyArgsInstance() {
         return new scannerOpen_args();
       }
 
-      protected scannerOpen_result getResult(I iface, scannerOpen_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public scannerOpen_result getResult(I iface, scannerOpen_args args) throws org.apache.thrift.TException {
         scannerOpen_result result = new scannerOpen_result();
         try {
           result.success = iface.scannerOpen(args.tableName, args.startRow, args.columns, args.attributes);
@@ -4324,16 +4463,20 @@ public class Hbase {
       }
     }
 
-    private static class scannerOpenWithStop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerOpenWithStop_args> {
+    public static class scannerOpenWithStop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerOpenWithStop_args> {
       public scannerOpenWithStop() {
         super("scannerOpenWithStop");
       }
 
-      protected scannerOpenWithStop_args getEmptyArgsInstance() {
+      public scannerOpenWithStop_args getEmptyArgsInstance() {
         return new scannerOpenWithStop_args();
       }
 
-      protected scannerOpenWithStop_result getResult(I iface, scannerOpenWithStop_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public scannerOpenWithStop_result getResult(I iface, scannerOpenWithStop_args args) throws org.apache.thrift.TException {
         scannerOpenWithStop_result result = new scannerOpenWithStop_result();
         try {
           result.success = iface.scannerOpenWithStop(args.tableName, args.startRow, args.stopRow, args.columns, args.attributes);
@@ -4345,16 +4488,20 @@ public class Hbase {
       }
     }
 
-    private static class scannerOpenWithPrefix<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerOpenWithPrefix_args> {
+    public static class scannerOpenWithPrefix<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerOpenWithPrefix_args> {
       public scannerOpenWithPrefix() {
         super("scannerOpenWithPrefix");
       }
 
-      protected scannerOpenWithPrefix_args getEmptyArgsInstance() {
+      public scannerOpenWithPrefix_args getEmptyArgsInstance() {
         return new scannerOpenWithPrefix_args();
       }
 
-      protected scannerOpenWithPrefix_result getResult(I iface, scannerOpenWithPrefix_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public scannerOpenWithPrefix_result getResult(I iface, scannerOpenWithPrefix_args args) throws org.apache.thrift.TException {
         scannerOpenWithPrefix_result result = new scannerOpenWithPrefix_result();
         try {
           result.success = iface.scannerOpenWithPrefix(args.tableName, args.startAndPrefix, args.columns, args.attributes);
@@ -4366,16 +4513,20 @@ public class Hbase {
       }
     }
 
-    private static class scannerOpenTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerOpenTs_args> {
+    public static class scannerOpenTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerOpenTs_args> {
       public scannerOpenTs() {
         super("scannerOpenTs");
       }
 
-      protected scannerOpenTs_args getEmptyArgsInstance() {
+      public scannerOpenTs_args getEmptyArgsInstance() {
         return new scannerOpenTs_args();
       }
 
-      protected scannerOpenTs_result getResult(I iface, scannerOpenTs_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public scannerOpenTs_result getResult(I iface, scannerOpenTs_args args) throws org.apache.thrift.TException {
         scannerOpenTs_result result = new scannerOpenTs_result();
         try {
           result.success = iface.scannerOpenTs(args.tableName, args.startRow, args.columns, args.timestamp, args.attributes);
@@ -4387,16 +4538,20 @@ public class Hbase {
       }
     }
 
-    private static class scannerOpenWithStopTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerOpenWithStopTs_args> {
+    public static class scannerOpenWithStopTs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerOpenWithStopTs_args> {
       public scannerOpenWithStopTs() {
         super("scannerOpenWithStopTs");
       }
 
-      protected scannerOpenWithStopTs_args getEmptyArgsInstance() {
+      public scannerOpenWithStopTs_args getEmptyArgsInstance() {
         return new scannerOpenWithStopTs_args();
       }
 
-      protected scannerOpenWithStopTs_result getResult(I iface, scannerOpenWithStopTs_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public scannerOpenWithStopTs_result getResult(I iface, scannerOpenWithStopTs_args args) throws org.apache.thrift.TException {
         scannerOpenWithStopTs_result result = new scannerOpenWithStopTs_result();
         try {
           result.success = iface.scannerOpenWithStopTs(args.tableName, args.startRow, args.stopRow, args.columns, args.timestamp, args.attributes);
@@ -4408,16 +4563,20 @@ public class Hbase {
       }
     }
 
-    private static class scannerGet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerGet_args> {
+    public static class scannerGet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerGet_args> {
       public scannerGet() {
         super("scannerGet");
       }
 
-      protected scannerGet_args getEmptyArgsInstance() {
+      public scannerGet_args getEmptyArgsInstance() {
         return new scannerGet_args();
       }
 
-      protected scannerGet_result getResult(I iface, scannerGet_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public scannerGet_result getResult(I iface, scannerGet_args args) throws org.apache.thrift.TException {
         scannerGet_result result = new scannerGet_result();
         try {
           result.success = iface.scannerGet(args.id);
@@ -4430,16 +4589,20 @@ public class Hbase {
       }
     }
 
-    private static class scannerGetList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerGetList_args> {
+    public static class scannerGetList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerGetList_args> {
       public scannerGetList() {
         super("scannerGetList");
       }
 
-      protected scannerGetList_args getEmptyArgsInstance() {
+      public scannerGetList_args getEmptyArgsInstance() {
         return new scannerGetList_args();
       }
 
-      protected scannerGetList_result getResult(I iface, scannerGetList_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public scannerGetList_result getResult(I iface, scannerGetList_args args) throws org.apache.thrift.TException {
         scannerGetList_result result = new scannerGetList_result();
         try {
           result.success = iface.scannerGetList(args.id, args.nbRows);
@@ -4452,16 +4615,20 @@ public class Hbase {
       }
     }
 
-    private static class scannerClose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerClose_args> {
+    public static class scannerClose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scannerClose_args> {
       public scannerClose() {
         super("scannerClose");
       }
 
-      protected scannerClose_args getEmptyArgsInstance() {
+      public scannerClose_args getEmptyArgsInstance() {
         return new scannerClose_args();
       }
 
-      protected scannerClose_result getResult(I iface, scannerClose_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public scannerClose_result getResult(I iface, scannerClose_args args) throws org.apache.thrift.TException {
         scannerClose_result result = new scannerClose_result();
         try {
           iface.scannerClose(args.id);
@@ -4474,16 +4641,20 @@ public class Hbase {
       }
     }
 
-    private static class getRowOrBefore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowOrBefore_args> {
+    public static class getRowOrBefore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRowOrBefore_args> {
       public getRowOrBefore() {
         super("getRowOrBefore");
       }
 
-      protected getRowOrBefore_args getEmptyArgsInstance() {
+      public getRowOrBefore_args getEmptyArgsInstance() {
         return new getRowOrBefore_args();
       }
 
-      protected getRowOrBefore_result getResult(I iface, getRowOrBefore_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getRowOrBefore_result getResult(I iface, getRowOrBefore_args args) throws org.apache.thrift.TException {
         getRowOrBefore_result result = new getRowOrBefore_result();
         try {
           result.success = iface.getRowOrBefore(args.tableName, args.row, args.family);
@@ -4494,16 +4665,20 @@ public class Hbase {
       }
     }
 
-    private static class getRegionInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegionInfo_args> {
+    public static class getRegionInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegionInfo_args> {
       public getRegionInfo() {
         super("getRegionInfo");
       }
 
-      protected getRegionInfo_args getEmptyArgsInstance() {
+      public getRegionInfo_args getEmptyArgsInstance() {
         return new getRegionInfo_args();
       }
 
-      protected getRegionInfo_result getResult(I iface, getRegionInfo_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getRegionInfo_result getResult(I iface, getRegionInfo_args args) throws org.apache.thrift.TException {
         getRegionInfo_result result = new getRegionInfo_result();
         try {
           result.success = iface.getRegionInfo(args.row);
@@ -4787,6 +4962,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -5140,6 +5316,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -5517,6 +5694,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -5870,6 +6048,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -6247,6 +6426,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -6429,7 +6609,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -6458,8 +6638,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public isTableEnabled_result(isTableEnabled_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
       if (other.isSetIo()) {
         this.io = new IOError(other.io);
@@ -6488,16 +6667,16 @@ public class Hbase {
     }
 
     public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been assigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
     public IOError getIo() {
@@ -6676,6 +6855,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -6689,7 +6869,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -6746,9 +6926,11 @@ public class Hbase {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeBool(struct.success);
-        oprot.writeFieldEnd();
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeBool(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.io != null) {
           oprot.writeFieldBegin(IO_FIELD_DESC);
           struct.io.write(oprot);
@@ -7064,6 +7246,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -7417,6 +7600,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -7782,6 +7966,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -8135,6 +8320,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -8408,6 +8594,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -8832,6 +9019,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -8875,7 +9063,7 @@ public class Hbase {
                   struct.success = new ArrayList<ByteBuffer>(_list26.size);
                   for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                   {
-                    ByteBuffer _elem28; // optional
+                    ByteBuffer _elem28; // required
                     _elem28 = iprot.readBinary();
                     struct.success.add(_elem28);
                   }
@@ -8976,7 +9164,7 @@ public class Hbase {
             struct.success = new ArrayList<ByteBuffer>(_list31.size);
             for (int _i32 = 0; _i32 < _list31.size; ++_i32)
             {
-              ByteBuffer _elem33; // optional
+              ByteBuffer _elem33; // required
               _elem33 = iprot.readBinary();
               struct.success.add(_elem33);
             }
@@ -9264,6 +9452,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -9719,6 +9908,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -9763,7 +9953,7 @@ public class Hbase {
                   for (int _i35 = 0; _i35 < _map34.size; ++_i35)
                   {
                     ByteBuffer _key36; // required
-                    ColumnDescriptor _val37; // optional
+                    ColumnDescriptor _val37; // required
                     _key36 = iprot.readBinary();
                     _val37 = new ColumnDescriptor();
                     _val37.read(iprot);
@@ -9869,7 +10059,7 @@ public class Hbase {
             for (int _i41 = 0; _i41 < _map40.size; ++_i41)
             {
               ByteBuffer _key42; // required
-              ColumnDescriptor _val43; // optional
+              ColumnDescriptor _val43; // required
               _key42 = iprot.readBinary();
               _val43 = new ColumnDescriptor();
               _val43.read(iprot);
@@ -10159,6 +10349,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -10609,6 +10800,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -10652,7 +10844,7 @@ public class Hbase {
                   struct.success = new ArrayList<TRegionInfo>(_list44.size);
                   for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                   {
-                    TRegionInfo _elem46; // optional
+                    TRegionInfo _elem46; // required
                     _elem46 = new TRegionInfo();
                     _elem46.read(iprot);
                     struct.success.add(_elem46);
@@ -10754,7 +10946,7 @@ public class Hbase {
             struct.success = new ArrayList<TRegionInfo>(_list49.size);
             for (int _i50 = 0; _i50 < _list49.size; ++_i50)
             {
-              TRegionInfo _elem51; // optional
+              TRegionInfo _elem51; // required
               _elem51 = new TRegionInfo();
               _elem51.read(iprot);
               struct.success.add(_elem51);
@@ -11152,6 +11344,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -11203,7 +11396,7 @@ public class Hbase {
                   struct.columnFamilies = new ArrayList<ColumnDescriptor>(_list52.size);
                   for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                   {
-                    ColumnDescriptor _elem54; // optional
+                    ColumnDescriptor _elem54; // required
                     _elem54 = new ColumnDescriptor();
                     _elem54.read(iprot);
                     struct.columnFamilies.add(_elem54);
@@ -11300,7 +11493,7 @@ public class Hbase {
             struct.columnFamilies = new ArrayList<ColumnDescriptor>(_list57.size);
             for (int _i58 = 0; _i58 < _list57.size; ++_i58)
             {
-              ColumnDescriptor _elem59; // optional
+              ColumnDescriptor _elem59; // required
               _elem59 = new ColumnDescriptor();
               _elem59.read(iprot);
               struct.columnFamilies.add(_elem59);
@@ -11716,6 +11909,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -12143,6 +12337,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -12496,6 +12691,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -13185,6 +13381,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -13253,7 +13450,7 @@ public class Hbase {
                   for (int _i61 = 0; _i61 < _map60.size; ++_i61)
                   {
                     ByteBuffer _key62; // required
-                    ByteBuffer _val63; // optional
+                    ByteBuffer _val63; // required
                     _key62 = iprot.readBinary();
                     _val63 = iprot.readBinary();
                     struct.attributes.put(_key62, _val63);
@@ -13383,7 +13580,7 @@ public class Hbase {
             for (int _i67 = 0; _i67 < _map66.size; ++_i67)
             {
               ByteBuffer _key68; // required
-              ByteBuffer _val69; // optional
+              ByteBuffer _val69; // required
               _key68 = iprot.readBinary();
               _val69 = iprot.readBinary();
               struct.attributes.put(_key68, _val69);
@@ -13742,6 +13939,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -13785,7 +13983,7 @@ public class Hbase {
                   struct.success = new ArrayList<TCell>(_list70.size);
                   for (int _i71 = 0; _i71 < _list70.size; ++_i71)
                   {
-                    TCell _elem72; // optional
+                    TCell _elem72; // required
                     _elem72 = new TCell();
                     _elem72.read(iprot);
                     struct.success.add(_elem72);
@@ -13887,7 +14085,7 @@ public class Hbase {
             struct.success = new ArrayList<TCell>(_list75.size);
             for (int _i76 = 0; _i76 < _list75.size; ++_i76)
             {
-              TCell _elem77; // optional
+              TCell _elem77; // required
               _elem77 = new TCell();
               _elem77.read(iprot);
               struct.success.add(_elem77);
@@ -14028,7 +14226,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __NUMVERSIONS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -14071,8 +14269,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public getVer_args(getVer_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -14251,16 +14448,16 @@ public class Hbase {
     }
 
     public void unsetNumVersions() {
-      __isset_bit_vector.clear(__NUMVERSIONS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMVERSIONS_ISSET_ID);
     }
 
     /** Returns true if field numVersions is set (has been assigned a value) and false otherwise */
     public boolean isSetNumVersions() {
-      return __isset_bit_vector.get(__NUMVERSIONS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __NUMVERSIONS_ISSET_ID);
     }
 
     public void setNumVersionsIsSet(boolean value) {
-      __isset_bit_vector.set(__NUMVERSIONS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMVERSIONS_ISSET_ID, value);
     }
 
     public int getAttributesSize() {
@@ -14576,6 +14773,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -14589,7 +14787,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -14654,7 +14852,7 @@ public class Hbase {
                   for (int _i79 = 0; _i79 < _map78.size; ++_i79)
                   {
                     ByteBuffer _key80; // required
-                    ByteBuffer _val81; // optional
+                    ByteBuffer _val81; // required
                     _key80 = iprot.readBinary();
                     _val81 = iprot.readBinary();
                     struct.attributes.put(_key80, _val81);
@@ -14797,7 +14995,7 @@ public class Hbase {
             for (int _i85 = 0; _i85 < _map84.size; ++_i85)
             {
               ByteBuffer _key86; // required
-              ByteBuffer _val87; // optional
+              ByteBuffer _val87; // required
               _key86 = iprot.readBinary();
               _val87 = iprot.readBinary();
               struct.attributes.put(_key86, _val87);
@@ -15156,6 +15354,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -15199,7 +15398,7 @@ public class Hbase {
                   struct.success = new ArrayList<TCell>(_list88.size);
                   for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                   {
-                    TCell _elem90; // optional
+                    TCell _elem90; // required
                     _elem90 = new TCell();
                     _elem90.read(iprot);
                     struct.success.add(_elem90);
@@ -15301,7 +15500,7 @@ public class Hbase {
             struct.success = new ArrayList<TCell>(_list93.size);
             for (int _i94 = 0; _i94 < _list93.size; ++_i94)
             {
-              TCell _elem95; // optional
+              TCell _elem95; // required
               _elem95 = new TCell();
               _elem95.read(iprot);
               struct.success.add(_elem95);
@@ -15454,7 +15653,7 @@ public class Hbase {
     // isset id assignments
     private static final int __TIMESTAMP_ISSET_ID = 0;
     private static final int __NUMVERSIONS_ISSET_ID = 1;
-    private BitSet __isset_bit_vector = new BitSet(2);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -15502,8 +15701,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public getVerTs_args(getVerTs_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -15685,16 +15883,16 @@ public class Hbase {
     }
 
     public void unsetTimestamp() {
-      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
     public boolean isSetTimestamp() {
-      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     public void setTimestampIsSet(boolean value) {
-      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
     }
 
     /**
@@ -15714,16 +15912,16 @@ public class Hbase {
     }
 
     public void unsetNumVersions() {
-      __isset_bit_vector.clear(__NUMVERSIONS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMVERSIONS_ISSET_ID);
     }
 
     /** Returns true if field numVersions is set (has been assigned a value) and false otherwise */
     public boolean isSetNumVersions() {
-      return __isset_bit_vector.get(__NUMVERSIONS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __NUMVERSIONS_ISSET_ID);
     }
 
     public void setNumVersionsIsSet(boolean value) {
-      __isset_bit_vector.set(__NUMVERSIONS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMVERSIONS_ISSET_ID, value);
     }
 
     public int getAttributesSize() {
@@ -16075,6 +16273,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -16088,7 +16287,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -16161,7 +16360,7 @@ public class Hbase {
                   for (int _i97 = 0; _i97 < _map96.size; ++_i97)
                   {
                     ByteBuffer _key98; // required
-                    ByteBuffer _val99; // optional
+                    ByteBuffer _val99; // required
                     _key98 = iprot.readBinary();
                     _val99 = iprot.readBinary();
                     struct.attributes.put(_key98, _val99);
@@ -16317,7 +16516,7 @@ public class Hbase {
             for (int _i103 = 0; _i103 < _map102.size; ++_i103)
             {
               ByteBuffer _key104; // required
-              ByteBuffer _val105; // optional
+              ByteBuffer _val105; // required
               _key104 = iprot.readBinary();
               _val105 = iprot.readBinary();
               struct.attributes.put(_key104, _val105);
@@ -16676,6 +16875,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -16719,7 +16919,7 @@ public class Hbase {
                   struct.success = new ArrayList<TCell>(_list106.size);
                   for (int _i107 = 0; _i107 < _list106.size; ++_i107)
                   {
-                    TCell _elem108; // optional
+                    TCell _elem108; // required
                     _elem108 = new TCell();
                     _elem108.read(iprot);
                     struct.success.add(_elem108);
@@ -16821,7 +17021,7 @@ public class Hbase {
             struct.success = new ArrayList<TCell>(_list111.size);
             for (int _i112 = 0; _i112 < _list111.size; ++_i112)
             {
-              TCell _elem113; // optional
+              TCell _elem113; // required
               _elem113 = new TCell();
               _elem113.read(iprot);
               struct.success.add(_elem113);
@@ -17323,6 +17523,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -17383,7 +17584,7 @@ public class Hbase {
                   for (int _i115 = 0; _i115 < _map114.size; ++_i115)
                   {
                     ByteBuffer _key116; // required
-                    ByteBuffer _val117; // optional
+                    ByteBuffer _val117; // required
                     _key116 = iprot.readBinary();
                     _val117 = iprot.readBinary();
                     struct.attributes.put(_key116, _val117);
@@ -17498,7 +17699,7 @@ public class Hbase {
             for (int _i121 = 0; _i121 < _map120.size; ++_i121)
             {
               ByteBuffer _key122; // required
-              ByteBuffer _val123; // optional
+              ByteBuffer _val123; // required
               _key122 = iprot.readBinary();
               _val123 = iprot.readBinary();
               struct.attributes.put(_key122, _val123);
@@ -17857,6 +18058,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -17900,7 +18102,7 @@ public class Hbase {
                   struct.success = new ArrayList<TRowResult>(_list124.size);
                   for (int _i125 = 0; _i125 < _list124.size; ++_i125)
                   {
-                    TRowResult _elem126; // optional
+                    TRowResult _elem126; // required
                     _elem126 = new TRowResult();
                     _elem126.read(iprot);
                     struct.success.add(_elem126);
@@ -18002,7 +18204,7 @@ public class Hbase {
             struct.success = new ArrayList<TRowResult>(_list129.size);
             for (int _i130 = 0; _i130 < _list129.size; ++_i130)
             {
-              TRowResult _elem131; // optional
+              TRowResult _elem131; // required
               _elem131 = new TRowResult();
               _elem131.read(iprot);
               struct.success.add(_elem131);
@@ -18613,6 +18815,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -18672,7 +18875,7 @@ public class Hbase {
                   struct.columns = new ArrayList<ByteBuffer>(_list132.size);
                   for (int _i133 = 0; _i133 < _list132.size; ++_i133)
                   {
-                    ByteBuffer _elem134; // optional
+                    ByteBuffer _elem134; // required
                     _elem134 = iprot.readBinary();
                     struct.columns.add(_elem134);
                   }
@@ -18691,7 +18894,7 @@ public class Hbase {
                   for (int _i136 = 0; _i136 < _map135.size; ++_i136)
                   {
                     ByteBuffer _key137; // required
-                    ByteBuffer _val138; // optional
+                    ByteBuffer _val138; // required
                     _key137 = iprot.readBinary();
                     _val138 = iprot.readBinary();
                     struct.attributes.put(_key137, _val138);
@@ -18829,7 +19032,7 @@ public class Hbase {
             struct.columns = new ArrayList<ByteBuffer>(_list143.size);
             for (int _i144 = 0; _i144 < _list143.size; ++_i144)
             {
-              ByteBuffer _elem145; // optional
+              ByteBuffer _elem145; // required
               _elem145 = iprot.readBinary();
               struct.columns.add(_elem145);
             }
@@ -18843,7 +19046,7 @@ public class Hbase {
             for (int _i147 = 0; _i147 < _map146.size; ++_i147)
             {
               ByteBuffer _key148; // required
-              ByteBuffer _val149; // optional
+              ByteBuffer _val149; // required
               _key148 = iprot.readBinary();
               _val149 = iprot.readBinary();
               struct.attributes.put(_key148, _val149);
@@ -19202,6 +19405,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -19245,7 +19449,7 @@ public class Hbase {
                   struct.success = new ArrayList<TRowResult>(_list150.size);
                   for (int _i151 = 0; _i151 < _list150.size; ++_i151)
                   {
-                    TRowResult _elem152; // optional
+                    TRowResult _elem152; // required
                     _elem152 = new TRowResult();
                     _elem152.read(iprot);
                     struct.success.add(_elem152);
@@ -19347,7 +19551,7 @@ public class Hbase {
             struct.success = new ArrayList<TRowResult>(_list155.size);
             for (int _i156 = 0; _i156 < _list155.size; ++_i156)
             {
-              TRowResult _elem157; // optional
+              TRowResult _elem157; // required
               _elem157 = new TRowResult();
               _elem157.read(iprot);
               struct.success.add(_elem157);
@@ -19477,7 +19681,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __TIMESTAMP_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -19516,8 +19720,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public getRowTs_args(getRowTs_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -19652,16 +19855,16 @@ public class Hbase {
     }
 
     public void unsetTimestamp() {
-      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
     public boolean isSetTimestamp() {
-      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     public void setTimestampIsSet(boolean value) {
-      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
     }
 
     public int getAttributesSize() {
@@ -19937,6 +20140,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -19950,7 +20154,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -20007,7 +20211,7 @@ public class Hbase {
                   for (int _i159 = 0; _i159 < _map158.size; ++_i159)
                   {
                     ByteBuffer _key160; // required
-                    ByteBuffer _val161; // optional
+                    ByteBuffer _val161; // required
                     _key160 = iprot.readBinary();
                     _val161 = iprot.readBinary();
                     struct.attributes.put(_key160, _val161);
@@ -20135,7 +20339,7 @@ public class Hbase {
             for (int _i165 = 0; _i165 < _map164.size; ++_i165)
             {
               ByteBuffer _key166; // required
-              ByteBuffer _val167; // optional
+              ByteBuffer _val167; // required
               _key166 = iprot.readBinary();
               _val167 = iprot.readBinary();
               struct.attributes.put(_key166, _val167);
@@ -20494,6 +20698,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -20537,7 +20742,7 @@ public class Hbase {
                   struct.success = new ArrayList<TRowResult>(_list168.size);
                   for (int _i169 = 0; _i169 < _list168.size; ++_i169)
                   {
-                    TRowResult _elem170; // optional
+                    TRowResult _elem170; // required
                     _elem170 = new TRowResult();
                     _elem170.read(iprot);
                     struct.success.add(_elem170);
@@ -20639,7 +20844,7 @@ public class Hbase {
             struct.success = new ArrayList<TRowResult>(_list173.size);
             for (int _i174 = 0; _i174 < _list173.size; ++_i174)
             {
-              TRowResult _elem175; // optional
+              TRowResult _elem175; // required
               _elem175 = new TRowResult();
               _elem175.read(iprot);
               struct.success.add(_elem175);
@@ -20774,7 +20979,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __TIMESTAMP_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -20818,8 +21023,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public getRowWithColumnsTs_args(getRowWithColumnsTs_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -21001,16 +21205,16 @@ public class Hbase {
     }
 
     public void unsetTimestamp() {
-      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
     public boolean isSetTimestamp() {
-      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     public void setTimestampIsSet(boolean value) {
-      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
     }
 
     public int getAttributesSize() {
@@ -21326,6 +21530,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -21339,7 +21544,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -21387,7 +21592,7 @@ public class Hbase {
                   struct.columns = new ArrayList<ByteBuffer>(_list176.size);
                   for (int _i177 = 0; _i177 < _list176.size; ++_i177)
                   {
-                    ByteBuffer _elem178; // optional
+                    ByteBuffer _elem178; // required
                     _elem178 = iprot.readBinary();
                     struct.columns.add(_elem178);
                   }
@@ -21414,7 +21619,7 @@ public class Hbase {
                   for (int _i180 = 0; _i180 < _map179.size; ++_i180)
                   {
                     ByteBuffer _key181; // required
-                    ByteBuffer _val182; // optional
+                    ByteBuffer _val182; // required
                     _key181 = iprot.readBinary();
                     _val182 = iprot.readBinary();
                     struct.attributes.put(_key181, _val182);
@@ -21561,7 +21766,7 @@ public class Hbase {
             struct.columns = new ArrayList<ByteBuffer>(_list187.size);
             for (int _i188 = 0; _i188 < _list187.size; ++_i188)
             {
-              ByteBuffer _elem189; // optional
+              ByteBuffer _elem189; // required
               _elem189 = iprot.readBinary();
               struct.columns.add(_elem189);
             }
@@ -21579,7 +21784,7 @@ public class Hbase {
             for (int _i191 = 0; _i191 < _map190.size; ++_i191)
             {
               ByteBuffer _key192; // required
-              ByteBuffer _val193; // optional
+              ByteBuffer _val193; // required
               _key192 = iprot.readBinary();
               _val193 = iprot.readBinary();
               struct.attributes.put(_key192, _val193);
@@ -21938,6 +22143,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -21981,7 +22187,7 @@ public class Hbase {
                   struct.success = new ArrayList<TRowResult>(_list194.size);
                   for (int _i195 = 0; _i195 < _list194.size; ++_i195)
                   {
-                    TRowResult _elem196; // optional
+                    TRowResult _elem196; // required
                     _elem196 = new TRowResult();
                     _elem196.read(iprot);
                     struct.success.add(_elem196);
@@ -22083,7 +22289,7 @@ public class Hbase {
             struct.success = new ArrayList<TRowResult>(_list199.size);
             for (int _i200 = 0; _i200 < _list199.size; ++_i200)
             {
-              TRowResult _elem201; // optional
+              TRowResult _elem201; // required
               _elem201 = new TRowResult();
               _elem201.read(iprot);
               struct.success.add(_elem201);
@@ -22595,6 +22801,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -22646,7 +22853,7 @@ public class Hbase {
                   struct.rows = new ArrayList<ByteBuffer>(_list202.size);
                   for (int _i203 = 0; _i203 < _list202.size; ++_i203)
                   {
-                    ByteBuffer _elem204; // optional
+                    ByteBuffer _elem204; // required
                     _elem204 = iprot.readBinary();
                     struct.rows.add(_elem204);
                   }
@@ -22665,7 +22872,7 @@ public class Hbase {
                   for (int _i206 = 0; _i206 < _map205.size; ++_i206)
                   {
                     ByteBuffer _key207; // required
-                    ByteBuffer _val208; // optional
+                    ByteBuffer _val208; // required
                     _key207 = iprot.readBinary();
                     _val208 = iprot.readBinary();
                     struct.attributes.put(_key207, _val208);
@@ -22788,7 +22995,7 @@ public class Hbase {
             struct.rows = new ArrayList<ByteBuffer>(_list213.size);
             for (int _i214 = 0; _i214 < _list213.size; ++_i214)
             {
-              ByteBuffer _elem215; // optional
+              ByteBuffer _elem215; // required
               _elem215 = iprot.readBinary();
               struct.rows.add(_elem215);
             }
@@ -22802,7 +23009,7 @@ public class Hbase {
             for (int _i217 = 0; _i217 < _map216.size; ++_i217)
             {
               ByteBuffer _key218; // required
-              ByteBuffer _val219; // optional
+              ByteBuffer _val219; // required
               _key218 = iprot.readBinary();
               _val219 = iprot.readBinary();
               struct.attributes.put(_key218, _val219);
@@ -23161,6 +23368,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -23204,7 +23412,7 @@ public class Hbase {
                   struct.success = new ArrayList<TRowResult>(_list220.size);
                   for (int _i221 = 0; _i221 < _list220.size; ++_i221)
                   {
-                    TRowResult _elem222; // optional
+                    TRowResult _elem222; // required
                     _elem222 = new TRowResult();
                     _elem222.read(iprot);
                     struct.success.add(_elem222);
@@ -23306,7 +23514,7 @@ public class Hbase {
             struct.success = new ArrayList<TRowResult>(_list225.size);
             for (int _i226 = 0; _i226 < _list225.size; ++_i226)
             {
-              TRowResult _elem227; // optional
+              TRowResult _elem227; // required
               _elem227 = new TRowResult();
               _elem227.read(iprot);
               struct.success.add(_elem227);
@@ -23927,6 +24135,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -23978,7 +24187,7 @@ public class Hbase {
                   struct.rows = new ArrayList<ByteBuffer>(_list228.size);
                   for (int _i229 = 0; _i229 < _list228.size; ++_i229)
                   {
-                    ByteBuffer _elem230; // optional
+                    ByteBuffer _elem230; // required
                     _elem230 = iprot.readBinary();
                     struct.rows.add(_elem230);
                   }
@@ -23996,7 +24205,7 @@ public class Hbase {
                   struct.columns = new ArrayList<ByteBuffer>(_list231.size);
                   for (int _i232 = 0; _i232 < _list231.size; ++_i232)
                   {
-                    ByteBuffer _elem233; // optional
+                    ByteBuffer _elem233; // required
                     _elem233 = iprot.readBinary();
                     struct.columns.add(_elem233);
                   }
@@ -24015,7 +24224,7 @@ public class Hbase {
                   for (int _i235 = 0; _i235 < _map234.size; ++_i235)
                   {
                     ByteBuffer _key236; // required
-                    ByteBuffer _val237; // optional
+                    ByteBuffer _val237; // required
                     _key236 = iprot.readBinary();
                     _val237 = iprot.readBinary();
                     struct.attributes.put(_key236, _val237);
@@ -24162,7 +24371,7 @@ public class Hbase {
             struct.rows = new ArrayList<ByteBuffer>(_list244.size);
             for (int _i245 = 0; _i245 < _list244.size; ++_i245)
             {
-              ByteBuffer _elem246; // optional
+              ByteBuffer _elem246; // required
               _elem246 = iprot.readBinary();
               struct.rows.add(_elem246);
             }
@@ -24175,7 +24384,7 @@ public class Hbase {
             struct.columns = new ArrayList<ByteBuffer>(_list247.size);
             for (int _i248 = 0; _i248 < _list247.size; ++_i248)
             {
-              ByteBuffer _elem249; // optional
+              ByteBuffer _elem249; // required
               _elem249 = iprot.readBinary();
               struct.columns.add(_elem249);
             }
@@ -24189,7 +24398,7 @@ public class Hbase {
             for (int _i251 = 0; _i251 < _map250.size; ++_i251)
             {
               ByteBuffer _key252; // required
-              ByteBuffer _val253; // optional
+              ByteBuffer _val253; // required
               _key252 = iprot.readBinary();
               _val253 = iprot.readBinary();
               struct.attributes.put(_key252, _val253);
@@ -24548,6 +24757,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -24591,7 +24801,7 @@ public class Hbase {
                   struct.success = new ArrayList<TRowResult>(_list254.size);
                   for (int _i255 = 0; _i255 < _list254.size; ++_i255)
                   {
-                    TRowResult _elem256; // optional
+                    TRowResult _elem256; // required
                     _elem256 = new TRowResult();
                     _elem256.read(iprot);
                     struct.success.add(_elem256);
@@ -24693,7 +24903,7 @@ public class Hbase {
             struct.success = new ArrayList<TRowResult>(_list259.size);
             for (int _i260 = 0; _i260 < _list259.size; ++_i260)
             {
-              TRowResult _elem261; // optional
+              TRowResult _elem261; // required
               _elem261 = new TRowResult();
               _elem261.read(iprot);
               struct.success.add(_elem261);
@@ -24823,7 +25033,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __TIMESTAMP_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -24863,8 +25073,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public getRowsTs_args(getRowsTs_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -25008,16 +25217,16 @@ public class Hbase {
     }
 
     public void unsetTimestamp() {
-      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
     public boolean isSetTimestamp() {
-      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     public void setTimestampIsSet(boolean value) {
-      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
     }
 
     public int getAttributesSize() {
@@ -25293,6 +25502,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -25306,7 +25516,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -25346,7 +25556,7 @@ public class Hbase {
                   struct.rows = new ArrayList<ByteBuffer>(_list262.size);
                   for (int _i263 = 0; _i263 < _list262.size; ++_i263)
                   {
-                    ByteBuffer _elem264; // optional
+                    ByteBuffer _elem264; // required
                     _elem264 = iprot.readBinary();
                     struct.rows.add(_elem264);
                   }
@@ -25373,7 +25583,7 @@ public class Hbase {
                   for (int _i266 = 0; _i266 < _map265.size; ++_i266)
                   {
                     ByteBuffer _key267; // required
-                    ByteBuffer _val268; // optional
+                    ByteBuffer _val268; // required
                     _key267 = iprot.readBinary();
                     _val268 = iprot.readBinary();
                     struct.attributes.put(_key267, _val268);
@@ -25505,7 +25715,7 @@ public class Hbase {
             struct.rows = new ArrayList<ByteBuffer>(_list273.size);
             for (int _i274 = 0; _i274 < _list273.size; ++_i274)
             {
-              ByteBuffer _elem275; // optional
+              ByteBuffer _elem275; // required
               _elem275 = iprot.readBinary();
               struct.rows.add(_elem275);
             }
@@ -25523,7 +25733,7 @@ public class Hbase {
             for (int _i277 = 0; _i277 < _map276.size; ++_i277)
             {
               ByteBuffer _key278; // required
-              ByteBuffer _val279; // optional
+              ByteBuffer _val279; // required
               _key278 = iprot.readBinary();
               _val279 = iprot.readBinary();
               struct.attributes.put(_key278, _val279);
@@ -25882,6 +26092,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -25925,7 +26136,7 @@ public class Hbase {
                   struct.success = new ArrayList<TRowResult>(_list280.size);
                   for (int _i281 = 0; _i281 < _list280.size; ++_i281)
                   {
-                    TRowResult _elem282; // optional
+                    TRowResult _elem282; // required
                     _elem282 = new TRowResult();
                     _elem282.read(iprot);
                     struct.success.add(_elem282);
@@ -26027,7 +26238,7 @@ public class Hbase {
             struct.success = new ArrayList<TRowResult>(_list285.size);
             for (int _i286 = 0; _i286 < _list285.size; ++_i286)
             {
-              TRowResult _elem287; // optional
+              TRowResult _elem287; // required
               _elem287 = new TRowResult();
               _elem287.read(iprot);
               struct.success.add(_elem287);
@@ -26162,7 +26373,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __TIMESTAMP_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -26207,8 +26418,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public getRowsWithColumnsTs_args(getRowsWithColumnsTs_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -26399,16 +26609,16 @@ public class Hbase {
     }
 
     public void unsetTimestamp() {
-      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
     public boolean isSetTimestamp() {
-      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     public void setTimestampIsSet(boolean value) {
-      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
     }
 
     public int getAttributesSize() {
@@ -26724,6 +26934,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -26737,7 +26948,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -26777,7 +26988,7 @@ public class Hbase {
                   struct.rows = new ArrayList<ByteBuffer>(_list288.size);
                   for (int _i289 = 0; _i289 < _list288.size; ++_i289)
                   {
-                    ByteBuffer _elem290; // optional
+                    ByteBuffer _elem290; // required
                     _elem290 = iprot.readBinary();
                     struct.rows.add(_elem290);
                   }
@@ -26795,7 +27006,7 @@ public class Hbase {
                   struct.columns = new ArrayList<ByteBuffer>(_list291.size);
                   for (int _i292 = 0; _i292 < _list291.size; ++_i292)
                   {
-                    ByteBuffer _elem293; // optional
+                    ByteBuffer _elem293; // required
                     _elem293 = iprot.readBinary();
                     struct.columns.add(_elem293);
                   }
@@ -26822,7 +27033,7 @@ public class Hbase {
                   for (int _i295 = 0; _i295 < _map294.size; ++_i295)
                   {
                     ByteBuffer _key296; // required
-                    ByteBuffer _val297; // optional
+                    ByteBuffer _val297; // required
                     _key296 = iprot.readBinary();
                     _val297 = iprot.readBinary();
                     struct.attributes.put(_key296, _val297);
@@ -26978,7 +27189,7 @@ public class Hbase {
             struct.rows = new ArrayList<ByteBuffer>(_list304.size);
             for (int _i305 = 0; _i305 < _list304.size; ++_i305)
             {
-              ByteBuffer _elem306; // optional
+              ByteBuffer _elem306; // required
               _elem306 = iprot.readBinary();
               struct.rows.add(_elem306);
             }
@@ -26991,7 +27202,7 @@ public class Hbase {
             struct.columns = new ArrayList<ByteBuffer>(_list307.size);
             for (int _i308 = 0; _i308 < _list307.size; ++_i308)
             {
-              ByteBuffer _elem309; // optional
+              ByteBuffer _elem309; // required
               _elem309 = iprot.readBinary();
               struct.columns.add(_elem309);
             }
@@ -27009,7 +27220,7 @@ public class Hbase {
             for (int _i311 = 0; _i311 < _map310.size; ++_i311)
             {
               ByteBuffer _key312; // required
-              ByteBuffer _val313; // optional
+              ByteBuffer _val313; // required
               _key312 = iprot.readBinary();
               _val313 = iprot.readBinary();
               struct.attributes.put(_key312, _val313);
@@ -27368,6 +27579,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -27411,7 +27623,7 @@ public class Hbase {
                   struct.success = new ArrayList<TRowResult>(_list314.size);
                   for (int _i315 = 0; _i315 < _list314.size; ++_i315)
                   {
-                    TRowResult _elem316; // optional
+                    TRowResult _elem316; // required
                     _elem316 = new TRowResult();
                     _elem316.read(iprot);
                     struct.success.add(_elem316);
@@ -27513,7 +27725,7 @@ public class Hbase {
             struct.success = new ArrayList<TRowResult>(_list319.size);
             for (int _i320 = 0; _i320 < _list319.size; ++_i320)
             {
-              TRowResult _elem321; // optional
+              TRowResult _elem321; // required
               _elem321 = new TRowResult();
               _elem321.read(iprot);
               struct.success.add(_elem321);
@@ -28124,6 +28336,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -28183,7 +28396,7 @@ public class Hbase {
                   struct.mutations = new ArrayList<Mutation>(_list322.size);
                   for (int _i323 = 0; _i323 < _list322.size; ++_i323)
                   {
-                    Mutation _elem324; // optional
+                    Mutation _elem324; // required
                     _elem324 = new Mutation();
                     _elem324.read(iprot);
                     struct.mutations.add(_elem324);
@@ -28203,7 +28416,7 @@ public class Hbase {
                   for (int _i326 = 0; _i326 < _map325.size; ++_i326)
                   {
                     ByteBuffer _key327; // required
-                    ByteBuffer _val328; // optional
+                    ByteBuffer _val328; // required
                     _key327 = iprot.readBinary();
                     _val328 = iprot.readBinary();
                     struct.attributes.put(_key327, _val328);
@@ -28341,7 +28554,7 @@ public class Hbase {
             struct.mutations = new ArrayList<Mutation>(_list333.size);
             for (int _i334 = 0; _i334 < _list333.size; ++_i334)
             {
-              Mutation _elem335; // optional
+              Mutation _elem335; // required
               _elem335 = new Mutation();
               _elem335.read(iprot);
               struct.mutations.add(_elem335);
@@ -28356,7 +28569,7 @@ public class Hbase {
             for (int _i337 = 0; _i337 < _map336.size; ++_i337)
             {
               ByteBuffer _key338; // required
-              ByteBuffer _val339; // optional
+              ByteBuffer _val339; // required
               _key338 = iprot.readBinary();
               _val339 = iprot.readBinary();
               struct.attributes.put(_key338, _val339);
@@ -28695,6 +28908,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -28949,7 +29163,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __TIMESTAMP_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -28993,8 +29207,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public mutateRowTs_args(mutateRowTs_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -29182,16 +29395,16 @@ public class Hbase {
     }
 
     public void unsetTimestamp() {
-      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
     public boolean isSetTimestamp() {
-      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     public void setTimestampIsSet(boolean value) {
-      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
     }
 
     public int getAttributesSize() {
@@ -29507,6 +29720,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -29520,7 +29734,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -29568,7 +29782,7 @@ public class Hbase {
                   struct.mutations = new ArrayList<Mutation>(_list340.size);
                   for (int _i341 = 0; _i341 < _list340.size; ++_i341)
                   {
-                    Mutation _elem342; // optional
+                    Mutation _elem342; // required
                     _elem342 = new Mutation();
                     _elem342.read(iprot);
                     struct.mutations.add(_elem342);
@@ -29596,7 +29810,7 @@ public class Hbase {
                   for (int _i344 = 0; _i344 < _map343.size; ++_i344)
                   {
                     ByteBuffer _key345; // required
-                    ByteBuffer _val346; // optional
+                    ByteBuffer _val346; // required
                     _key345 = iprot.readBinary();
                     _val346 = iprot.readBinary();
                     struct.attributes.put(_key345, _val346);
@@ -29743,7 +29957,7 @@ public class Hbase {
             struct.mutations = new ArrayList<Mutation>(_list351.size);
             for (int _i352 = 0; _i352 < _list351.size; ++_i352)
             {
-              Mutation _elem353; // optional
+              Mutation _elem353; // required
               _elem353 = new Mutation();
               _elem353.read(iprot);
               struct.mutations.add(_elem353);
@@ -29762,7 +29976,7 @@ public class Hbase {
             for (int _i355 = 0; _i355 < _map354.size; ++_i355)
             {
               ByteBuffer _key356; // required
-              ByteBuffer _val357; // optional
+              ByteBuffer _val357; // required
               _key356 = iprot.readBinary();
               _val357 = iprot.readBinary();
               struct.attributes.put(_key356, _val357);
@@ -30101,6 +30315,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -30726,6 +30941,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -30777,7 +30993,7 @@ public class Hbase {
                   struct.rowBatches = new ArrayList<BatchMutation>(_list358.size);
                   for (int _i359 = 0; _i359 < _list358.size; ++_i359)
                   {
-                    BatchMutation _elem360; // optional
+                    BatchMutation _elem360; // required
                     _elem360 = new BatchMutation();
                     _elem360.read(iprot);
                     struct.rowBatches.add(_elem360);
@@ -30797,7 +31013,7 @@ public class Hbase {
                   for (int _i362 = 0; _i362 < _map361.size; ++_i362)
                   {
                     ByteBuffer _key363; // required
-                    ByteBuffer _val364; // optional
+                    ByteBuffer _val364; // required
                     _key363 = iprot.readBinary();
                     _val364 = iprot.readBinary();
                     struct.attributes.put(_key363, _val364);
@@ -30920,7 +31136,7 @@ public class Hbase {
             struct.rowBatches = new ArrayList<BatchMutation>(_list369.size);
             for (int _i370 = 0; _i370 < _list369.size; ++_i370)
             {
-              BatchMutation _elem371; // optional
+              BatchMutation _elem371; // required
               _elem371 = new BatchMutation();
               _elem371.read(iprot);
               struct.rowBatches.add(_elem371);
@@ -30935,7 +31151,7 @@ public class Hbase {
             for (int _i373 = 0; _i373 < _map372.size; ++_i373)
             {
               ByteBuffer _key374; // required
-              ByteBuffer _val375; // optional
+              ByteBuffer _val375; // required
               _key374 = iprot.readBinary();
               _val375 = iprot.readBinary();
               struct.attributes.put(_key374, _val375);
@@ -31274,6 +31490,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -31517,7 +31734,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __TIMESTAMP_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -31557,8 +31774,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public mutateRowsTs_args(mutateRowsTs_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -31702,16 +31918,16 @@ public class Hbase {
     }
 
     public void unsetTimestamp() {
-      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
     public boolean isSetTimestamp() {
-      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     public void setTimestampIsSet(boolean value) {
-      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
     }
 
     public int getAttributesSize() {
@@ -31987,6 +32203,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -31999,6 +32216,8 @@ public class Hbase {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -32038,7 +32257,7 @@ public class Hbase {
                   struct.rowBatches = new ArrayList<BatchMutation>(_list376.size);
                   for (int _i377 = 0; _i377 < _list376.size; ++_i377)
                   {
-                    BatchMutation _elem378; // optional
+                    BatchMutation _elem378; // required
                     _elem378 = new BatchMutation();
                     _elem378.read(iprot);
                     struct.rowBatches.add(_elem378);
@@ -32066,7 +32285,7 @@ public class Hbase {
                   for (int _i380 = 0; _i380 < _map379.size; ++_i380)
                   {
                     ByteBuffer _key381; // required
-                    ByteBuffer _val382; // optional
+                    ByteBuffer _val382; // required
                     _key381 = iprot.readBinary();
                     _val382 = iprot.readBinary();
                     struct.attributes.put(_key381, _val382);
@@ -32198,7 +32417,7 @@ public class Hbase {
             struct.rowBatches = new ArrayList<BatchMutation>(_list387.size);
             for (int _i388 = 0; _i388 < _list387.size; ++_i388)
             {
-              BatchMutation _elem389; // optional
+              BatchMutation _elem389; // required
               _elem389 = new BatchMutation();
               _elem389.read(iprot);
               struct.rowBatches.add(_elem389);
@@ -32217,7 +32436,7 @@ public class Hbase {
             for (int _i391 = 0; _i391 < _map390.size; ++_i391)
             {
               ByteBuffer _key392; // required
-              ByteBuffer _val393; // optional
+              ByteBuffer _val393; // required
               _key392 = iprot.readBinary();
               _val393 = iprot.readBinary();
               struct.attributes.put(_key392, _val393);
@@ -32556,6 +32775,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -32799,7 +33019,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __VALUE_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -32836,8 +33056,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public atomicIncrement_args(atomicIncrement_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -33000,16 +33219,16 @@ public class Hbase {
     }
 
     public void unsetValue() {
-      __isset_bit_vector.clear(__VALUE_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
     }
 
     /** Returns true if field value is set (has been assigned a value) and false otherwise */
     public boolean isSetValue() {
-      return __isset_bit_vector.get(__VALUE_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
     }
 
     public void setValueIsSet(boolean value) {
-      __isset_bit_vector.set(__VALUE_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
     }
 
     public void setFieldValue(_Fields field, Object value) {
@@ -33244,6 +33463,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -33257,7 +33477,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -33500,7 +33720,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -33533,8 +33753,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public atomicIncrement_result(atomicIncrement_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
       if (other.isSetIo()) {
         this.io = new IOError(other.io);
@@ -33567,16 +33786,16 @@ public class Hbase {
     }
 
     public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been assigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
     public IOError getIo() {
@@ -33819,6 +34038,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -33832,7 +34052,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -33898,9 +34118,11 @@ public class Hbase {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI64(struct.success);
-        oprot.writeFieldEnd();
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeI64(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.io != null) {
           oprot.writeFieldBegin(IO_FIELD_DESC);
           struct.io.write(oprot);
@@ -34556,6 +34778,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -34624,7 +34847,7 @@ public class Hbase {
                   for (int _i395 = 0; _i395 < _map394.size; ++_i395)
                   {
                     ByteBuffer _key396; // required
-                    ByteBuffer _val397; // optional
+                    ByteBuffer _val397; // required
                     _key396 = iprot.readBinary();
                     _val397 = iprot.readBinary();
                     struct.attributes.put(_key396, _val397);
@@ -34754,7 +34977,7 @@ public class Hbase {
             for (int _i401 = 0; _i401 < _map400.size; ++_i401)
             {
               ByteBuffer _key402; // required
-              ByteBuffer _val403; // optional
+              ByteBuffer _val403; // required
               _key402 = iprot.readBinary();
               _val403 = iprot.readBinary();
               struct.attributes.put(_key402, _val403);
@@ -35016,6 +35239,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -35245,7 +35469,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __TIMESTAMP_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -35288,8 +35512,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public deleteAllTs_args(deleteAllTs_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -35468,16 +35691,16 @@ public class Hbase {
     }
 
     public void unsetTimestamp() {
-      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
     public boolean isSetTimestamp() {
-      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     public void setTimestampIsSet(boolean value) {
-      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
     }
 
     public int getAttributesSize() {
@@ -35793,6 +36016,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -35806,7 +36030,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -35871,7 +36095,7 @@ public class Hbase {
                   for (int _i405 = 0; _i405 < _map404.size; ++_i405)
                   {
                     ByteBuffer _key406; // required
-                    ByteBuffer _val407; // optional
+                    ByteBuffer _val407; // required
                     _key406 = iprot.readBinary();
                     _val407 = iprot.readBinary();
                     struct.attributes.put(_key406, _val407);
@@ -36014,7 +36238,7 @@ public class Hbase {
             for (int _i411 = 0; _i411 < _map410.size; ++_i411)
             {
               ByteBuffer _key412; // required
-              ByteBuffer _val413; // optional
+              ByteBuffer _val413; // required
               _key412 = iprot.readBinary();
               _val413 = iprot.readBinary();
               struct.attributes.put(_key412, _val413);
@@ -36276,6 +36500,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -36866,6 +37091,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -36926,7 +37152,7 @@ public class Hbase {
                   for (int _i415 = 0; _i415 < _map414.size; ++_i415)
                   {
                     ByteBuffer _key416; // required
-                    ByteBuffer _val417; // optional
+                    ByteBuffer _val417; // required
                     _key416 = iprot.readBinary();
                     _val417 = iprot.readBinary();
                     struct.attributes.put(_key416, _val417);
@@ -37041,7 +37267,7 @@ public class Hbase {
             for (int _i421 = 0; _i421 < _map420.size; ++_i421)
             {
               ByteBuffer _key422; // required
-              ByteBuffer _val423; // optional
+              ByteBuffer _val423; // required
               _key422 = iprot.readBinary();
               _val423 = iprot.readBinary();
               struct.attributes.put(_key422, _val423);
@@ -37303,6 +37529,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -37670,6 +37897,10 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
+      if (increment != null) {
+        increment.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -38025,6 +38256,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -38412,6 +38644,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -38455,7 +38688,7 @@ public class Hbase {
                   struct.increments = new ArrayList<TIncrement>(_list424.size);
                   for (int _i425 = 0; _i425 < _list424.size; ++_i425)
                   {
-                    TIncrement _elem426; // optional
+                    TIncrement _elem426; // required
                     _elem426 = new TIncrement();
                     _elem426.read(iprot);
                     struct.increments.add(_elem426);
@@ -38537,7 +38770,7 @@ public class Hbase {
             struct.increments = new ArrayList<TIncrement>(_list429.size);
             for (int _i430 = 0; _i430 < _list429.size; ++_i430)
             {
-              TIncrement _elem431; // optional
+              TIncrement _elem431; // required
               _elem431 = new TIncrement();
               _elem431.read(iprot);
               struct.increments.add(_elem431);
@@ -38799,6 +39032,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -39017,7 +39251,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __TIMESTAMP_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -39056,8 +39290,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public deleteAllRowTs_args(deleteAllRowTs_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -39192,16 +39425,16 @@ public class Hbase {
     }
 
     public void unsetTimestamp() {
-      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
     public boolean isSetTimestamp() {
-      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     public void setTimestampIsSet(boolean value) {
-      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
     }
 
     public int getAttributesSize() {
@@ -39477,6 +39710,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -39490,7 +39724,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -39547,7 +39781,7 @@ public class Hbase {
                   for (int _i433 = 0; _i433 < _map432.size; ++_i433)
                   {
                     ByteBuffer _key434; // required
-                    ByteBuffer _val435; // optional
+                    ByteBuffer _val435; // required
                     _key434 = iprot.readBinary();
                     _val435 = iprot.readBinary();
                     struct.attributes.put(_key434, _val435);
@@ -39675,7 +39909,7 @@ public class Hbase {
             for (int _i439 = 0; _i439 < _map438.size; ++_i439)
             {
               ByteBuffer _key440; // required
-              ByteBuffer _val441; // optional
+              ByteBuffer _val441; // required
               _key440 = iprot.readBinary();
               _val441 = iprot.readBinary();
               struct.attributes.put(_key440, _val441);
@@ -39937,6 +40171,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -40517,6 +40752,10 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
+      if (scan != null) {
+        scan.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -40578,7 +40817,7 @@ public class Hbase {
                   for (int _i443 = 0; _i443 < _map442.size; ++_i443)
                   {
                     ByteBuffer _key444; // required
-                    ByteBuffer _val445; // optional
+                    ByteBuffer _val445; // required
                     _key444 = iprot.readBinary();
                     _val445 = iprot.readBinary();
                     struct.attributes.put(_key444, _val445);
@@ -40694,7 +40933,7 @@ public class Hbase {
             for (int _i449 = 0; _i449 < _map448.size; ++_i449)
             {
               ByteBuffer _key450; // required
-              ByteBuffer _val451; // optional
+              ByteBuffer _val451; // required
               _key450 = iprot.readBinary();
               _val451 = iprot.readBinary();
               struct.attributes.put(_key450, _val451);
@@ -40785,7 +41024,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -40814,8 +41053,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public scannerOpenWithScan_result(scannerOpenWithScan_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
       if (other.isSetIo()) {
         this.io = new IOError(other.io);
@@ -40844,16 +41082,16 @@ public class Hbase {
     }
 
     public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been assigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
     public IOError getIo() {
@@ -41032,6 +41270,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -41045,7 +41284,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -41102,9 +41341,11 @@ public class Hbase {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI32(struct.success);
-        oprot.writeFieldEnd();
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeI32(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.io != null) {
           oprot.writeFieldBegin(IO_FIELD_DESC);
           struct.io.write(oprot);
@@ -41766,6 +42007,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -41825,7 +42067,7 @@ public class Hbase {
                   struct.columns = new ArrayList<ByteBuffer>(_list452.size);
                   for (int _i453 = 0; _i453 < _list452.size; ++_i453)
                   {
-                    ByteBuffer _elem454; // optional
+                    ByteBuffer _elem454; // required
                     _elem454 = iprot.readBinary();
                     struct.columns.add(_elem454);
                   }
@@ -41844,7 +42086,7 @@ public class Hbase {
                   for (int _i456 = 0; _i456 < _map455.size; ++_i456)
                   {
                     ByteBuffer _key457; // required
-                    ByteBuffer _val458; // optional
+                    ByteBuffer _val458; // required
                     _key457 = iprot.readBinary();
                     _val458 = iprot.readBinary();
                     struct.attributes.put(_key457, _val458);
@@ -41982,7 +42224,7 @@ public class Hbase {
             struct.columns = new ArrayList<ByteBuffer>(_list463.size);
             for (int _i464 = 0; _i464 < _list463.size; ++_i464)
             {
-              ByteBuffer _elem465; // optional
+              ByteBuffer _elem465; // required
               _elem465 = iprot.readBinary();
               struct.columns.add(_elem465);
             }
@@ -41996,7 +42238,7 @@ public class Hbase {
             for (int _i467 = 0; _i467 < _map466.size; ++_i467)
             {
               ByteBuffer _key468; // required
-              ByteBuffer _val469; // optional
+              ByteBuffer _val469; // required
               _key468 = iprot.readBinary();
               _val469 = iprot.readBinary();
               struct.attributes.put(_key468, _val469);
@@ -42087,7 +42329,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -42116,8 +42358,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public scannerOpen_result(scannerOpen_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
       if (other.isSetIo()) {
         this.io = new IOError(other.io);
@@ -42146,16 +42387,16 @@ public class Hbase {
     }
 
     public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been assigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
     public IOError getIo() {
@@ -42334,6 +42575,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -42347,7 +42589,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -42404,9 +42646,11 @@ public class Hbase {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI32(struct.success);
-        oprot.writeFieldEnd();
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeI32(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.io != null) {
           oprot.writeFieldBegin(IO_FIELD_DESC);
           struct.io.write(oprot);
@@ -43171,6 +43415,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -43238,7 +43483,7 @@ public class Hbase {
                   struct.columns = new ArrayList<ByteBuffer>(_list470.size);
                   for (int _i471 = 0; _i471 < _list470.size; ++_i471)
                   {
-                    ByteBuffer _elem472; // optional
+                    ByteBuffer _elem472; // required
                     _elem472 = iprot.readBinary();
                     struct.columns.add(_elem472);
                   }
@@ -43257,7 +43502,7 @@ public class Hbase {
                   for (int _i474 = 0; _i474 < _map473.size; ++_i474)
                   {
                     ByteBuffer _key475; // required
-                    ByteBuffer _val476; // optional
+                    ByteBuffer _val476; // required
                     _key475 = iprot.readBinary();
                     _val476 = iprot.readBinary();
                     struct.attributes.put(_key475, _val476);
@@ -43410,7 +43655,7 @@ public class Hbase {
             struct.columns = new ArrayList<ByteBuffer>(_list481.size);
             for (int _i482 = 0; _i482 < _list481.size; ++_i482)
             {
-              ByteBuffer _elem483; // optional
+              ByteBuffer _elem483; // required
               _elem483 = iprot.readBinary();
               struct.columns.add(_elem483);
             }
@@ -43424,7 +43669,7 @@ public class Hbase {
             for (int _i485 = 0; _i485 < _map484.size; ++_i485)
             {
               ByteBuffer _key486; // required
-              ByteBuffer _val487; // optional
+              ByteBuffer _val487; // required
               _key486 = iprot.readBinary();
               _val487 = iprot.readBinary();
               struct.attributes.put(_key486, _val487);
@@ -43515,7 +43760,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -43544,8 +43789,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public scannerOpenWithStop_result(scannerOpenWithStop_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
       if (other.isSetIo()) {
         this.io = new IOError(other.io);
@@ -43574,16 +43818,16 @@ public class Hbase {
     }
 
     public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been assigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
     public IOError getIo() {
@@ -43762,6 +44006,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -43775,7 +44020,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -43832,9 +44077,11 @@ public class Hbase {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI32(struct.success);
-        oprot.writeFieldEnd();
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeI32(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.io != null) {
           oprot.writeFieldBegin(IO_FIELD_DESC);
           struct.io.write(oprot);
@@ -44484,6 +44731,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -44543,7 +44791,7 @@ public class Hbase {
                   struct.columns = new ArrayList<ByteBuffer>(_list488.size);
                   for (int _i489 = 0; _i489 < _list488.size; ++_i489)
                   {
-                    ByteBuffer _elem490; // optional
+                    ByteBuffer _elem490; // required
                     _elem490 = iprot.readBinary();
                     struct.columns.add(_elem490);
                   }
@@ -44562,7 +44810,7 @@ public class Hbase {
                   for (int _i492 = 0; _i492 < _map491.size; ++_i492)
                   {
                     ByteBuffer _key493; // required
-                    ByteBuffer _val494; // optional
+                    ByteBuffer _val494; // required
                     _key493 = iprot.readBinary();
                     _val494 = iprot.readBinary();
                     struct.attributes.put(_key493, _val494);
@@ -44700,7 +44948,7 @@ public class Hbase {
             struct.columns = new ArrayList<ByteBuffer>(_list499.size);
             for (int _i500 = 0; _i500 < _list499.size; ++_i500)
             {
-              ByteBuffer _elem501; // optional
+              ByteBuffer _elem501; // required
               _elem501 = iprot.readBinary();
               struct.columns.add(_elem501);
             }
@@ -44714,7 +44962,7 @@ public class Hbase {
             for (int _i503 = 0; _i503 < _map502.size; ++_i503)
             {
               ByteBuffer _key504; // required
-              ByteBuffer _val505; // optional
+              ByteBuffer _val505; // required
               _key504 = iprot.readBinary();
               _val505 = iprot.readBinary();
               struct.attributes.put(_key504, _val505);
@@ -44805,7 +45053,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -44834,8 +45082,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public scannerOpenWithPrefix_result(scannerOpenWithPrefix_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
       if (other.isSetIo()) {
         this.io = new IOError(other.io);
@@ -44864,16 +45111,16 @@ public class Hbase {
     }
 
     public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been assigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
     public IOError getIo() {
@@ -45052,6 +45299,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -45065,7 +45313,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -45122,9 +45370,11 @@ public class Hbase {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI32(struct.success);
-        oprot.writeFieldEnd();
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeI32(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.io != null) {
           oprot.writeFieldBegin(IO_FIELD_DESC);
           struct.io.write(oprot);
@@ -45310,7 +45560,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __TIMESTAMP_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -45354,8 +45604,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public scannerOpenTs_args(scannerOpenTs_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -45549,16 +45798,16 @@ public class Hbase {
     }
 
     public void unsetTimestamp() {
-      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
     public boolean isSetTimestamp() {
-      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     public void setTimestampIsSet(boolean value) {
-      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
     }
 
     public int getAttributesSize() {
@@ -45874,6 +46123,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -45887,7 +46137,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -45935,7 +46185,7 @@ public class Hbase {
                   struct.columns = new ArrayList<ByteBuffer>(_list506.size);
                   for (int _i507 = 0; _i507 < _list506.size; ++_i507)
                   {
-                    ByteBuffer _elem508; // optional
+                    ByteBuffer _elem508; // required
                     _elem508 = iprot.readBinary();
                     struct.columns.add(_elem508);
                   }
@@ -45962,7 +46212,7 @@ public class Hbase {
                   for (int _i510 = 0; _i510 < _map509.size; ++_i510)
                   {
                     ByteBuffer _key511; // required
-                    ByteBuffer _val512; // optional
+                    ByteBuffer _val512; // required
                     _key511 = iprot.readBinary();
                     _val512 = iprot.readBinary();
                     struct.attributes.put(_key511, _val512);
@@ -46109,7 +46359,7 @@ public class Hbase {
             struct.columns = new ArrayList<ByteBuffer>(_list517.size);
             for (int _i518 = 0; _i518 < _list517.size; ++_i518)
             {
-              ByteBuffer _elem519; // optional
+              ByteBuffer _elem519; // required
               _elem519 = iprot.readBinary();
               struct.columns.add(_elem519);
             }
@@ -46127,7 +46377,7 @@ public class Hbase {
             for (int _i521 = 0; _i521 < _map520.size; ++_i521)
             {
               ByteBuffer _key522; // required
-              ByteBuffer _val523; // optional
+              ByteBuffer _val523; // required
               _key522 = iprot.readBinary();
               _val523 = iprot.readBinary();
               struct.attributes.put(_key522, _val523);
@@ -46218,7 +46468,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -46247,8 +46497,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public scannerOpenTs_result(scannerOpenTs_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
       if (other.isSetIo()) {
         this.io = new IOError(other.io);
@@ -46277,16 +46526,16 @@ public class Hbase {
     }
 
     public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been assigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
     public IOError getIo() {
@@ -46465,6 +46714,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -46478,7 +46728,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -46535,9 +46785,11 @@ public class Hbase {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI32(struct.success);
-        oprot.writeFieldEnd();
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeI32(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.io != null) {
           oprot.writeFieldBegin(IO_FIELD_DESC);
           struct.io.write(oprot);
@@ -46736,7 +46988,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __TIMESTAMP_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -46784,8 +47036,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public scannerOpenWithStopTs_args(scannerOpenWithStopTs_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       if (other.isSetTableName()) {
         this.tableName = other.tableName;
       }
@@ -47025,16 +47276,16 @@ public class Hbase {
     }
 
     public void unsetTimestamp() {
-      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
     public boolean isSetTimestamp() {
-      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
     }
 
     public void setTimestampIsSet(boolean value) {
-      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
     }
 
     public int getAttributesSize() {
@@ -47390,6 +47641,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -47402,6 +47654,8 @@ public class Hbase {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -47457,7 +47711,7 @@ public class Hbase {
                   struct.columns = new ArrayList<ByteBuffer>(_list524.size);
                   for (int _i525 = 0; _i525 < _list524.size; ++_i525)
                   {
-                    ByteBuffer _elem526; // optional
+                    ByteBuffer _elem526; // required
                     _elem526 = iprot.readBinary();
                     struct.columns.add(_elem526);
                   }
@@ -47484,7 +47738,7 @@ public class Hbase {
                   for (int _i528 = 0; _i528 < _map527.size; ++_i528)
                   {
                     ByteBuffer _key529; // required
-                    ByteBuffer _val530; // optional
+                    ByteBuffer _val530; // required
                     _key529 = iprot.readBinary();
                     _val530 = iprot.readBinary();
                     struct.attributes.put(_key529, _val530);
@@ -47646,7 +47900,7 @@ public class Hbase {
             struct.columns = new ArrayList<ByteBuffer>(_list535.size);
             for (int _i536 = 0; _i536 < _list535.size; ++_i536)
             {
-              ByteBuffer _elem537; // optional
+              ByteBuffer _elem537; // required
               _elem537 = iprot.readBinary();
               struct.columns.add(_elem537);
             }
@@ -47664,7 +47918,7 @@ public class Hbase {
             for (int _i539 = 0; _i539 < _map538.size; ++_i539)
             {
               ByteBuffer _key540; // required
-              ByteBuffer _val541; // optional
+              ByteBuffer _val541; // required
               _key540 = iprot.readBinary();
               _val541 = iprot.readBinary();
               struct.attributes.put(_key540, _val541);
@@ -47755,7 +48009,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -47784,8 +48038,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public scannerOpenWithStopTs_result(scannerOpenWithStopTs_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
       if (other.isSetIo()) {
         this.io = new IOError(other.io);
@@ -47814,16 +48067,16 @@ public class Hbase {
     }
 
     public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been assigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
     public IOError getIo() {
@@ -48002,6 +48255,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -48015,7 +48269,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -48072,9 +48326,11 @@ public class Hbase {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI32(struct.success);
-        oprot.writeFieldEnd();
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeI32(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.io != null) {
           oprot.writeFieldBegin(IO_FIELD_DESC);
           struct.io.write(oprot);
@@ -48210,7 +48466,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __ID_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -48235,8 +48491,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public scannerGet_args(scannerGet_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.id = other.id;
     }
 
@@ -48267,16 +48522,16 @@ public class Hbase {
     }
 
     public void unsetId() {
-      __isset_bit_vector.clear(__ID_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
     }
 
     /** Returns true if field id is set (has been assigned a value) and false otherwise */
     public boolean isSetId() {
-      return __isset_bit_vector.get(__ID_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
     }
 
     public void setIdIsSet(boolean value) {
-      __isset_bit_vector.set(__ID_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
     }
 
     public void setFieldValue(_Fields field, Object value) {
@@ -48391,6 +48646,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -48404,7 +48660,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -48918,6 +49174,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -48961,7 +49218,7 @@ public class Hbase {
                   struct.success = new ArrayList<TRowResult>(_list542.size);
                   for (int _i543 = 0; _i543 < _list542.size; ++_i543)
                   {
-                    TRowResult _elem544; // optional
+                    TRowResult _elem544; // required
                     _elem544 = new TRowResult();
                     _elem544.read(iprot);
                     struct.success.add(_elem544);
@@ -49083,7 +49340,7 @@ public class Hbase {
             struct.success = new ArrayList<TRowResult>(_list547.size);
             for (int _i548 = 0; _i548 < _list547.size; ++_i548)
             {
-              TRowResult _elem549; // optional
+              TRowResult _elem549; // required
               _elem549 = new TRowResult();
               _elem549.read(iprot);
               struct.success.add(_elem549);
@@ -49197,7 +49454,7 @@ public class Hbase {
     // isset id assignments
     private static final int __ID_ISSET_ID = 0;
     private static final int __NBROWS_ISSET_ID = 1;
-    private BitSet __isset_bit_vector = new BitSet(2);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -49227,8 +49484,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public scannerGetList_args(scannerGetList_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.id = other.id;
       this.nbRows = other.nbRows;
     }
@@ -49262,16 +49518,16 @@ public class Hbase {
     }
 
     public void unsetId() {
-      __isset_bit_vector.clear(__ID_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
     }
 
     /** Returns true if field id is set (has been assigned a value) and false otherwise */
     public boolean isSetId() {
-      return __isset_bit_vector.get(__ID_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
     }
 
     public void setIdIsSet(boolean value) {
-      __isset_bit_vector.set(__ID_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
     }
 
     /**
@@ -49291,16 +49547,16 @@ public class Hbase {
     }
 
     public void unsetNbRows() {
-      __isset_bit_vector.clear(__NBROWS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NBROWS_ISSET_ID);
     }
 
     /** Returns true if field nbRows is set (has been assigned a value) and false otherwise */
     public boolean isSetNbRows() {
-      return __isset_bit_vector.get(__NBROWS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __NBROWS_ISSET_ID);
     }
 
     public void setNbRowsIsSet(boolean value) {
-      __isset_bit_vector.set(__NBROWS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NBROWS_ISSET_ID, value);
     }
 
     public void setFieldValue(_Fields field, Object value) {
@@ -49451,6 +49707,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -49463,6 +49720,8 @@ public class Hbase {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -49997,6 +50256,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -50040,7 +50300,7 @@ public class Hbase {
                   struct.success = new ArrayList<TRowResult>(_list550.size);
                   for (int _i551 = 0; _i551 < _list550.size; ++_i551)
                   {
-                    TRowResult _elem552; // optional
+                    TRowResult _elem552; // required
                     _elem552 = new TRowResult();
                     _elem552.read(iprot);
                     struct.success.add(_elem552);
@@ -50162,7 +50422,7 @@ public class Hbase {
             struct.success = new ArrayList<TRowResult>(_list555.size);
             for (int _i556 = 0; _i556 < _list555.size; ++_i556)
             {
-              TRowResult _elem557; // optional
+              TRowResult _elem557; // required
               _elem557 = new TRowResult();
               _elem557.read(iprot);
               struct.success.add(_elem557);
@@ -50264,7 +50524,7 @@ public class Hbase {
 
     // isset id assignments
     private static final int __ID_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -50289,8 +50549,7 @@ public class Hbase {
      * Performs a deep copy on <i>other</i>.
      */
     public scannerClose_args(scannerClose_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.id = other.id;
     }
 
@@ -50321,16 +50580,16 @@ public class Hbase {
     }
 
     public void unsetId() {
-      __isset_bit_vector.clear(__ID_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
     }
 
     /** Returns true if field id is set (has been assigned a value) and false otherwise */
     public boolean isSetId() {
-      return __isset_bit_vector.get(__ID_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
     }
 
     public void setIdIsSet(boolean value) {
-      __isset_bit_vector.set(__ID_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
     }
 
     public void setFieldValue(_Fields field, Object value) {
@@ -50445,6 +50704,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -50458,7 +50718,7 @@ public class Hbase {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -50875,6 +51135,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -51475,6 +51736,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -51971,6 +52233,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -52014,7 +52277,7 @@ public class Hbase {
                   struct.success = new ArrayList<TCell>(_list558.size);
                   for (int _i559 = 0; _i559 < _list558.size; ++_i559)
                   {
-                    TCell _elem560; // optional
+                    TCell _elem560; // required
                     _elem560 = new TCell();
                     _elem560.read(iprot);
                     struct.success.add(_elem560);
@@ -52116,7 +52379,7 @@ public class Hbase {
             struct.success = new ArrayList<TCell>(_list563.size);
             for (int _i564 = 0; _i564 < _list563.size; ++_i564)
             {
-              TCell _elem565; // optional
+              TCell _elem565; // required
               _elem565 = new TCell();
               _elem565.read(iprot);
               struct.success.add(_elem565);
@@ -52405,6 +52668,7 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -52835,6 +53099,10 @@ public class Hbase {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
+      if (success != null) {
+        success.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift/generated/IOError.java b/src/main/java/org/apache/hadoop/hbase/thrift/generated/IOError.java
index 11e31e3..6874b28 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift/generated/IOError.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift/generated/IOError.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -32,7 +35,7 @@ import org.slf4j.LoggerFactory;
  * to the Hbase master or an Hbase region server.  Also used to return
  * more general Hbase error conditions.
  */
-public class IOError extends Exception implements org.apache.thrift.TBase<IOError, IOError._Fields>, java.io.Serializable, Cloneable {
+public class IOError extends TException implements org.apache.thrift.TBase<IOError, IOError._Fields>, java.io.Serializable, Cloneable {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IOError");
 
   private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -281,6 +284,7 @@ public class IOError extends Exception implements org.apache.thrift.TBase<IOErro
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift/generated/IllegalArgument.java b/src/main/java/org/apache/hadoop/hbase/thrift/generated/IllegalArgument.java
index ede215f..61aafb4 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift/generated/IllegalArgument.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift/generated/IllegalArgument.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -31,7 +34,7 @@ import org.slf4j.LoggerFactory;
  * An IllegalArgument exception indicates an illegal or invalid
  * argument was passed into a procedure.
  */
-public class IllegalArgument extends Exception implements org.apache.thrift.TBase<IllegalArgument, IllegalArgument._Fields>, java.io.Serializable, Cloneable {
+public class IllegalArgument extends TException implements org.apache.thrift.TBase<IllegalArgument, IllegalArgument._Fields>, java.io.Serializable, Cloneable {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IllegalArgument");
 
   private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -280,6 +283,7 @@ public class IllegalArgument extends Exception implements org.apache.thrift.TBas
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift/generated/Mutation.java b/src/main/java/org/apache/hadoop/hbase/thrift/generated/Mutation.java
index ef1817f..0cdd751 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift/generated/Mutation.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift/generated/Mutation.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -119,7 +122,7 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
   // isset id assignments
   private static final int __ISDELETE_ISSET_ID = 0;
   private static final int __WRITETOWAL_ISSET_ID = 1;
-  private BitSet __isset_bit_vector = new BitSet(2);
+  private byte __isset_bitfield = 0;
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -161,8 +164,7 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
    * Performs a deep copy on <i>other</i>.
    */
   public Mutation(Mutation other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     this.isDelete = other.isDelete;
     if (other.isSetColumn()) {
       this.column = other.column;
@@ -198,16 +200,16 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
   }
 
   public void unsetIsDelete() {
-    __isset_bit_vector.clear(__ISDELETE_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDELETE_ISSET_ID);
   }
 
   /** Returns true if field isDelete is set (has been assigned a value) and false otherwise */
   public boolean isSetIsDelete() {
-    return __isset_bit_vector.get(__ISDELETE_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __ISDELETE_ISSET_ID);
   }
 
   public void setIsDeleteIsSet(boolean value) {
-    __isset_bit_vector.set(__ISDELETE_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDELETE_ISSET_ID, value);
   }
 
   public byte[] getColumn() {
@@ -289,16 +291,16 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
   }
 
   public void unsetWriteToWAL() {
-    __isset_bit_vector.clear(__WRITETOWAL_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITETOWAL_ISSET_ID);
   }
 
   /** Returns true if field writeToWAL is set (has been assigned a value) and false otherwise */
   public boolean isSetWriteToWAL() {
-    return __isset_bit_vector.get(__WRITETOWAL_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __WRITETOWAL_ISSET_ID);
   }
 
   public void setWriteToWALIsSet(boolean value) {
-    __isset_bit_vector.set(__WRITETOWAL_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITETOWAL_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -529,6 +531,7 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -542,7 +545,7 @@ public class Mutation implements org.apache.thrift.TBase<Mutation, Mutation._Fie
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift/generated/TCell.java b/src/main/java/org/apache/hadoop/hbase/thrift/generated/TCell.java
index 6ee8ca7..4aef0e0 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift/generated/TCell.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift/generated/TCell.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -111,7 +114,7 @@ public class TCell implements org.apache.thrift.TBase<TCell, TCell._Fields>, jav
 
   // isset id assignments
   private static final int __TIMESTAMP_ISSET_ID = 0;
-  private BitSet __isset_bit_vector = new BitSet(1);
+  private byte __isset_bitfield = 0;
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -140,8 +143,7 @@ public class TCell implements org.apache.thrift.TBase<TCell, TCell._Fields>, jav
    * Performs a deep copy on <i>other</i>.
    */
   public TCell(TCell other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetValue()) {
       this.value = other.value;
     }
@@ -204,16 +206,16 @@ public class TCell implements org.apache.thrift.TBase<TCell, TCell._Fields>, jav
   }
 
   public void unsetTimestamp() {
-    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
   public boolean isSetTimestamp() {
-    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   public void setTimestampIsSet(boolean value) {
-    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -368,6 +370,7 @@ public class TCell implements org.apache.thrift.TBase<TCell, TCell._Fields>, jav
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -381,7 +384,7 @@ public class TCell implements org.apache.thrift.TBase<TCell, TCell._Fields>, jav
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift/generated/TIncrement.java b/src/main/java/org/apache/hadoop/hbase/thrift/generated/TIncrement.java
index 6d24aa0..80bfd88 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift/generated/TIncrement.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift/generated/TIncrement.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -119,7 +122,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
 
   // isset id assignments
   private static final int __AMMOUNT_ISSET_ID = 0;
-  private BitSet __isset_bit_vector = new BitSet(1);
+  private byte __isset_bitfield = 0;
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -156,8 +159,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
    * Performs a deep copy on <i>other</i>.
    */
   public TIncrement(TIncrement other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetTable()) {
       this.table = other.table;
     }
@@ -296,16 +298,16 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
   }
 
   public void unsetAmmount() {
-    __isset_bit_vector.clear(__AMMOUNT_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMMOUNT_ISSET_ID);
   }
 
   /** Returns true if field ammount is set (has been assigned a value) and false otherwise */
   public boolean isSetAmmount() {
-    return __isset_bit_vector.get(__AMMOUNT_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __AMMOUNT_ISSET_ID);
   }
 
   public void setAmmountIsSet(boolean value) {
-    __isset_bit_vector.set(__AMMOUNT_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMMOUNT_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -540,6 +542,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -553,7 +556,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRegionInfo.java b/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRegionInfo.java
index ed251e8..b00da37 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRegionInfo.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRegionInfo.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -135,7 +138,7 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
   private static final int __ID_ISSET_ID = 0;
   private static final int __VERSION_ISSET_ID = 1;
   private static final int __PORT_ISSET_ID = 2;
-  private BitSet __isset_bit_vector = new BitSet(3);
+  private byte __isset_bitfield = 0;
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -186,8 +189,7 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
    * Performs a deep copy on <i>other</i>.
    */
   public TRegionInfo(TRegionInfo other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetStartKey()) {
       this.startKey = other.startKey;
     }
@@ -302,16 +304,16 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
   }
 
   public void unsetId() {
-    __isset_bit_vector.clear(__ID_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
   }
 
   /** Returns true if field id is set (has been assigned a value) and false otherwise */
   public boolean isSetId() {
-    return __isset_bit_vector.get(__ID_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
   }
 
   public void setIdIsSet(boolean value) {
-    __isset_bit_vector.set(__ID_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
   }
 
   public byte[] getName() {
@@ -359,16 +361,16 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
   }
 
   public void unsetVersion() {
-    __isset_bit_vector.clear(__VERSION_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
   }
 
   /** Returns true if field version is set (has been assigned a value) and false otherwise */
   public boolean isSetVersion() {
-    return __isset_bit_vector.get(__VERSION_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
   }
 
   public void setVersionIsSet(boolean value) {
-    __isset_bit_vector.set(__VERSION_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
   }
 
   public byte[] getServerName() {
@@ -416,16 +418,16 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
   }
 
   public void unsetPort() {
-    __isset_bit_vector.clear(__PORT_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
   }
 
   /** Returns true if field port is set (has been assigned a value) and false otherwise */
   public boolean isSetPort() {
-    return __isset_bit_vector.get(__PORT_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
   }
 
   public void setPortIsSet(boolean value) {
-    __isset_bit_vector.set(__PORT_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -772,6 +774,7 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -785,7 +788,7 @@ public class TRegionInfo implements org.apache.thrift.TBase<TRegionInfo, TRegion
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRowResult.java b/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRowResult.java
index 4477289..18af57a 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRowResult.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift/generated/TRowResult.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -391,6 +394,7 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -443,7 +447,7 @@ public class TRowResult implements org.apache.thrift.TBase<TRowResult, TRowResul
                 for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                 {
                   ByteBuffer _key10; // required
-                  TCell _val11; // optional
+                  TCell _val11; // required
                   _key10 = iprot.readBinary();
                   _val11 = new TCell();
                   _val11.read(iprot);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift/generated/TScan.java b/src/main/java/org/apache/hadoop/hbase/thrift/generated/TScan.java
index aa042ce..479f7ee 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift/generated/TScan.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift/generated/TScan.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -135,7 +138,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   private static final int __TIMESTAMP_ISSET_ID = 0;
   private static final int __CACHING_ISSET_ID = 1;
   private static final int __BATCHSIZE_ISSET_ID = 2;
-  private BitSet __isset_bit_vector = new BitSet(3);
+  private byte __isset_bitfield = 0;
   private _Fields optionals[] = {_Fields.START_ROW,_Fields.STOP_ROW,_Fields.TIMESTAMP,_Fields.COLUMNS,_Fields.CACHING,_Fields.FILTER_STRING,_Fields.BATCH_SIZE};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
@@ -166,8 +169,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
    * Performs a deep copy on <i>other</i>.
    */
   public TScan(TScan other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetStartRow()) {
       this.startRow = other.startRow;
     }
@@ -286,16 +288,16 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   }
 
   public void unsetTimestamp() {
-    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
   public boolean isSetTimestamp() {
-    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   public void setTimestampIsSet(boolean value) {
-    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
   }
 
   public int getColumnsSize() {
@@ -348,16 +350,16 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   }
 
   public void unsetCaching() {
-    __isset_bit_vector.clear(__CACHING_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHING_ISSET_ID);
   }
 
   /** Returns true if field caching is set (has been assigned a value) and false otherwise */
   public boolean isSetCaching() {
-    return __isset_bit_vector.get(__CACHING_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __CACHING_ISSET_ID);
   }
 
   public void setCachingIsSet(boolean value) {
-    __isset_bit_vector.set(__CACHING_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHING_ISSET_ID, value);
   }
 
   public byte[] getFilterString() {
@@ -405,16 +407,16 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   }
 
   public void unsetBatchSize() {
-    __isset_bit_vector.clear(__BATCHSIZE_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATCHSIZE_ISSET_ID);
   }
 
   /** Returns true if field batchSize is set (has been assigned a value) and false otherwise */
   public boolean isSetBatchSize() {
-    return __isset_bit_vector.get(__BATCHSIZE_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __BATCHSIZE_ISSET_ID);
   }
 
   public void setBatchSizeIsSet(boolean value) {
-    __isset_bit_vector.set(__BATCHSIZE_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATCHSIZE_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -775,6 +777,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -788,7 +791,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
@@ -840,13 +843,13 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
           case 4: // COLUMNS
             if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
               {
-                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
-                struct.columns = new ArrayList<ByteBuffer>(_list26.size);
-                for (int _i27 = 0; _i27 < _list26.size; ++_i27)
+                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
+                struct.columns = new ArrayList<ByteBuffer>(_list18.size);
+                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                 {
-                  ByteBuffer _elem28; // required
-                  _elem28 = iprot.readBinary();
-                  struct.columns.add(_elem28);
+                  ByteBuffer _elem20; // required
+                  _elem20 = iprot.readBinary();
+                  struct.columns.add(_elem20);
                 }
                 iprot.readListEnd();
               }
@@ -918,9 +921,9 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
           oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
           {
             oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columns.size()));
-            for (ByteBuffer _iter29 : struct.columns)
+            for (ByteBuffer _iter21 : struct.columns)
             {
-              oprot.writeBinary(_iter29);
+              oprot.writeBinary(_iter21);
             }
             oprot.writeListEnd();
           }
@@ -996,9 +999,9 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
       if (struct.isSetColumns()) {
         {
           oprot.writeI32(struct.columns.size());
-          for (ByteBuffer _iter30 : struct.columns)
+          for (ByteBuffer _iter22 : struct.columns)
           {
-            oprot.writeBinary(_iter30);
+            oprot.writeBinary(_iter22);
           }
         }
       }
@@ -1031,13 +1034,13 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
       }
       if (incoming.get(3)) {
         {
-          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-          struct.columns = new ArrayList<ByteBuffer>(_list31.size);
-          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
+          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+          struct.columns = new ArrayList<ByteBuffer>(_list23.size);
+          for (int _i24 = 0; _i24 < _list23.size; ++_i24)
           {
-            ByteBuffer _elem33; // required
-            _elem33 = iprot.readBinary();
-            struct.columns.add(_elem33);
+            ByteBuffer _elem25; // required
+            _elem25 = iprot.readBinary();
+            struct.columns.add(_elem25);
           }
         }
         struct.setColumnsIsSet(true);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumn.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumn.java
index ba11ece..4cd514c 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumn.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumn.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -115,7 +118,7 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
 
   // isset id assignments
   private static final int __TIMESTAMP_ISSET_ID = 0;
-  private BitSet __isset_bit_vector = new BitSet(1);
+  private byte __isset_bitfield = 0;
   private _Fields optionals[] = {_Fields.QUALIFIER,_Fields.TIMESTAMP};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
@@ -144,8 +147,7 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
    * Performs a deep copy on <i>other</i>.
    */
   public TColumn(TColumn other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetFamily()) {
       this.family = org.apache.thrift.TBaseHelper.copyBinary(other.family);
 ;
@@ -248,16 +250,16 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
   }
 
   public void unsetTimestamp() {
-    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
   public boolean isSetTimestamp() {
-    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   public void setTimestampIsSet(boolean value) {
-    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -459,6 +461,7 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
     if (family == null) {
       throw new org.apache.thrift.protocol.TProtocolException("Required field 'family' was not present! Struct: " + toString());
     }
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -472,7 +475,7 @@ public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnIncrement.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnIncrement.java
index 6362250..728b50d 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnIncrement.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnIncrement.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -113,7 +116,7 @@ public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncremen
 
   // isset id assignments
   private static final int __AMOUNT_ISSET_ID = 0;
-  private BitSet __isset_bit_vector = new BitSet(1);
+  private byte __isset_bitfield = 0;
   private _Fields optionals[] = {_Fields.AMOUNT};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
@@ -146,8 +149,7 @@ public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncremen
    * Performs a deep copy on <i>other</i>.
    */
   public TColumnIncrement(TColumnIncrement other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetFamily()) {
       this.family = org.apache.thrift.TBaseHelper.copyBinary(other.family);
 ;
@@ -250,16 +252,16 @@ public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncremen
   }
 
   public void unsetAmount() {
-    __isset_bit_vector.clear(__AMOUNT_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
   }
 
   /** Returns true if field amount is set (has been assigned a value) and false otherwise */
   public boolean isSetAmount() {
-    return __isset_bit_vector.get(__AMOUNT_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
   }
 
   public void setAmountIsSet(boolean value) {
-    __isset_bit_vector.set(__AMOUNT_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -462,6 +464,7 @@ public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncremen
     if (qualifier == null) {
       throw new org.apache.thrift.protocol.TProtocolException("Required field 'qualifier' was not present! Struct: " + toString());
     }
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -475,7 +478,7 @@ public class TColumnIncrement implements org.apache.thrift.TBase<TColumnIncremen
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnValue.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnValue.java
index 39e5d2a..52d94f1 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnValue.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TColumnValue.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -118,7 +121,7 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
 
   // isset id assignments
   private static final int __TIMESTAMP_ISSET_ID = 0;
-  private BitSet __isset_bit_vector = new BitSet(1);
+  private byte __isset_bitfield = 0;
   private _Fields optionals[] = {_Fields.TIMESTAMP};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
@@ -153,8 +156,7 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
    * Performs a deep copy on <i>other</i>.
    */
   public TColumnValue(TColumnValue other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetFamily()) {
       this.family = org.apache.thrift.TBaseHelper.copyBinary(other.family);
 ;
@@ -296,16 +298,16 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
   }
 
   public void unsetTimestamp() {
-    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
   public boolean isSetTimestamp() {
-    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   public void setTimestampIsSet(boolean value) {
-    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -551,6 +553,7 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
     if (value == null) {
       throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not present! Struct: " + toString());
     }
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -564,7 +567,7 @@ public class TColumnValue implements org.apache.thrift.TBase<TColumnValue, TColu
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java
index a732d7a..ebd9b65 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -152,7 +155,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
   // isset id assignments
   private static final int __TIMESTAMP_ISSET_ID = 0;
   private static final int __WRITETOWAL_ISSET_ID = 1;
-  private BitSet __isset_bit_vector = new BitSet(2);
+  private byte __isset_bitfield = 0;
   private _Fields optionals[] = {_Fields.COLUMNS,_Fields.TIMESTAMP,_Fields.DELETE_TYPE,_Fields.WRITE_TO_WAL};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
@@ -190,8 +193,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
    * Performs a deep copy on <i>other</i>.
    */
   public TDelete(TDelete other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetRow()) {
       this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
 ;
@@ -310,16 +312,16 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
   }
 
   public void unsetTimestamp() {
-    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
   public boolean isSetTimestamp() {
-    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   public void setTimestampIsSet(boolean value) {
-    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
   }
 
   /**
@@ -365,16 +367,16 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
   }
 
   public void unsetWriteToWal() {
-    __isset_bit_vector.clear(__WRITETOWAL_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITETOWAL_ISSET_ID);
   }
 
   /** Returns true if field writeToWal is set (has been assigned a value) and false otherwise */
   public boolean isSetWriteToWal() {
-    return __isset_bit_vector.get(__WRITETOWAL_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __WRITETOWAL_ISSET_ID);
   }
 
   public void setWriteToWalIsSet(boolean value) {
-    __isset_bit_vector.set(__WRITETOWAL_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITETOWAL_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -656,6 +658,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
     if (row == null) {
       throw new org.apache.thrift.protocol.TProtocolException("Required field 'row' was not present! Struct: " + toString());
     }
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -669,7 +672,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
@@ -709,7 +712,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
                 struct.columns = new ArrayList<TColumn>(_list24.size);
                 for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                 {
-                  TColumn _elem26; // optional
+                  TColumn _elem26; // required
                   _elem26 = new TColumn();
                   _elem26.read(iprot);
                   struct.columns.add(_elem26);
@@ -860,7 +863,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
           struct.columns = new ArrayList<TColumn>(_list29.size);
           for (int _i30 = 0; _i30 < _list29.size; ++_i30)
           {
-            TColumn _elem31; // optional
+            TColumn _elem31; // required
             _elem31 = new TColumn();
             _elem31.read(iprot);
             struct.columns.add(_elem31);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDeleteType.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDeleteType.java
index e5d77a6..39a5015 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDeleteType.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDeleteType.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TGet.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TGet.java
index 14e6d51..c0bb53d 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TGet.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TGet.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -136,7 +139,7 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
   // isset id assignments
   private static final int __TIMESTAMP_ISSET_ID = 0;
   private static final int __MAXVERSIONS_ISSET_ID = 1;
-  private BitSet __isset_bit_vector = new BitSet(2);
+  private byte __isset_bitfield = 0;
   private _Fields optionals[] = {_Fields.COLUMNS,_Fields.TIMESTAMP,_Fields.TIME_RANGE,_Fields.MAX_VERSIONS};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
@@ -170,8 +173,7 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
    * Performs a deep copy on <i>other</i>.
    */
   public TGet(TGet other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetRow()) {
       this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
 ;
@@ -289,16 +291,16 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
   }
 
   public void unsetTimestamp() {
-    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
   public boolean isSetTimestamp() {
-    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   public void setTimestampIsSet(boolean value) {
-    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
   }
 
   public TTimeRange getTimeRange() {
@@ -336,16 +338,16 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
   }
 
   public void unsetMaxVersions() {
-    __isset_bit_vector.clear(__MAXVERSIONS_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXVERSIONS_ISSET_ID);
   }
 
   /** Returns true if field maxVersions is set (has been assigned a value) and false otherwise */
   public boolean isSetMaxVersions() {
-    return __isset_bit_vector.get(__MAXVERSIONS_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __MAXVERSIONS_ISSET_ID);
   }
 
   public void setMaxVersionsIsSet(boolean value) {
-    __isset_bit_vector.set(__MAXVERSIONS_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXVERSIONS_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -627,6 +629,10 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
     if (row == null) {
       throw new org.apache.thrift.protocol.TProtocolException("Required field 'row' was not present! Struct: " + toString());
     }
+    // check for sub-struct validity
+    if (timeRange != null) {
+      timeRange.validate();
+    }
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -640,7 +646,7 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
@@ -680,7 +686,7 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
                 struct.columns = new ArrayList<TColumn>(_list8.size);
                 for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                 {
-                  TColumn _elem10; // optional
+                  TColumn _elem10; // required
                   _elem10 = new TColumn();
                   _elem10.read(iprot);
                   struct.columns.add(_elem10);
@@ -832,7 +838,7 @@ public class TGet implements org.apache.thrift.TBase<TGet, TGet._Fields>, java.i
           struct.columns = new ArrayList<TColumn>(_list13.size);
           for (int _i14 = 0; _i14 < _list13.size; ++_i14)
           {
-            TColumn _elem15; // optional
+            TColumn _elem15; // required
             _elem15 = new TColumn();
             _elem15.read(iprot);
             struct.columns.add(_elem15);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java
index 5628998..98b1cd6 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/THBaseService.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -1121,16 +1124,20 @@ public class THBaseService {
       return processMap;
     }
 
-    private static class exists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exists_args> {
+    public static class exists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exists_args> {
       public exists() {
         super("exists");
       }
 
-      protected exists_args getEmptyArgsInstance() {
+      public exists_args getEmptyArgsInstance() {
         return new exists_args();
       }
 
-      protected exists_result getResult(I iface, exists_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public exists_result getResult(I iface, exists_args args) throws org.apache.thrift.TException {
         exists_result result = new exists_result();
         try {
           result.success = iface.exists(args.table, args.get);
@@ -1142,16 +1149,20 @@ public class THBaseService {
       }
     }
 
-    private static class get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_args> {
+    public static class get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_args> {
       public get() {
         super("get");
       }
 
-      protected get_args getEmptyArgsInstance() {
+      public get_args getEmptyArgsInstance() {
         return new get_args();
       }
 
-      protected get_result getResult(I iface, get_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public get_result getResult(I iface, get_args args) throws org.apache.thrift.TException {
         get_result result = new get_result();
         try {
           result.success = iface.get(args.table, args.get);
@@ -1162,16 +1173,20 @@ public class THBaseService {
       }
     }
 
-    private static class getMultiple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMultiple_args> {
+    public static class getMultiple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMultiple_args> {
       public getMultiple() {
         super("getMultiple");
       }
 
-      protected getMultiple_args getEmptyArgsInstance() {
+      public getMultiple_args getEmptyArgsInstance() {
         return new getMultiple_args();
       }
 
-      protected getMultiple_result getResult(I iface, getMultiple_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getMultiple_result getResult(I iface, getMultiple_args args) throws org.apache.thrift.TException {
         getMultiple_result result = new getMultiple_result();
         try {
           result.success = iface.getMultiple(args.table, args.gets);
@@ -1182,16 +1197,20 @@ public class THBaseService {
       }
     }
 
-    private static class put<I extends Iface> extends org.apache.thrift.ProcessFunction<I, put_args> {
+    public static class put<I extends Iface> extends org.apache.thrift.ProcessFunction<I, put_args> {
       public put() {
         super("put");
       }
 
-      protected put_args getEmptyArgsInstance() {
+      public put_args getEmptyArgsInstance() {
         return new put_args();
       }
 
-      protected put_result getResult(I iface, put_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public put_result getResult(I iface, put_args args) throws org.apache.thrift.TException {
         put_result result = new put_result();
         try {
           iface.put(args.table, args.put);
@@ -1202,16 +1221,20 @@ public class THBaseService {
       }
     }
 
-    private static class checkAndPut<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkAndPut_args> {
+    public static class checkAndPut<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkAndPut_args> {
       public checkAndPut() {
         super("checkAndPut");
       }
 
-      protected checkAndPut_args getEmptyArgsInstance() {
+      public checkAndPut_args getEmptyArgsInstance() {
         return new checkAndPut_args();
       }
 
-      protected checkAndPut_result getResult(I iface, checkAndPut_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public checkAndPut_result getResult(I iface, checkAndPut_args args) throws org.apache.thrift.TException {
         checkAndPut_result result = new checkAndPut_result();
         try {
           result.success = iface.checkAndPut(args.table, args.row, args.family, args.qualifier, args.value, args.put);
@@ -1223,16 +1246,20 @@ public class THBaseService {
       }
     }
 
-    private static class putMultiple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putMultiple_args> {
+    public static class putMultiple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putMultiple_args> {
       public putMultiple() {
         super("putMultiple");
       }
 
-      protected putMultiple_args getEmptyArgsInstance() {
+      public putMultiple_args getEmptyArgsInstance() {
         return new putMultiple_args();
       }
 
-      protected putMultiple_result getResult(I iface, putMultiple_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public putMultiple_result getResult(I iface, putMultiple_args args) throws org.apache.thrift.TException {
         putMultiple_result result = new putMultiple_result();
         try {
           iface.putMultiple(args.table, args.puts);
@@ -1243,16 +1270,20 @@ public class THBaseService {
       }
     }
 
-    private static class deleteSingle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSingle_args> {
+    public static class deleteSingle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSingle_args> {
       public deleteSingle() {
         super("deleteSingle");
       }
 
-      protected deleteSingle_args getEmptyArgsInstance() {
+      public deleteSingle_args getEmptyArgsInstance() {
         return new deleteSingle_args();
       }
 
-      protected deleteSingle_result getResult(I iface, deleteSingle_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public deleteSingle_result getResult(I iface, deleteSingle_args args) throws org.apache.thrift.TException {
         deleteSingle_result result = new deleteSingle_result();
         try {
           iface.deleteSingle(args.table, args.deleteSingle);
@@ -1263,16 +1294,20 @@ public class THBaseService {
       }
     }
 
-    private static class deleteMultiple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteMultiple_args> {
+    public static class deleteMultiple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteMultiple_args> {
       public deleteMultiple() {
         super("deleteMultiple");
       }
 
-      protected deleteMultiple_args getEmptyArgsInstance() {
+      public deleteMultiple_args getEmptyArgsInstance() {
         return new deleteMultiple_args();
       }
 
-      protected deleteMultiple_result getResult(I iface, deleteMultiple_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public deleteMultiple_result getResult(I iface, deleteMultiple_args args) throws org.apache.thrift.TException {
         deleteMultiple_result result = new deleteMultiple_result();
         try {
           result.success = iface.deleteMultiple(args.table, args.deletes);
@@ -1283,16 +1318,20 @@ public class THBaseService {
       }
     }
 
-    private static class checkAndDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkAndDelete_args> {
+    public static class checkAndDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkAndDelete_args> {
       public checkAndDelete() {
         super("checkAndDelete");
       }
 
-      protected checkAndDelete_args getEmptyArgsInstance() {
+      public checkAndDelete_args getEmptyArgsInstance() {
         return new checkAndDelete_args();
       }
 
-      protected checkAndDelete_result getResult(I iface, checkAndDelete_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public checkAndDelete_result getResult(I iface, checkAndDelete_args args) throws org.apache.thrift.TException {
         checkAndDelete_result result = new checkAndDelete_result();
         try {
           result.success = iface.checkAndDelete(args.table, args.row, args.family, args.qualifier, args.value, args.deleteSingle);
@@ -1304,16 +1343,20 @@ public class THBaseService {
       }
     }
 
-    private static class increment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, increment_args> {
+    public static class increment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, increment_args> {
       public increment() {
         super("increment");
       }
 
-      protected increment_args getEmptyArgsInstance() {
+      public increment_args getEmptyArgsInstance() {
         return new increment_args();
       }
 
-      protected increment_result getResult(I iface, increment_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public increment_result getResult(I iface, increment_args args) throws org.apache.thrift.TException {
         increment_result result = new increment_result();
         try {
           result.success = iface.increment(args.table, args.increment);
@@ -1324,16 +1367,20 @@ public class THBaseService {
       }
     }
 
-    private static class openScanner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openScanner_args> {
+    public static class openScanner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openScanner_args> {
       public openScanner() {
         super("openScanner");
       }
 
-      protected openScanner_args getEmptyArgsInstance() {
+      public openScanner_args getEmptyArgsInstance() {
         return new openScanner_args();
       }
 
-      protected openScanner_result getResult(I iface, openScanner_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public openScanner_result getResult(I iface, openScanner_args args) throws org.apache.thrift.TException {
         openScanner_result result = new openScanner_result();
         try {
           result.success = iface.openScanner(args.table, args.scan);
@@ -1345,16 +1392,20 @@ public class THBaseService {
       }
     }
 
-    private static class getScannerRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getScannerRows_args> {
+    public static class getScannerRows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getScannerRows_args> {
       public getScannerRows() {
         super("getScannerRows");
       }
 
-      protected getScannerRows_args getEmptyArgsInstance() {
+      public getScannerRows_args getEmptyArgsInstance() {
         return new getScannerRows_args();
       }
 
-      protected getScannerRows_result getResult(I iface, getScannerRows_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public getScannerRows_result getResult(I iface, getScannerRows_args args) throws org.apache.thrift.TException {
         getScannerRows_result result = new getScannerRows_result();
         try {
           result.success = iface.getScannerRows(args.scannerId, args.numRows);
@@ -1367,16 +1418,20 @@ public class THBaseService {
       }
     }
 
-    private static class closeScanner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeScanner_args> {
+    public static class closeScanner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeScanner_args> {
       public closeScanner() {
         super("closeScanner");
       }
 
-      protected closeScanner_args getEmptyArgsInstance() {
+      public closeScanner_args getEmptyArgsInstance() {
         return new closeScanner_args();
       }
 
-      protected closeScanner_result getResult(I iface, closeScanner_args args) throws org.apache.thrift.TException {
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public closeScanner_result getResult(I iface, closeScanner_args args) throws org.apache.thrift.TException {
         closeScanner_result result = new closeScanner_result();
         try {
           iface.closeScanner(args.scannerId);
@@ -1758,6 +1813,10 @@ public class THBaseService {
       if (get == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'get' was not present! Struct: " + toString());
       }
+      // check for sub-struct validity
+      if (get != null) {
+        get.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -1948,7 +2007,7 @@ public class THBaseService {
 
     // isset id assignments
     private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -1977,8 +2036,7 @@ public class THBaseService {
      * Performs a deep copy on <i>other</i>.
      */
     public exists_result(exists_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
       if (other.isSetIo()) {
         this.io = new TIOError(other.io);
@@ -2007,16 +2065,16 @@ public class THBaseService {
     }
 
     public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been assigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
     public TIOError getIo() {
@@ -2195,6 +2253,7 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -2207,6 +2266,8 @@ public class THBaseService {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -2263,9 +2324,11 @@ public class THBaseService {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeBool(struct.success);
-        oprot.writeFieldEnd();
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeBool(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.io != null) {
           oprot.writeFieldBegin(IO_FIELD_DESC);
           struct.io.write(oprot);
@@ -2689,6 +2752,10 @@ public class THBaseService {
       if (get == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'get' was not present! Struct: " + toString());
       }
+      // check for sub-struct validity
+      if (get != null) {
+        get.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -3127,6 +3194,10 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
+      if (success != null) {
+        success.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -3653,6 +3724,7 @@ public class THBaseService {
       if (gets == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'gets' was not present! Struct: " + toString());
       }
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -3704,7 +3776,7 @@ public class THBaseService {
                   struct.gets = new ArrayList<TGet>(_list48.size);
                   for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                   {
-                    TGet _elem50; // optional
+                    TGet _elem50; // required
                     _elem50 = new TGet();
                     _elem50.read(iprot);
                     struct.gets.add(_elem50);
@@ -3785,7 +3857,7 @@ public class THBaseService {
           struct.gets = new ArrayList<TGet>(_list53.size);
           for (int _i54 = 0; _i54 < _list53.size; ++_i54)
           {
-            TGet _elem55; // optional
+            TGet _elem55; // required
             _elem55 = new TGet();
             _elem55.read(iprot);
             struct.gets.add(_elem55);
@@ -4143,6 +4215,7 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -4186,7 +4259,7 @@ public class THBaseService {
                   struct.success = new ArrayList<TResult>(_list56.size);
                   for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                   {
-                    TResult _elem58; // optional
+                    TResult _elem58; // required
                     _elem58 = new TResult();
                     _elem58.read(iprot);
                     struct.success.add(_elem58);
@@ -4288,7 +4361,7 @@ public class THBaseService {
             struct.success = new ArrayList<TResult>(_list61.size);
             for (int _i62 = 0; _i62 < _list61.size; ++_i62)
             {
-              TResult _elem63; // optional
+              TResult _elem63; // required
               _elem63 = new TResult();
               _elem63.read(iprot);
               struct.success.add(_elem63);
@@ -4673,6 +4746,10 @@ public class THBaseService {
       if (put == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'put' was not present! Struct: " + toString());
       }
+      // check for sub-struct validity
+      if (put != null) {
+        put.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -5034,6 +5111,7 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -5924,6 +6002,10 @@ public class THBaseService {
       if (put == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'put' was not present! Struct: " + toString());
       }
+      // check for sub-struct validity
+      if (put != null) {
+        put.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -6188,7 +6270,7 @@ public class THBaseService {
 
     // isset id assignments
     private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -6217,8 +6299,7 @@ public class THBaseService {
      * Performs a deep copy on <i>other</i>.
      */
     public checkAndPut_result(checkAndPut_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
       if (other.isSetIo()) {
         this.io = new TIOError(other.io);
@@ -6247,16 +6328,16 @@ public class THBaseService {
     }
 
     public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been assigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
     public TIOError getIo() {
@@ -6435,6 +6516,7 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -6447,6 +6529,8 @@ public class THBaseService {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -6503,9 +6587,11 @@ public class THBaseService {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeBool(struct.success);
-        oprot.writeFieldEnd();
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeBool(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.io != null) {
           oprot.writeFieldBegin(IO_FIELD_DESC);
           struct.io.write(oprot);
@@ -6949,6 +7035,7 @@ public class THBaseService {
       if (puts == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'puts' was not present! Struct: " + toString());
       }
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -7000,7 +7087,7 @@ public class THBaseService {
                   struct.puts = new ArrayList<TPut>(_list64.size);
                   for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                   {
-                    TPut _elem66; // optional
+                    TPut _elem66; // required
                     _elem66 = new TPut();
                     _elem66.read(iprot);
                     struct.puts.add(_elem66);
@@ -7081,7 +7168,7 @@ public class THBaseService {
           struct.puts = new ArrayList<TPut>(_list69.size);
           for (int _i70 = 0; _i70 < _list69.size; ++_i70)
           {
-            TPut _elem71; // optional
+            TPut _elem71; // required
             _elem71 = new TPut();
             _elem71.read(iprot);
             struct.puts.add(_elem71);
@@ -7342,6 +7429,7 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -7815,6 +7903,10 @@ public class THBaseService {
       if (deleteSingle == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'deleteSingle' was not present! Struct: " + toString());
       }
+      // check for sub-struct validity
+      if (deleteSingle != null) {
+        deleteSingle.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -8176,6 +8268,7 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -8669,6 +8762,7 @@ public class THBaseService {
       if (deletes == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'deletes' was not present! Struct: " + toString());
       }
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -8720,7 +8814,7 @@ public class THBaseService {
                   struct.deletes = new ArrayList<TDelete>(_list72.size);
                   for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                   {
-                    TDelete _elem74; // optional
+                    TDelete _elem74; // required
                     _elem74 = new TDelete();
                     _elem74.read(iprot);
                     struct.deletes.add(_elem74);
@@ -8801,7 +8895,7 @@ public class THBaseService {
           struct.deletes = new ArrayList<TDelete>(_list77.size);
           for (int _i78 = 0; _i78 < _list77.size; ++_i78)
           {
-            TDelete _elem79; // optional
+            TDelete _elem79; // required
             _elem79 = new TDelete();
             _elem79.read(iprot);
             struct.deletes.add(_elem79);
@@ -9159,6 +9253,7 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -9202,7 +9297,7 @@ public class THBaseService {
                   struct.success = new ArrayList<TDelete>(_list80.size);
                   for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                   {
-                    TDelete _elem82; // optional
+                    TDelete _elem82; // required
                     _elem82 = new TDelete();
                     _elem82.read(iprot);
                     struct.success.add(_elem82);
@@ -9304,7 +9399,7 @@ public class THBaseService {
             struct.success = new ArrayList<TDelete>(_list85.size);
             for (int _i86 = 0; _i86 < _list85.size; ++_i86)
             {
-              TDelete _elem87; // optional
+              TDelete _elem87; // required
               _elem87 = new TDelete();
               _elem87.read(iprot);
               struct.success.add(_elem87);
@@ -10106,6 +10201,10 @@ public class THBaseService {
       if (deleteSingle == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'deleteSingle' was not present! Struct: " + toString());
       }
+      // check for sub-struct validity
+      if (deleteSingle != null) {
+        deleteSingle.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -10370,7 +10469,7 @@ public class THBaseService {
 
     // isset id assignments
     private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -10399,8 +10498,7 @@ public class THBaseService {
      * Performs a deep copy on <i>other</i>.
      */
     public checkAndDelete_result(checkAndDelete_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
       if (other.isSetIo()) {
         this.io = new TIOError(other.io);
@@ -10429,16 +10527,16 @@ public class THBaseService {
     }
 
     public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been assigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
     public TIOError getIo() {
@@ -10617,6 +10715,7 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -10629,6 +10728,8 @@ public class THBaseService {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -10685,9 +10786,11 @@ public class THBaseService {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeBool(struct.success);
-        oprot.writeFieldEnd();
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeBool(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.io != null) {
           oprot.writeFieldBegin(IO_FIELD_DESC);
           struct.io.write(oprot);
@@ -11111,6 +11214,10 @@ public class THBaseService {
       if (increment == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'increment' was not present! Struct: " + toString());
       }
+      // check for sub-struct validity
+      if (increment != null) {
+        increment.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -11549,6 +11656,10 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
+      if (success != null) {
+        success.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -12047,6 +12158,10 @@ public class THBaseService {
       if (scan == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'scan' was not present! Struct: " + toString());
       }
+      // check for sub-struct validity
+      if (scan != null) {
+        scan.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -12237,7 +12352,7 @@ public class THBaseService {
 
     // isset id assignments
     private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -12266,8 +12381,7 @@ public class THBaseService {
      * Performs a deep copy on <i>other</i>.
      */
     public openScanner_result(openScanner_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
       if (other.isSetIo()) {
         this.io = new TIOError(other.io);
@@ -12296,16 +12410,16 @@ public class THBaseService {
     }
 
     public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been assigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
     public TIOError getIo() {
@@ -12484,6 +12598,7 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -12496,6 +12611,8 @@ public class THBaseService {
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -12552,9 +12669,11 @@ public class THBaseService {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI32(struct.success);
-        oprot.writeFieldEnd();
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeI32(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.io != null) {
           oprot.writeFieldBegin(IO_FIELD_DESC);
           struct.io.write(oprot);
@@ -12702,7 +12821,7 @@ public class THBaseService {
     // isset id assignments
     private static final int __SCANNERID_ISSET_ID = 0;
     private static final int __NUMROWS_ISSET_ID = 1;
-    private BitSet __isset_bit_vector = new BitSet(2);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -12734,8 +12853,7 @@ public class THBaseService {
      * Performs a deep copy on <i>other</i>.
      */
     public getScannerRows_args(getScannerRows_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.scannerId = other.scannerId;
       this.numRows = other.numRows;
     }
@@ -12769,16 +12887,16 @@ public class THBaseService {
     }
 
     public void unsetScannerId() {
-      __isset_bit_vector.clear(__SCANNERID_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCANNERID_ISSET_ID);
     }
 
     /** Returns true if field scannerId is set (has been assigned a value) and false otherwise */
     public boolean isSetScannerId() {
-      return __isset_bit_vector.get(__SCANNERID_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SCANNERID_ISSET_ID);
     }
 
     public void setScannerIdIsSet(boolean value) {
-      __isset_bit_vector.set(__SCANNERID_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCANNERID_ISSET_ID, value);
     }
 
     /**
@@ -12798,16 +12916,16 @@ public class THBaseService {
     }
 
     public void unsetNumRows() {
-      __isset_bit_vector.clear(__NUMROWS_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMROWS_ISSET_ID);
     }
 
     /** Returns true if field numRows is set (has been assigned a value) and false otherwise */
     public boolean isSetNumRows() {
-      return __isset_bit_vector.get(__NUMROWS_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __NUMROWS_ISSET_ID);
     }
 
     public void setNumRowsIsSet(boolean value) {
-      __isset_bit_vector.set(__NUMROWS_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMROWS_ISSET_ID, value);
     }
 
     public void setFieldValue(_Fields field, Object value) {
@@ -12959,6 +13077,7 @@ public class THBaseService {
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // alas, we cannot check 'scannerId' because it's a primitive and you chose the non-beans generator.
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -12972,7 +13091,7 @@ public class THBaseService {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -13515,6 +13634,7 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -13558,7 +13678,7 @@ public class THBaseService {
                   struct.success = new ArrayList<TResult>(_list88.size);
                   for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                   {
-                    TResult _elem90; // optional
+                    TResult _elem90; // required
                     _elem90 = new TResult();
                     _elem90.read(iprot);
                     struct.success.add(_elem90);
@@ -13680,7 +13800,7 @@ public class THBaseService {
             struct.success = new ArrayList<TResult>(_list93.size);
             for (int _i94 = 0; _i94 < _list93.size; ++_i94)
             {
-              TResult _elem95; // optional
+              TResult _elem95; // required
               _elem95 = new TResult();
               _elem95.read(iprot);
               struct.success.add(_elem95);
@@ -13782,7 +13902,7 @@ public class THBaseService {
 
     // isset id assignments
     private static final int __SCANNERID_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -13807,8 +13927,7 @@ public class THBaseService {
      * Performs a deep copy on <i>other</i>.
      */
     public closeScanner_args(closeScanner_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
+      __isset_bitfield = other.__isset_bitfield;
       this.scannerId = other.scannerId;
     }
 
@@ -13839,16 +13958,16 @@ public class THBaseService {
     }
 
     public void unsetScannerId() {
-      __isset_bit_vector.clear(__SCANNERID_ISSET_ID);
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCANNERID_ISSET_ID);
     }
 
     /** Returns true if field scannerId is set (has been assigned a value) and false otherwise */
     public boolean isSetScannerId() {
-      return __isset_bit_vector.get(__SCANNERID_ISSET_ID);
+      return EncodingUtils.testBit(__isset_bitfield, __SCANNERID_ISSET_ID);
     }
 
     public void setScannerIdIsSet(boolean value) {
-      __isset_bit_vector.set(__SCANNERID_ISSET_ID, value);
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCANNERID_ISSET_ID, value);
     }
 
     public void setFieldValue(_Fields field, Object value) {
@@ -13964,6 +14083,7 @@ public class THBaseService {
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // alas, we cannot check 'scannerId' because it's a primitive and you chose the non-beans generator.
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -13977,7 +14097,7 @@ public class THBaseService {
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
         // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-        __isset_bit_vector = new BitSet(1);
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
@@ -14399,6 +14519,7 @@ public class THBaseService {
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
+      // check for sub-struct validity
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIOError.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIOError.java
index 19f7546..55797b1 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIOError.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIOError.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -32,7 +35,7 @@ import org.slf4j.LoggerFactory;
  * to the HBase master or a HBase region server. Also used to return
  * more general HBase error conditions.
  */
-public class TIOError extends Exception implements org.apache.thrift.TBase<TIOError, TIOError._Fields>, java.io.Serializable, Cloneable {
+public class TIOError extends TException implements org.apache.thrift.TBase<TIOError, TIOError._Fields>, java.io.Serializable, Cloneable {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIOError");
 
   private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -277,6 +280,7 @@ public class TIOError extends Exception implements org.apache.thrift.TBase<TIOEr
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIllegalArgument.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIllegalArgument.java
index b5395a0..949f5a4 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIllegalArgument.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIllegalArgument.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -31,7 +34,7 @@ import org.slf4j.LoggerFactory;
  * A TIllegalArgument exception indicates an illegal or invalid
  * argument was passed into a procedure.
  */
-public class TIllegalArgument extends Exception implements org.apache.thrift.TBase<TIllegalArgument, TIllegalArgument._Fields>, java.io.Serializable, Cloneable {
+public class TIllegalArgument extends TException implements org.apache.thrift.TBase<TIllegalArgument, TIllegalArgument._Fields>, java.io.Serializable, Cloneable {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIllegalArgument");
 
   private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)1);
@@ -276,6 +279,7 @@ public class TIllegalArgument extends Exception implements org.apache.thrift.TBa
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIncrement.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIncrement.java
index 6b23b99..007d8ec 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIncrement.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TIncrement.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -116,7 +119,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
 
   // isset id assignments
   private static final int __WRITETOWAL_ISSET_ID = 0;
-  private BitSet __isset_bit_vector = new BitSet(1);
+  private byte __isset_bitfield = 0;
   private _Fields optionals[] = {_Fields.WRITE_TO_WAL};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
@@ -150,8 +153,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
    * Performs a deep copy on <i>other</i>.
    */
   public TIncrement(TIncrement other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetRow()) {
       this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
 ;
@@ -262,16 +264,16 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
   }
 
   public void unsetWriteToWal() {
-    __isset_bit_vector.clear(__WRITETOWAL_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITETOWAL_ISSET_ID);
   }
 
   /** Returns true if field writeToWal is set (has been assigned a value) and false otherwise */
   public boolean isSetWriteToWal() {
-    return __isset_bit_vector.get(__WRITETOWAL_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __WRITETOWAL_ISSET_ID);
   }
 
   public void setWriteToWalIsSet(boolean value) {
-    __isset_bit_vector.set(__WRITETOWAL_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITETOWAL_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -474,6 +476,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
     if (columns == null) {
       throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
     }
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -487,7 +490,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
@@ -527,7 +530,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
                 struct.columns = new ArrayList<TColumnIncrement>(_list32.size);
                 for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                 {
-                  TColumnIncrement _elem34; // optional
+                  TColumnIncrement _elem34; // required
                   _elem34 = new TColumnIncrement();
                   _elem34.read(iprot);
                   struct.columns.add(_elem34);
@@ -629,7 +632,7 @@ public class TIncrement implements org.apache.thrift.TBase<TIncrement, TIncremen
         struct.columns = new ArrayList<TColumnIncrement>(_list37.size);
         for (int _i38 = 0; _i38 < _list37.size; ++_i38)
         {
-          TColumnIncrement _elem39; // optional
+          TColumnIncrement _elem39; // required
           _elem39 = new TColumnIncrement();
           _elem39.read(iprot);
           struct.columns.add(_elem39);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TPut.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TPut.java
index a934824..9133c92 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TPut.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TPut.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -127,7 +130,7 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
   // isset id assignments
   private static final int __TIMESTAMP_ISSET_ID = 0;
   private static final int __WRITETOWAL_ISSET_ID = 1;
-  private BitSet __isset_bit_vector = new BitSet(2);
+  private byte __isset_bitfield = 0;
   private _Fields optionals[] = {_Fields.TIMESTAMP,_Fields.WRITE_TO_WAL};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
@@ -163,8 +166,7 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
    * Performs a deep copy on <i>other</i>.
    */
   public TPut(TPut other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetRow()) {
       this.row = org.apache.thrift.TBaseHelper.copyBinary(other.row);
 ;
@@ -278,16 +280,16 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
   }
 
   public void unsetTimestamp() {
-    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
   public boolean isSetTimestamp() {
-    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
   }
 
   public void setTimestampIsSet(boolean value) {
-    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
   }
 
   public boolean isWriteToWal() {
@@ -301,16 +303,16 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
   }
 
   public void unsetWriteToWal() {
-    __isset_bit_vector.clear(__WRITETOWAL_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITETOWAL_ISSET_ID);
   }
 
   /** Returns true if field writeToWal is set (has been assigned a value) and false otherwise */
   public boolean isSetWriteToWal() {
-    return __isset_bit_vector.get(__WRITETOWAL_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __WRITETOWAL_ISSET_ID);
   }
 
   public void setWriteToWalIsSet(boolean value) {
-    __isset_bit_vector.set(__WRITETOWAL_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITETOWAL_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -551,6 +553,7 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
     if (columnValues == null) {
       throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnValues' was not present! Struct: " + toString());
     }
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -564,7 +567,7 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
@@ -604,7 +607,7 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
                 struct.columnValues = new ArrayList<TColumnValue>(_list16.size);
                 for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                 {
-                  TColumnValue _elem18; // optional
+                  TColumnValue _elem18; // required
                   _elem18 = new TColumnValue();
                   _elem18.read(iprot);
                   struct.columnValues.add(_elem18);
@@ -725,7 +728,7 @@ public class TPut implements org.apache.thrift.TBase<TPut, TPut._Fields>, java.i
         struct.columnValues = new ArrayList<TColumnValue>(_list21.size);
         for (int _i22 = 0; _i22 < _list21.size; ++_i22)
         {
-          TColumnValue _elem23; // optional
+          TColumnValue _elem23; // required
           _elem23 = new TColumnValue();
           _elem23.read(iprot);
           struct.columnValues.add(_elem23);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TResult.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TResult.java
index f0fe2a0..b605159 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TResult.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TResult.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -391,6 +394,7 @@ public class TResult implements org.apache.thrift.TBase<TResult, TResult._Fields
     if (columnValues == null) {
       throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnValues' was not present! Struct: " + toString());
     }
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -442,7 +446,7 @@ public class TResult implements org.apache.thrift.TBase<TResult, TResult._Fields
                 struct.columnValues = new ArrayList<TColumnValue>(_list0.size);
                 for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                 {
-                  TColumnValue _elem2; // optional
+                  TColumnValue _elem2; // required
                   _elem2 = new TColumnValue();
                   _elem2.read(iprot);
                   struct.columnValues.add(_elem2);
@@ -530,7 +534,7 @@ public class TResult implements org.apache.thrift.TBase<TResult, TResult._Fields
         struct.columnValues = new ArrayList<TColumnValue>(_list5.size);
         for (int _i6 = 0; _i6 < _list5.size; ++_i6)
         {
-          TColumnValue _elem7; // optional
+          TColumnValue _elem7; // required
           _elem7 = new TColumnValue();
           _elem7.read(iprot);
           struct.columnValues.add(_elem7);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TScan.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TScan.java
index cbcdf91..df9ab59 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TScan.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TScan.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -130,7 +133,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   // isset id assignments
   private static final int __CACHING_ISSET_ID = 0;
   private static final int __MAXVERSIONS_ISSET_ID = 1;
-  private BitSet __isset_bit_vector = new BitSet(2);
+  private byte __isset_bitfield = 0;
   private _Fields optionals[] = {_Fields.START_ROW,_Fields.STOP_ROW,_Fields.COLUMNS,_Fields.CACHING,_Fields.MAX_VERSIONS,_Fields.TIME_RANGE};
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
@@ -161,8 +164,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
    * Performs a deep copy on <i>other</i>.
    */
   public TScan(TScan other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     if (other.isSetStartRow()) {
       this.startRow = org.apache.thrift.TBaseHelper.copyBinary(other.startRow);
 ;
@@ -319,16 +321,16 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   }
 
   public void unsetCaching() {
-    __isset_bit_vector.clear(__CACHING_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHING_ISSET_ID);
   }
 
   /** Returns true if field caching is set (has been assigned a value) and false otherwise */
   public boolean isSetCaching() {
-    return __isset_bit_vector.get(__CACHING_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __CACHING_ISSET_ID);
   }
 
   public void setCachingIsSet(boolean value) {
-    __isset_bit_vector.set(__CACHING_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHING_ISSET_ID, value);
   }
 
   public int getMaxVersions() {
@@ -342,16 +344,16 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   }
 
   public void unsetMaxVersions() {
-    __isset_bit_vector.clear(__MAXVERSIONS_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXVERSIONS_ISSET_ID);
   }
 
   /** Returns true if field maxVersions is set (has been assigned a value) and false otherwise */
   public boolean isSetMaxVersions() {
-    return __isset_bit_vector.get(__MAXVERSIONS_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __MAXVERSIONS_ISSET_ID);
   }
 
   public void setMaxVersionsIsSet(boolean value) {
-    __isset_bit_vector.set(__MAXVERSIONS_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXVERSIONS_ISSET_ID, value);
   }
 
   public TTimeRange getTimeRange() {
@@ -698,6 +700,10 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
 
   public void validate() throws org.apache.thrift.TException {
     // check for required fields
+    // check for sub-struct validity
+    if (timeRange != null) {
+      timeRange.validate();
+    }
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -711,7 +717,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
@@ -759,7 +765,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
                 struct.columns = new ArrayList<TColumn>(_list40.size);
                 for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                 {
-                  TColumn _elem42; // optional
+                  TColumn _elem42; // required
                   _elem42 = new TColumn();
                   _elem42.read(iprot);
                   struct.columns.add(_elem42);
@@ -937,7 +943,7 @@ public class TScan implements org.apache.thrift.TBase<TScan, TScan._Fields>, jav
           struct.columns = new ArrayList<TColumn>(_list45.size);
           for (int _i46 = 0; _i46 < _list45.size; ++_i46)
           {
-            TColumn _elem47; // optional
+            TColumn _elem47; // required
             _elem47 = new TColumn();
             _elem47.read(iprot);
             struct.columns.add(_elem47);
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TTimeRange.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TTimeRange.java
index 98058ea..ffac493 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TTimeRange.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TTimeRange.java
@@ -1,5 +1,5 @@
 /**
- * Autogenerated by Thrift Compiler (0.8.0)
+ * Autogenerated by Thrift Compiler (0.9.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -12,6 +12,9 @@ import org.apache.thrift.scheme.StandardScheme;
 
 import org.apache.thrift.scheme.TupleScheme;
 import org.apache.thrift.protocol.TTupleProtocol;
+import org.apache.thrift.protocol.TProtocolException;
+import org.apache.thrift.EncodingUtils;
+import org.apache.thrift.TException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -106,7 +109,7 @@ public class TTimeRange implements org.apache.thrift.TBase<TTimeRange, TTimeRang
   // isset id assignments
   private static final int __MINSTAMP_ISSET_ID = 0;
   private static final int __MAXSTAMP_ISSET_ID = 1;
-  private BitSet __isset_bit_vector = new BitSet(2);
+  private byte __isset_bitfield = 0;
   public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
   static {
     Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
@@ -136,8 +139,7 @@ public class TTimeRange implements org.apache.thrift.TBase<TTimeRange, TTimeRang
    * Performs a deep copy on <i>other</i>.
    */
   public TTimeRange(TTimeRange other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
+    __isset_bitfield = other.__isset_bitfield;
     this.minStamp = other.minStamp;
     this.maxStamp = other.maxStamp;
   }
@@ -165,16 +167,16 @@ public class TTimeRange implements org.apache.thrift.TBase<TTimeRange, TTimeRang
   }
 
   public void unsetMinStamp() {
-    __isset_bit_vector.clear(__MINSTAMP_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINSTAMP_ISSET_ID);
   }
 
   /** Returns true if field minStamp is set (has been assigned a value) and false otherwise */
   public boolean isSetMinStamp() {
-    return __isset_bit_vector.get(__MINSTAMP_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __MINSTAMP_ISSET_ID);
   }
 
   public void setMinStampIsSet(boolean value) {
-    __isset_bit_vector.set(__MINSTAMP_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINSTAMP_ISSET_ID, value);
   }
 
   public long getMaxStamp() {
@@ -188,16 +190,16 @@ public class TTimeRange implements org.apache.thrift.TBase<TTimeRange, TTimeRang
   }
 
   public void unsetMaxStamp() {
-    __isset_bit_vector.clear(__MAXSTAMP_ISSET_ID);
+    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXSTAMP_ISSET_ID);
   }
 
   /** Returns true if field maxStamp is set (has been assigned a value) and false otherwise */
   public boolean isSetMaxStamp() {
-    return __isset_bit_vector.get(__MAXSTAMP_ISSET_ID);
+    return EncodingUtils.testBit(__isset_bitfield, __MAXSTAMP_ISSET_ID);
   }
 
   public void setMaxStampIsSet(boolean value) {
-    __isset_bit_vector.set(__MAXSTAMP_ISSET_ID, value);
+    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXSTAMP_ISSET_ID, value);
   }
 
   public void setFieldValue(_Fields field, Object value) {
@@ -350,6 +352,7 @@ public class TTimeRange implements org.apache.thrift.TBase<TTimeRange, TTimeRang
     // check for required fields
     // alas, we cannot check 'minStamp' because it's a primitive and you chose the non-beans generator.
     // alas, we cannot check 'maxStamp' because it's a primitive and you chose the non-beans generator.
+    // check for sub-struct validity
   }
 
   private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -363,7 +366,7 @@ public class TTimeRange implements org.apache.thrift.TBase<TTimeRange, TTimeRang
   private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
     try {
       // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
-      __isset_bit_vector = new BitSet(1);
+      __isset_bitfield = 0;
       read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
     } catch (org.apache.thrift.TException te) {
       throw new java.io.IOException(te);
-- 
1.7.0.4

