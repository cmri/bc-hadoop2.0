From c1c6129212df7e47f6aebaf61ce902732ea822ce Mon Sep 17 00:00:00 2001
From: Jonathan Hsieh <jmhsieh@apache.org>
Date: Tue, 2 Apr 2013 18:50:37 +0000
Subject: [PATCH 55/96] HBASE-8192 Logic error causes infinite loop in HRegion.bulkLoadHFiles(List) (Chenghao Jiang)

git-svn-id: https://svn.apache.org/repos/asf/hbase/branches/0.94@1463666 13f79535-47bb-0310-9956-ffa450edef68

Reason: Bug, Usability
Author: Chenghao Jiang
Ref: CDH-11374
---
 .../apache/hadoop/hbase/regionserver/HRegion.java  |   15 +++----
 .../hbase/mapreduce/TestLoadIncrementalHFiles.java |   43 ++++++++++++++++++++
 2 files changed, 50 insertions(+), 8 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
index 71a6d4c..c027582 100644
--- a/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
+++ b/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
@@ -3544,7 +3544,6 @@ public class HRegion implements HeapSize { // , Writable{
           IOException ioe = new DoNotRetryIOException(
               "No such column family " + Bytes.toStringBinary(familyName));
           ioes.add(ioe);
-          failures.add(p);
         } else {
           try {
             store.assertBulkLoadHFileOk(new Path(path));
@@ -3558,6 +3557,13 @@ public class HRegion implements HeapSize { // , Writable{
         }
       }
 
+      // validation failed because of some sort of IO problem.
+      if (ioes.size() != 0) {
+        IOException e = MultipleIOException.createIOException(ioes);
+        LOG.error("There were one or more IO errors when checking if the bulk load is ok.", e);
+        throw e;
+      }
+
       // validation failed, bail out before doing anything permanent.
       if (failures.size() != 0) {
         StringBuilder list = new StringBuilder();
@@ -3571,13 +3577,6 @@ public class HRegion implements HeapSize { // , Writable{
         return false;
       }
 
-      // validation failed because of some sort of IO problem.
-      if (ioes.size() != 0) {
-        LOG.error("There were IO errors when checking if bulk load is ok.  " +
-            "throwing exception!");
-        throw MultipleIOException.createIOException(ioes);
-      }
-
       for (Pair<byte[], String> p : familyPaths) {
         byte[] familyName = p.getFirst();
         String path = p.getSecond();
diff --git a/src/test/java/org/apache/hadoop/hbase/mapreduce/TestLoadIncrementalHFiles.java b/src/test/java/org/apache/hadoop/hbase/mapreduce/TestLoadIncrementalHFiles.java
index 11df9c2..05abd3a 100644
--- a/src/test/java/org/apache/hadoop/hbase/mapreduce/TestLoadIncrementalHFiles.java
+++ b/src/test/java/org/apache/hadoop/hbase/mapreduce/TestLoadIncrementalHFiles.java
@@ -157,6 +157,49 @@ public class TestLoadIncrementalHFiles {
     assertEquals(expectedRows, util.countRows(table));
   }
 
+  /**
+   * Test loading into a column family that does not exist.
+   */
+  @Test
+  public void testNonexistentColumnFamilyLoad() throws Exception {
+    String testName = "testNonexistentColumnFamilyLoad";
+    byte[][][] hfileRanges = new byte[][][] {
+      new byte[][]{ Bytes.toBytes("aaa"), Bytes.toBytes("ccc") },
+      new byte[][]{ Bytes.toBytes("ddd"), Bytes.toBytes("ooo") },
+    }; 
+
+    Path dir = util.getDataTestDir(testName);
+    FileSystem fs = util.getTestFileSystem();
+    dir = dir.makeQualified(fs);
+    Path familyDir = new Path(dir, Bytes.toString(FAMILY));
+
+    int hfileIdx = 0;
+    for (byte[][] range : hfileRanges) {
+      byte[] from = range[0];
+      byte[] to = range[1];
+      createHFile(util.getConfiguration(), fs, new Path(familyDir, "hfile_"
+          + hfileIdx++), FAMILY, QUALIFIER, from, to, 1000);
+    }
+
+    final byte[] TABLE = Bytes.toBytes("mytable_"+testName);
+
+    HBaseAdmin admin = new HBaseAdmin(util.getConfiguration());
+    HTableDescriptor htd = new HTableDescriptor(TABLE);
+    admin.createTable(htd, SPLIT_KEYS);
+
+    HTable table = new HTable(util.getConfiguration(), TABLE);
+    util.waitTableAvailable(TABLE, 30000);
+    LoadIncrementalHFiles loader = new LoadIncrementalHFiles(util.getConfiguration(), false);
+    try {
+      loader.doBulkLoad(dir, table);
+      assertTrue("Loading into table with non-existent family should have failed", false);
+    } catch (Exception e) {
+      assertTrue("IOException expected", e instanceof IOException);
+    }
+    table.close();
+    admin.close();
+  }
+
   @Test
   public void testSplitStoreFile() throws IOException {
     Path dir = util.getDataTestDir("testSplitHFile");
-- 
1.7.0.4

