From d6199fd14678f2387b321d2d9254319e4bb43bc9 Mon Sep 17 00:00:00 2001
From: David S. Wang <dsw@cloudera.com>
Date: Wed, 27 Mar 2013 09:04:32 -0700
Subject: [PATCH 15/96] HBASE-6921 String and ConcurrentHashMap sizes change on jdk7; makes TestHeapSize fail

Reason: Bug
Author: Michael Stack
Ref: CDH-8900
(cherry picked from commit 61081c100ab0cc228867b42983be2189337a0091)
---
 .../org/apache/hadoop/hbase/util/ClassSize.java    |   12 +++++++++---
 .../org/apache/hadoop/hbase/io/TestHeapSize.java   |   18 ++++++++++++++++++
 2 files changed, 27 insertions(+), 3 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/util/ClassSize.java b/src/main/java/org/apache/hadoop/hbase/util/ClassSize.java
index e184730..334edf3 100755
--- a/src/main/java/org/apache/hadoop/hbase/util/ClassSize.java
+++ b/src/main/java/org/apache/hadoop/hbase/util/ClassSize.java
@@ -20,6 +20,8 @@
 
 package org.apache.hadoop.hbase.util;
 
+import java.util.concurrent.ConcurrentHashMap;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -127,10 +129,14 @@ public class ClassSize {
 
     TREEMAP = align(OBJECT + (2 * Bytes.SIZEOF_INT) + align(7 * REFERENCE));
 
-    STRING = align(OBJECT + ARRAY + REFERENCE + 3 * Bytes.SIZEOF_INT);
+    // STRING is different size in jdk6 and jdk7. Just use what we estimate as size rather than
+    // have a conditional on whether jdk7.
+    STRING = (int) estimateBase(String.class, false);
 
-    CONCURRENT_HASHMAP = align((2 * Bytes.SIZEOF_INT) + ARRAY +
-        (6 * REFERENCE) + OBJECT);
+    // CONCURRENT_HASHMAP is different size in jdk6 and jdk7; it looks like its different between
+    // 23.6-b03 and 23.0-b21. Just use what we estimate as size rather than have a conditional on
+    // whether jdk7.
+    CONCURRENT_HASHMAP = (int) estimateBase(ConcurrentHashMap.class, false);
 
     CONCURRENT_HASHMAP_ENTRY = align(REFERENCE + OBJECT + (3 * REFERENCE) +
         (2 * Bytes.SIZEOF_INT));
diff --git a/src/test/java/org/apache/hadoop/hbase/io/TestHeapSize.java b/src/test/java/org/apache/hadoop/hbase/io/TestHeapSize.java
index a3c9ae9..50c96a6 100644
--- a/src/test/java/org/apache/hadoop/hbase/io/TestHeapSize.java
+++ b/src/test/java/org/apache/hadoop/hbase/io/TestHeapSize.java
@@ -24,6 +24,7 @@ import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.TreeMap;
+import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentSkipListMap;
 import java.util.concurrent.CopyOnWriteArrayList;
@@ -50,6 +51,9 @@ import org.apache.hadoop.hbase.regionserver.metrics.SchemaConfigured;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.ClassSize;
 import org.junit.experimental.categories.Category;
+import org.junit.BeforeClass;
+import java.lang.management.ManagementFactory;
+import java.lang.management.RuntimeMXBean;
 
 /**
  * Testing the sizing that HeapSize offers and compares to the size given by
@@ -61,6 +65,20 @@ public class TestHeapSize extends TestCase {
   // List of classes implementing HeapSize
   // BatchOperation, BatchUpdate, BlockIndex, Entry, Entry<K,V>, HStoreKey
   // KeyValue, LruBlockCache, LruHashMap<K,V>, Put, HLogKey
+  
+  @BeforeClass
+  public void beforeClass() throws Exception {
+    // Print detail on jvm so we know what is different should below test fail.
+    RuntimeMXBean b = ManagementFactory.getRuntimeMXBean();
+    LOG.info("name=" + b.getName());
+    LOG.info("specname=" + b.getSpecName());
+    LOG.info("specvendor=" + b.getSpecVendor());
+    LOG.info("vmname=" + b.getVmName());
+    LOG.info("vmversion=" + b.getVmVersion());
+    LOG.info("vmvendor=" + b.getVmVendor());
+    Map<String, String> p = b.getSystemProperties();
+    LOG.info("properties=" + p);
+  }
 
   /**
    * Test our hard-coded sizing of native java objects
-- 
1.7.0.4

