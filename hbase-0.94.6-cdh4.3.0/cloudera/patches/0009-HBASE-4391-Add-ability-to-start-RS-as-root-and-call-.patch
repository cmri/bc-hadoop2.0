From 18f0d0d858d3d7d683d3d6a5d9f1ecb4c6b863d2 Mon Sep 17 00:00:00 2001
From: David S. Wang <dsw@cloudera.com>
Date: Wed, 27 Mar 2013 08:49:56 -0700
Subject: [PATCH 09/96] HBASE-4391 Add ability to start RS as root and call mlockall

Reason: Improvement
Author: Matteo Bertozzi
Ref: CDH-3622
(cherry picked from commit f284bee8d2320d7b5fa573dcd6d5501948a5482f)
---
 bin/hbase-config.sh                                |   18 +++
 conf/hbase-env.sh                                  |    4 +
 pom.xml                                            |   40 ++++++
 src/main/native/CMakeLists.txt                     |   35 +++++
 .../native/src/mlockall_agent/mlockall_agent.c     |  148 ++++++++++++++++++++
 5 files changed, 245 insertions(+), 0 deletions(-)
 create mode 100644 src/main/native/CMakeLists.txt
 create mode 100644 src/main/native/src/mlockall_agent/mlockall_agent.c

diff --git a/bin/hbase-config.sh b/bin/hbase-config.sh
index 1f25713..c5cbbc4 100644
--- a/bin/hbase-config.sh
+++ b/bin/hbase-config.sh
@@ -81,6 +81,24 @@ if [ -f "${HBASE_CONF_DIR}/hbase-env.sh" ]; then
   . "${HBASE_CONF_DIR}/hbase-env.sh"
 fi
 
+# Set default value for regionserver uid if not present
+if [ -z "$HBASE_REGIONSERVER_UID" ]; then
+  HBASE_REGIONSERVER_UID="hbase"
+fi
+
+# Verify if hbase has the mlock agent
+if [ "$HBASE_REGIONSERVER_MLOCK" = "true" ]; then
+  MLOCK_AGENT="$HBASE_HOME/native/libmlockall_agent.so"
+  if [ ! -f "$MLOCK_AGENT" ]; then
+    cat 1>&2 <<EOF
+Unable to find mlockall_agent, hbase must be compiled with -Pnative
+EOF
+    exit 1
+  fi  
+
+  HBASE_REGIONSERVER_OPTS="$HBASE_REGIONSERVER_OPTS -agentpath:$MLOCK_AGENT=user=$HBASE_REGIONSERVER_UID"
+fi
+
 # Newer versions of glibc use an arena memory allocator that causes virtual
 # memory usage to explode. Tune the variable down to prevent vmem explosion.
 export MALLOC_ARENA_MAX=${MALLOC_ARENA_MAX:-4}
diff --git a/conf/hbase-env.sh b/conf/hbase-env.sh
index 497e048..7b5d0fd 100644
--- a/conf/hbase-env.sh
+++ b/conf/hbase-env.sh
@@ -73,6 +73,10 @@ export HBASE_OPTS="-XX:+UseConcMarkSweepGC"
 # File naming hosts on which HRegionServers will run.  $HBASE_HOME/conf/regionservers by default.
 # export HBASE_REGIONSERVERS=${HBASE_HOME}/conf/regionservers
 
+# Uncomment and adjust to keep all the Region Server pages mapped to be memory resident
+#HBASE_REGIONSERVER_MLOCK=true
+#HBASE_REGIONSERVER_UID="hbase"
+
 # File naming hosts on which backup HMaster will run.  $HBASE_HOME/conf/backup-masters by default.
 # export HBASE_BACKUP_MASTERS=${HBASE_HOME}/conf/backup-masters
 
diff --git a/pom.xml b/pom.xml
index ed71b4d..2f62d8d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -904,6 +904,12 @@
                     if [ `ls $BUILD_DIR/nativelib | wc -l` -ne 0 ]; then
                       cp -PR $BUILD_DIR/nativelib/lib* $BUILD_DIR/${project.build.finalName}/${project.build.finalName}/lib/native/${build.platform}
                     fi
+                    if [ -d ${project.build.directory}/native ]; then 
+                      if [ `ls ${project.build.directory}/native | wc -l` -ne 0 ]; then 
+                        mkdir -p ${project.build.directory}/${project.build.finalName}/${project.build.finalName}/native
+                        cp -P ${project.build.directory}/native/lib*.so ${project.build.directory}/${project.build.finalName}/${project.build.finalName}/native
+                      fi   
+                    fi
                 </echo>
                 <exec executable="sh" dir="${project.build.directory}" failonerror="true">
                     <arg line="./copynativelibs.sh"/>
@@ -1571,6 +1577,40 @@
       </build>
     </profile>
 
+    <profile>
+      <id>native</id>
+      <activation>
+        <activeByDefault>false</activeByDefault>
+      </activation>
+      <build>
+        <plugins>
+          <plugin>
+            <groupId>org.apache.maven.plugins</groupId>
+            <artifactId>maven-antrun-plugin</artifactId>
+            <executions>
+              <execution>
+                <id>make</id>
+                <phase>compile</phase>
+                <goals><goal>run</goal></goals>
+                <configuration>
+                  <target>
+                    <mkdir dir="${project.build.directory}/native"/>
+                    <exec executable="cmake" dir="${project.build.directory}/native"
+                        failonerror="true">
+                      <arg line="${basedir}/src/main/native -DJVM_ARCH_DATA_MODEL=${sun.arch.data.model}"/>
+                    </exec>
+                    <exec executable="make" dir="${project.build.directory}/native" failonerror="true">
+                      <arg line="VERBOSE=1"/>
+                    </exec>
+                  </target>
+                </configuration>
+              </execution>
+            </executions>
+          </plugin>
+        </plugins>
+      </build>
+    </profile>
+
     <!-- profile for building against Hadoop 1.0.x: This is the default. -->
     <profile>
       <id>hadoop-1.0</id>
diff --git a/src/main/native/CMakeLists.txt b/src/main/native/CMakeLists.txt
new file mode 100644
index 0000000..1fc3052
--- /dev/null
+++ b/src/main/native/CMakeLists.txt
@@ -0,0 +1,35 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+cmake_minimum_required(VERSION 2.6 FATAL_ERROR)
+
+# If JVM_ARCH_DATA_MODEL is 32, compile all binaries as 32-bit.
+# This variable is set by maven.
+if (JVM_ARCH_DATA_MODEL EQUAL 32)
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32")
+    set(CMAKE_LD_FLAGS "${CMAKE_LD_FLAGS} -m32")
+    if (CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "amd64")
+        set(CMAKE_SYSTEM_PROCESSOR "i686")
+    endif ()
+endif (JVM_ARCH_DATA_MODEL EQUAL 32)
+
+FIND_PACKAGE(JNI REQUIRED)
+INCLUDE_DIRECTORIES(${JAVA_INCLUDE_PATH})
+INCLUDE_DIRECTORIES(${JAVA_INCLUDE_PATH2})
+
+add_library (mlockall_agent SHARED src/mlockall_agent/mlockall_agent.c)
diff --git a/src/main/native/src/mlockall_agent/mlockall_agent.c b/src/main/native/src/mlockall_agent/mlockall_agent.c
new file mode 100644
index 0000000..0817cf8
--- /dev/null
+++ b/src/main/native/src/mlockall_agent/mlockall_agent.c
@@ -0,0 +1,148 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * mlockall_agent is a simple VM Agent that allows to lock the address space of
+ * the process. This avoids the process' memory eviction under pressure.
+ *
+ * One example is when on the same machine you run the Region Server and
+ * some map-reduce tasks, some unused data in the region server may get swapped
+ * and this affects the region server performance.
+ *
+ * You can load the agent by adding it as a jvm option:
+ * export HBASE_REGIONSERVER_OPTS="-agentpath:./libmlockall_agent.so=user=hbase"
+ */
+
+#include <libgen.h>
+#include <grp.h>
+#include <pwd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/mman.h>
+#include <sys/resource.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include "jvmti.h"
+
+typedef struct opts {
+  char *setuid_user;
+} opts_t;
+
+#define PREFIX "mlockall_agent: "
+#define LOG(fmt, ...) { fprintf(stderr, PREFIX fmt, #__VA_ARGS__); }
+
+static int parse_options (const char *options, opts_t *parsed) {
+  char *optr, *opts_dup;
+  char *save2 = NULL;
+  char *save = NULL;
+  char *key, *val;
+  int ret = 0;
+  char *tok;
+
+  memset(parsed, 0, sizeof(opts_t));
+  if ((opts_dup = strdup(options)) == NULL)
+    return(-1);
+
+  optr = opts_dup;
+  while ((tok = strtok_r(optr, ",", &save)) != NULL) {
+    optr = NULL;
+    save2 = NULL;
+
+    key = strtok_r(tok, "=", &save2);
+    val = strtok_r(NULL, "=", &save2);
+    if (!strcmp(key, "user")) {
+      parsed->setuid_user = strdup(val);
+    } else {
+      LOG("Unknown agent parameter '%s'\n", key);
+      ret = 1;
+    }
+  }
+
+  free(opts_dup);
+  return(ret);
+}
+
+static void warn_unless_root() {
+  if (geteuid() != 0) {
+    LOG("(this may be because java was not run as root!)\n");
+  }
+}
+
+JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *init_str, void *reserved) {
+  struct passwd *pwd = NULL;
+  opts_t opts;
+
+  if (parse_options(init_str, &opts)) {
+    return(1);
+  }
+
+  // Check that the target user for setuid is specified if current user is root
+  if (opts.setuid_user == NULL) {
+    LOG("Unable to setuid: specify a target username as the agent option user=<username>\n");
+    return(1);
+  }
+
+  // Check that this user exists
+  if ((pwd = getpwnam(opts.setuid_user)) == NULL) {
+    LOG("Unable to setuid: could not find user '%s'\n", opts.setuid_user);
+    return(1);
+  }
+
+  // Boost the mlock limit up to infinity
+  struct rlimit lim;
+  lim.rlim_max = RLIM_INFINITY;
+  lim.rlim_cur = lim.rlim_max;
+  if (setrlimit(RLIMIT_MEMLOCK, &lim)) {
+    perror(PREFIX "Unable to boost memlock resource limit");
+    warn_unless_root();
+    return(1);
+  }
+
+  // Actually lock our memory, including future allocations.
+  if (mlockall(MCL_CURRENT | MCL_FUTURE)) {
+    perror(PREFIX "Unable to lock memory");
+    warn_unless_root();
+    return(1);
+  }
+
+  // Drop down to the user's supplemental group list
+  if (initgroups(opts.setuid_user, pwd->pw_gid)) {
+    perror(PREFIX "Unable to initgroups");
+    warn_unless_root();
+    return(1);
+  }
+
+  // And primary group ID
+  if (setgid(pwd->pw_gid)) {
+    perror(PREFIX "Unable to setgid");
+    warn_unless_root();
+    return(1);
+  }
+
+  // And user ID
+  if (setuid(pwd->pw_uid)) {
+    perror(PREFIX "Unable to setuid");
+    warn_unless_root();
+    return(1);
+  }
+
+  LOG("Successfully locked memory and setuid to %s\n", opts.setuid_user);
+  return(0);
+}
+
-- 
1.7.0.4

