From 113f3b08b99bf9dfd647c3e6cd987870e3032d77 Mon Sep 17 00:00:00 2001
From: Aaron T. Myers <atm@cloudera.com>
Date: Tue, 22 May 2012 16:18:29 -0700
Subject: [PATCH 1154/1357] MR1: MAPREDUCE-2839. MR Jobs fail on a secure cluster with viewfs

Reason: Bug
Author: Siddharth Seth
Ref: CDH-5610
---
 .../hadoop/mapreduce/security/TokenCache.java      |   12 ++++++
 .../hadoop/mapreduce/security/TestTokenCache.java  |   41 ++++++++++++++++++++
 2 files changed, 53 insertions(+), 0 deletions(-)

diff --git a/src/mapred/org/apache/hadoop/mapreduce/security/TokenCache.java b/src/mapred/org/apache/hadoop/mapreduce/security/TokenCache.java
index c7d8db1..7844688 100644
--- a/src/mapred/org/apache/hadoop/mapreduce/security/TokenCache.java
+++ b/src/mapred/org/apache/hadoop/mapreduce/security/TokenCache.java
@@ -20,6 +20,7 @@ package org.apache.hadoop.mapreduce.security;
 
 import java.io.IOException;
 import java.net.URI;
+import java.util.List;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -125,6 +126,17 @@ public class TokenCache {
             continue;
           }
         }
+        List<Token<?>> tokens =
+          fs.getDelegationTokens(delegTokenRenewer, credentials);
+        if (tokens != null) {
+          for (Token<?> token : tokens) {
+            credentials.addToken(token.getService(), token);
+            LOG.info("Got dt for " + fs.getUri() + ";uri="+ fsName + 
+                ";t.service="+token.getService());
+          }
+        }
+        //Call getDelegationToken as well for now - for FS implementations
+        // which may not have implmented getDelegationTokens (hftp)
         Token<?> token = fs.getDelegationToken(delegTokenRenewer);
         if (token != null) {
           credentials.addToken(token.getService(), token);
diff --git a/src/test/org/apache/hadoop/mapreduce/security/TestTokenCache.java b/src/test/org/apache/hadoop/mapreduce/security/TestTokenCache.java
index edd3368..057585f 100644
--- a/src/test/org/apache/hadoop/mapreduce/security/TestTokenCache.java
+++ b/src/test/org/apache/hadoop/mapreduce/security/TestTokenCache.java
@@ -27,10 +27,13 @@ import static org.junit.Assert.fail;
 import java.io.File;
 import java.io.IOException;
 import java.net.URI;
+import java.net.URISyntaxException;
 import java.security.NoSuchAlgorithmException;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.List;
 
 import javax.crypto.KeyGenerator;
 import javax.crypto.spec.SecretKeySpec;
@@ -65,6 +68,10 @@ import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+import org.mockito.Mockito;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+
 
 public class TestTokenCache {
   private static final int NUM_OF_KEYS = 10;
@@ -298,5 +305,39 @@ public class TestTokenCache {
     assertNull(conf.get(TokenCache.MAPREDUCE_JOB_CREDENTIALS_BINARY));
   }
 
+  @Test
+  public void testGetTokensForViewFS() throws IOException, URISyntaxException {
+    Configuration conf = new Configuration(jConf);
+    FileSystem dfs = dfsCluster.getFileSystem();
+    String serviceName = dfs.getCanonicalServiceName();
+
+    Path p1 = new Path("/mount1");
+    Path p2 = new Path("/mount2");
+    p1 = dfs.makeQualified(p1);
+    p2 = dfs.makeQualified(p2);
 
+    conf.set("fs.viewfs.mounttable.default.link./dir1", p1.toString());
+    conf.set("fs.viewfs.mounttable.default.link./dir2", p2.toString());
+    Credentials credentials = new Credentials();
+    Path lp1 = new Path("viewfs:///dir1");
+    Path lp2 = new Path("viewfs:///dir2");
+    Path[] paths = new Path[2];
+    paths[0] = lp1;
+    paths[1] = lp2;
+    TokenCache.obtainTokensForNamenodesInternal(credentials, paths, conf);
+
+    Collection<Token<? extends TokenIdentifier>> tns =
+        credentials.getAllTokens();
+    assertEquals("number of tokens is not 1", 1, tns.size());
+
+    boolean found = false;
+    for (Token<? extends TokenIdentifier> tt : tns) {
+      System.out.println("token=" + tt);
+      if (tt.getKind().equals(DelegationTokenIdentifier.HDFS_DELEGATION_KIND)
+          && tt.getService().equals(new Text(serviceName))) {
+        found = true;
+      }
+      assertTrue("didn't find token for [" + lp1 + ", " + lp2 + "]", found);
+    }
+  }
 }
-- 
1.7.0.4

