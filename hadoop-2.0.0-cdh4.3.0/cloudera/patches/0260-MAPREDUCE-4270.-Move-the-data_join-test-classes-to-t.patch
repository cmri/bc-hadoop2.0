From 2fa533e541fbd67a9d3c296fe458aead9e299e30 Mon Sep 17 00:00:00 2001
From: Siddharth Seth <sseth@apache.org>
Date: Tue, 19 Jun 2012 21:51:15 +0000
Subject: [PATCH 0260/1357] MAPREDUCE-4270. Move the data_join test classes to the correct path. (Contributed by Thomas Graves)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1351869 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 0a18589197c3c556c2465493094d5b243738a805)
---
 .../hadoop-datajoin/src/test/java/README.txt       |   50 ----------------
 .../src/test/java/SampleDataJoinMapper.java        |   54 ------------------
 .../src/test/java/SampleDataJoinReducer.java       |   58 -------------------
 .../src/test/java/SampleTaggedMapOutput.java       |   60 --------------------
 .../apache/hadoop/contrib/utils/join/README.txt    |   50 ++++++++++++++++
 .../contrib/utils/join/SampleDataJoinMapper.java   |   54 ++++++++++++++++++
 .../contrib/utils/join/SampleDataJoinReducer.java  |   58 +++++++++++++++++++
 .../contrib/utils/join/SampleTaggedMapOutput.java  |   60 ++++++++++++++++++++
 8 files changed, 222 insertions(+), 222 deletions(-)
 delete mode 100644 hadoop-tools/hadoop-datajoin/src/test/java/README.txt
 delete mode 100644 hadoop-tools/hadoop-datajoin/src/test/java/SampleDataJoinMapper.java
 delete mode 100644 hadoop-tools/hadoop-datajoin/src/test/java/SampleDataJoinReducer.java
 delete mode 100644 hadoop-tools/hadoop-datajoin/src/test/java/SampleTaggedMapOutput.java
 create mode 100644 hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/README.txt
 create mode 100644 hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/SampleDataJoinMapper.java
 create mode 100644 hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/SampleDataJoinReducer.java
 create mode 100644 hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/SampleTaggedMapOutput.java

diff --git a/hadoop-tools/hadoop-datajoin/src/test/java/README.txt b/hadoop-tools/hadoop-datajoin/src/test/java/README.txt
deleted file mode 100644
index 73fd6ef..0000000
--- a/hadoop-tools/hadoop-datajoin/src/test/java/README.txt
+++ /dev/null
@@ -1,50 +0,0 @@
-*************************************************
-*** Input Files (Note: tab-separated columns) ***
-*************************************************
-[:~]$ cat datajoin/input/A
-A.a11   A.a12
-A.a21   A.a22
-B.a21   A.a32
-A.a31   A.a32
-B.a31   A.a32
-
-[:~]$ cat datajoin/input/B
-A.a11   B.a12
-A.a11   B.a13
-B.a11   B.a12
-B.a21   B.a22
-A.a31   B.a32
-B.a31   B.a32
-
-
-*****************************
-*** Invoke SampleDataJoin ***
-*****************************
-[:~]$ $HADOOP_PREFIX/bin/hadoop jar hadoop-datajoin-examples.jar org.apache.hadoop.contrib.utils.join.DataJoinJob datajoin/input datajoin/output Text 1 org.apache.hadoop.contrib.utils.join.SampleDataJoinMapper org.apache.hadoop.contrib.utils.join.SampleDataJoinReducer org.apache.hadoop.contrib.utils.join.SampleTaggedMapOutput Text
-Using TextInputFormat: Text
-Using TextOutputFormat: Text
-07/06/01 19:58:23 INFO mapred.FileInputFormat: Total input paths to process : 2
-Job job_kkzk08 is submitted
-Job job_kkzk08 is still running.
-07/06/01 19:58:24 INFO mapred.LocalJobRunner: collectedCount    5
-totalCount      5
-
-07/06/01 19:58:24 INFO mapred.LocalJobRunner: collectedCount    6
-totalCount      6
-
-07/06/01 19:58:24 INFO datajoin.job: key: A.a11 this.largestNumOfValues: 3
-07/06/01 19:58:24 INFO mapred.LocalJobRunner: actuallyCollectedCount    5
-collectedCount  7
-groupCount      6
- > reduce
-
-
-*******************
-*** Output File ***
-*******************
-[:~]$ cat datajoin/output/part-00000  
-A.a11   A.a12   B.a12
-A.a11   A.a12   B.a13
-A.a31   A.a32   B.a32
-B.a21   A.a32   B.a22
-B.a31   A.a32   B.a32
diff --git a/hadoop-tools/hadoop-datajoin/src/test/java/SampleDataJoinMapper.java b/hadoop-tools/hadoop-datajoin/src/test/java/SampleDataJoinMapper.java
deleted file mode 100644
index 3f1d4f0..0000000
--- a/hadoop-tools/hadoop-datajoin/src/test/java/SampleDataJoinMapper.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.contrib.utils.join;
-
-import org.apache.hadoop.io.Text;
-
-import org.apache.hadoop.contrib.utils.join.DataJoinMapperBase;
-import org.apache.hadoop.contrib.utils.join.TaggedMapOutput;
-import org.apache.hadoop.contrib.utils.join.SampleTaggedMapOutput;
-
-/**
- * This is a subclass of DataJoinMapperBase that is used to
- * demonstrate the functionality of INNER JOIN between 2 data
- * sources (TAB separated text files) based on the first column.
- */
-public class SampleDataJoinMapper extends DataJoinMapperBase {
-
-
-  protected Text generateInputTag(String inputFile) {
-    // tag the row with input file name (data source)
-    return new Text(inputFile);
-  }
-
-  protected Text generateGroupKey(TaggedMapOutput aRecord) {
-    // first column in the input tab separated files becomes the key (to perform the JOIN)
-    String line = ((Text) aRecord.getData()).toString();
-    String groupKey = "";
-    String[] tokens = line.split("\\t", 2);
-    groupKey = tokens[0];
-    return new Text(groupKey);
-  }
-
-  protected TaggedMapOutput generateTaggedMapOutput(Object value) {
-    TaggedMapOutput retv = new SampleTaggedMapOutput((Text) value);
-    retv.setTag(new Text(this.inputTag));
-    return retv;
-  }
-}
diff --git a/hadoop-tools/hadoop-datajoin/src/test/java/SampleDataJoinReducer.java b/hadoop-tools/hadoop-datajoin/src/test/java/SampleDataJoinReducer.java
deleted file mode 100644
index f8eb00d..0000000
--- a/hadoop-tools/hadoop-datajoin/src/test/java/SampleDataJoinReducer.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.contrib.utils.join;
-
-import org.apache.hadoop.io.Text;
-
-import org.apache.hadoop.contrib.utils.join.DataJoinReducerBase;
-import org.apache.hadoop.contrib.utils.join.TaggedMapOutput;
-
-/**
- * This is a subclass of DataJoinReducerBase that is used to
- * demonstrate the functionality of INNER JOIN between 2 data
- * sources (TAB separated text files) based on the first column.
- */
-public class SampleDataJoinReducer extends DataJoinReducerBase {
-
-  /**
-   * 
-   * @param tags
-   *          a list of source tags
-   * @param values
-   *          a value per source
-   * @return combined value derived from values of the sources
-   */
-  protected TaggedMapOutput combine(Object[] tags, Object[] values) {
-    // eliminate rows which didnot match in one of the two tables (for INNER JOIN)
-    if (tags.length < 2)
-       return null;  
-    String joinedStr = ""; 
-    for (int i=0; i<tags.length; i++) {
-      if (i > 0)
-         joinedStr += "\t";
-      // strip first column as it is the key on which we joined
-      String line = ((Text) (((TaggedMapOutput) values[i]).getData())).toString();
-      String[] tokens = line.split("\\t", 2);
-      joinedStr += tokens[1];
-    }
-    TaggedMapOutput retv = new SampleTaggedMapOutput(new Text(joinedStr));
-    retv.setTag((Text) tags[0]); 
-    return retv;
-  }
-}
diff --git a/hadoop-tools/hadoop-datajoin/src/test/java/SampleTaggedMapOutput.java b/hadoop-tools/hadoop-datajoin/src/test/java/SampleTaggedMapOutput.java
deleted file mode 100644
index 59f1bd1..0000000
--- a/hadoop-tools/hadoop-datajoin/src/test/java/SampleTaggedMapOutput.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.contrib.utils.join;
-
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-
-import org.apache.hadoop.io.Writable;
-import org.apache.hadoop.io.Text;
-
-import org.apache.hadoop.contrib.utils.join.TaggedMapOutput;
-
-/**
- * This is a subclass of TaggedMapOutput that is used to
- * demonstrate the functionality of INNER JOIN between 2 data
- * sources (TAB separated text files) based on the first column.
- */
-public class SampleTaggedMapOutput extends TaggedMapOutput {
-
-  private Text data;
-
-  public SampleTaggedMapOutput() {
-    this.data = new Text("");
-  }
-
-  public SampleTaggedMapOutput(Text data) {
-    this.data = data;
-  }
-
-  public Writable getData() {
-    return data;
-  }
-
-  public void write(DataOutput out) throws IOException {
-    this.tag.write(out);
-    this.data.write(out);
-  }
-
-  public void readFields(DataInput in) throws IOException {
-    this.tag.readFields(in);
-    this.data.readFields(in);
-  }
-}
diff --git a/hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/README.txt b/hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/README.txt
new file mode 100644
index 0000000..73fd6ef
--- /dev/null
+++ b/hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/README.txt
@@ -0,0 +1,50 @@
+*************************************************
+*** Input Files (Note: tab-separated columns) ***
+*************************************************
+[:~]$ cat datajoin/input/A
+A.a11   A.a12
+A.a21   A.a22
+B.a21   A.a32
+A.a31   A.a32
+B.a31   A.a32
+
+[:~]$ cat datajoin/input/B
+A.a11   B.a12
+A.a11   B.a13
+B.a11   B.a12
+B.a21   B.a22
+A.a31   B.a32
+B.a31   B.a32
+
+
+*****************************
+*** Invoke SampleDataJoin ***
+*****************************
+[:~]$ $HADOOP_PREFIX/bin/hadoop jar hadoop-datajoin-examples.jar org.apache.hadoop.contrib.utils.join.DataJoinJob datajoin/input datajoin/output Text 1 org.apache.hadoop.contrib.utils.join.SampleDataJoinMapper org.apache.hadoop.contrib.utils.join.SampleDataJoinReducer org.apache.hadoop.contrib.utils.join.SampleTaggedMapOutput Text
+Using TextInputFormat: Text
+Using TextOutputFormat: Text
+07/06/01 19:58:23 INFO mapred.FileInputFormat: Total input paths to process : 2
+Job job_kkzk08 is submitted
+Job job_kkzk08 is still running.
+07/06/01 19:58:24 INFO mapred.LocalJobRunner: collectedCount    5
+totalCount      5
+
+07/06/01 19:58:24 INFO mapred.LocalJobRunner: collectedCount    6
+totalCount      6
+
+07/06/01 19:58:24 INFO datajoin.job: key: A.a11 this.largestNumOfValues: 3
+07/06/01 19:58:24 INFO mapred.LocalJobRunner: actuallyCollectedCount    5
+collectedCount  7
+groupCount      6
+ > reduce
+
+
+*******************
+*** Output File ***
+*******************
+[:~]$ cat datajoin/output/part-00000  
+A.a11   A.a12   B.a12
+A.a11   A.a12   B.a13
+A.a31   A.a32   B.a32
+B.a21   A.a32   B.a22
+B.a31   A.a32   B.a32
diff --git a/hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/SampleDataJoinMapper.java b/hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/SampleDataJoinMapper.java
new file mode 100644
index 0000000..3f1d4f0
--- /dev/null
+++ b/hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/SampleDataJoinMapper.java
@@ -0,0 +1,54 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.contrib.utils.join;
+
+import org.apache.hadoop.io.Text;
+
+import org.apache.hadoop.contrib.utils.join.DataJoinMapperBase;
+import org.apache.hadoop.contrib.utils.join.TaggedMapOutput;
+import org.apache.hadoop.contrib.utils.join.SampleTaggedMapOutput;
+
+/**
+ * This is a subclass of DataJoinMapperBase that is used to
+ * demonstrate the functionality of INNER JOIN between 2 data
+ * sources (TAB separated text files) based on the first column.
+ */
+public class SampleDataJoinMapper extends DataJoinMapperBase {
+
+
+  protected Text generateInputTag(String inputFile) {
+    // tag the row with input file name (data source)
+    return new Text(inputFile);
+  }
+
+  protected Text generateGroupKey(TaggedMapOutput aRecord) {
+    // first column in the input tab separated files becomes the key (to perform the JOIN)
+    String line = ((Text) aRecord.getData()).toString();
+    String groupKey = "";
+    String[] tokens = line.split("\\t", 2);
+    groupKey = tokens[0];
+    return new Text(groupKey);
+  }
+
+  protected TaggedMapOutput generateTaggedMapOutput(Object value) {
+    TaggedMapOutput retv = new SampleTaggedMapOutput((Text) value);
+    retv.setTag(new Text(this.inputTag));
+    return retv;
+  }
+}
diff --git a/hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/SampleDataJoinReducer.java b/hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/SampleDataJoinReducer.java
new file mode 100644
index 0000000..f8eb00d
--- /dev/null
+++ b/hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/SampleDataJoinReducer.java
@@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.contrib.utils.join;
+
+import org.apache.hadoop.io.Text;
+
+import org.apache.hadoop.contrib.utils.join.DataJoinReducerBase;
+import org.apache.hadoop.contrib.utils.join.TaggedMapOutput;
+
+/**
+ * This is a subclass of DataJoinReducerBase that is used to
+ * demonstrate the functionality of INNER JOIN between 2 data
+ * sources (TAB separated text files) based on the first column.
+ */
+public class SampleDataJoinReducer extends DataJoinReducerBase {
+
+  /**
+   * 
+   * @param tags
+   *          a list of source tags
+   * @param values
+   *          a value per source
+   * @return combined value derived from values of the sources
+   */
+  protected TaggedMapOutput combine(Object[] tags, Object[] values) {
+    // eliminate rows which didnot match in one of the two tables (for INNER JOIN)
+    if (tags.length < 2)
+       return null;  
+    String joinedStr = ""; 
+    for (int i=0; i<tags.length; i++) {
+      if (i > 0)
+         joinedStr += "\t";
+      // strip first column as it is the key on which we joined
+      String line = ((Text) (((TaggedMapOutput) values[i]).getData())).toString();
+      String[] tokens = line.split("\\t", 2);
+      joinedStr += tokens[1];
+    }
+    TaggedMapOutput retv = new SampleTaggedMapOutput(new Text(joinedStr));
+    retv.setTag((Text) tags[0]); 
+    return retv;
+  }
+}
diff --git a/hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/SampleTaggedMapOutput.java b/hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/SampleTaggedMapOutput.java
new file mode 100644
index 0000000..59f1bd1
--- /dev/null
+++ b/hadoop-tools/hadoop-datajoin/src/test/java/org/apache/hadoop/contrib/utils/join/SampleTaggedMapOutput.java
@@ -0,0 +1,60 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.contrib.utils.join;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+import org.apache.hadoop.io.Writable;
+import org.apache.hadoop.io.Text;
+
+import org.apache.hadoop.contrib.utils.join.TaggedMapOutput;
+
+/**
+ * This is a subclass of TaggedMapOutput that is used to
+ * demonstrate the functionality of INNER JOIN between 2 data
+ * sources (TAB separated text files) based on the first column.
+ */
+public class SampleTaggedMapOutput extends TaggedMapOutput {
+
+  private Text data;
+
+  public SampleTaggedMapOutput() {
+    this.data = new Text("");
+  }
+
+  public SampleTaggedMapOutput(Text data) {
+    this.data = data;
+  }
+
+  public Writable getData() {
+    return data;
+  }
+
+  public void write(DataOutput out) throws IOException {
+    this.tag.write(out);
+    this.data.write(out);
+  }
+
+  public void readFields(DataInput in) throws IOException {
+    this.tag.readFields(in);
+    this.data.readFields(in);
+  }
+}
-- 
1.7.0.4

