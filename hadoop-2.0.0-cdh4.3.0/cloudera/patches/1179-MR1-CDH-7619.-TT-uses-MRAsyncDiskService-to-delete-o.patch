From 5f11033e622bfd9ebcc135fb070431d67353c25f Mon Sep 17 00:00:00 2001
From: Karthik Kambatla <kasha@cloudera.com>
Date: Thu, 23 Aug 2012 14:05:23 -0700
Subject: [PATCH 1179/1357] MR1: CDH-7619. TT uses MRAsyncDiskService to delete only specific directories at init/close

Reason: Mimic upstream behavior w.r.t creating/deleting directories at startup/shutdown
Ref: CDH-7619
Author: Karthik Kambatla
---
 .../org/apache/hadoop/mapred/TaskTracker.java      |   17 ++++---
 .../org/apache/hadoop/util/MRAsyncDiskService.java |   20 ++++++++-
 .../hadoop/mapred/TestTaskTrackerDirectories.java  |   44 +++++++++++++++++++-
 .../mapreduce/util/TestMRAsyncDiskService.java     |   44 ++++++++++++++++++-
 4 files changed, 113 insertions(+), 12 deletions(-)

diff --git a/src/mapred/org/apache/hadoop/mapred/TaskTracker.java b/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
index a1cd5b9..209804a 100644
--- a/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
+++ b/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
@@ -369,6 +369,8 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
 
   static final String JOB_LOCAL_DIR = "job.local.dir";
   static final String JOB_TOKEN_FILE="jobToken"; //localized file
+  static final String[] dirsToCleanup = new String[] { SUBDIR,
+      TT_PRIVATE_DIR, TT_LOG_TMP_DIR };
 
   private JobConf fConf;
   private JobConf originalConf;
@@ -833,7 +835,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
     deleteUserDirectories(fConf);
 
     asyncDiskService = new MRAsyncDiskService(fConf);
-    asyncDiskService.cleanupAllVolumes();
+    asyncDiskService.cleanupDirsInAllVolumes(dirsToCleanup);
 
     final FsPermission ttdir = FsPermission.createImmutable((short) 0755);
     for (String s : localStorage.getDirs()) {
@@ -1077,12 +1079,13 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
         t, TaskTrackerInstrumentation.class);
   }
   
-  /** 
-   * Removes all contents of temporary storage.  Called upon 
-   * startup, to remove any leftovers from previous run.
-   *
+  /**
+   * Removes all contents of temporary storage. Called upon startup, to remove
+   * any leftovers from previous run.
+   * 
    * Use MRAsyncDiskService.moveAndDeleteAllVolumes instead.
-   * @see org.apache.hadoop.mapreduce.util.MRAsyncDiskService#cleanupAllVolumes()
+   * 
+   * @see org.apache.hadoop.mapreduce.util.MRAsyncDiskService#cleanupDirsInAllVolumes()
    */
   @Deprecated
   public void cleanupStorage() throws IOException {
@@ -1538,7 +1541,7 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
 
       // Clear local storage
       try {
-        asyncDiskService.cleanupAllVolumes();
+        asyncDiskService.cleanupDirsInAllVolumes(dirsToCleanup);
       } catch (Exception ioe) {
         LOG.warn("IOException shutting down TaskTracker", ioe);
       }
diff --git a/src/mapred/org/apache/hadoop/util/MRAsyncDiskService.java b/src/mapred/org/apache/hadoop/util/MRAsyncDiskService.java
index d12bf75..26c0696 100644
--- a/src/mapred/org/apache/hadoop/util/MRAsyncDiskService.java
+++ b/src/mapred/org/apache/hadoop/util/MRAsyncDiskService.java
@@ -121,7 +121,7 @@ public class MRAsyncDiskService {
   public MRAsyncDiskService(JobConf conf) throws IOException {
     this(FileSystem.getLocal(conf), conf.getLocalDirs());
   }
-  
+
   /**
    * Execute the task sometime in the future, using ThreadPools.
    */
@@ -307,6 +307,24 @@ public class MRAsyncDiskService {
   }
 
   /**
+   * Move specified directories/files in each volume into TOBEDELETED, and then
+   * delete them.
+   * 
+   * @param dirsToDelete
+   * @throws IOException
+   */
+  public void cleanupDirsInAllVolumes(String[] dirsToDelete)
+      throws IOException {
+    for (int v = 0; v < volumes.length; v++) {
+      for (String entryName : dirsToDelete) {
+        if (!TOBEDELETED.equals(entryName)) {
+          moveAndDeleteRelativePath(volumes[v], entryName);
+        }
+      }
+    }
+  }
+
+  /**
    * Move all files/directories inside volume into TOBEDELETED, and then
    * delete them.  The TOBEDELETED directory itself is ignored.
    */
diff --git a/src/test/org/apache/hadoop/mapred/TestTaskTrackerDirectories.java b/src/test/org/apache/hadoop/mapred/TestTaskTrackerDirectories.java
index 008a9ce..3e95258 100644
--- a/src/test/org/apache/hadoop/mapred/TestTaskTrackerDirectories.java
+++ b/src/test/org/apache/hadoop/mapred/TestTaskTrackerDirectories.java
@@ -85,6 +85,37 @@ public class TestTaskTrackerDirectories {
   }
   
   @Test
+  public void testCreatesAndDeletesRequiredDirs() throws Exception {
+    String[] dirs = new String[] {
+        TEST_DIR + "/local1",
+        TEST_DIR + "/local2"
+    };
+    
+    // Initialize configuration
+    Configuration conf = new Configuration();
+    conf.setStrings("mapred.local.dir", dirs);
+
+    // Start TaskTracker and check if dirs are created
+    TaskTracker tt = setupTaskTracker(conf);
+    for (String dir : TaskTracker.dirsToCleanup) {
+      checkDirExists(new Path(dirs[0], dir));
+      checkDirExists(new Path(dirs[1], dir));
+    }
+
+    // Shutdown TaskTracker and check if dirs are deleted
+    try {
+      tt.shutdown();
+    } catch (NullPointerException npe) {
+      // Ignore NullPointerException; this is not a full-fledged TaskTracker and
+      // few fields are null
+    }
+    for (String dir : TaskTracker.dirsToCleanup) {
+      checkDirDoesNotExist(new Path(dirs[0], dir));
+      checkDirDoesNotExist(new Path(dirs[1], dir));
+    }
+  }
+
+  @Test
   public void testCreatesLogDirs() throws Exception {
     String[] dirs = new String[] {
         TEST_DIR + "/local1",
@@ -121,7 +152,7 @@ public class TestTaskTrackerDirectories {
     checkDir(dir.getAbsolutePath());
   }
   
-  private void setupTaskTracker(Configuration conf) throws Exception {
+  private TaskTracker setupTaskTracker(Configuration conf) throws Exception {
     JobConf ttConf = new JobConf(conf);
     // Doesn't matter what we give here - we won't actually
     // connect to it.
@@ -137,6 +168,7 @@ public class TestTaskTrackerDirectories {
     tt.setLocalStorage(localStorage);
     tt.setLocalFileSystem(localFs);
     tt.initializeDirectories();
+    return tt;
   }
 
   private void checkDir(String dir) throws IOException {
@@ -147,4 +179,14 @@ public class TestTaskTrackerDirectories {
     assertEquals(dir + " has correct permissions",
         0755, stat.getPermission().toShort());
   }
+
+  private void checkDirExists(Path path) throws IOException {
+    File f = new File(path.toString());
+    assertTrue(path + " should exist", f.exists());
+  }
+
+  private void checkDirDoesNotExist(Path path) throws IOException {
+    File f = new File(path.toString());
+    assertFalse(path + " should not exist", f.exists());
+  }
 }
diff --git a/src/test/org/apache/hadoop/mapreduce/util/TestMRAsyncDiskService.java b/src/test/org/apache/hadoop/mapreduce/util/TestMRAsyncDiskService.java
index 1d6f67f..be43ea6 100644
--- a/src/test/org/apache/hadoop/mapreduce/util/TestMRAsyncDiskService.java
+++ b/src/test/org/apache/hadoop/mapreduce/util/TestMRAsyncDiskService.java
@@ -171,7 +171,7 @@ public class TestMRAsyncDiskService extends TestCase {
     String b = "b";
     String c = "b/c";
     String d = "d";
-    
+
     File fa = new File(vols[0], a);
     File fb = new File(vols[1], b);
     File fc = new File(vols[1], c);
@@ -216,11 +216,11 @@ public class TestMRAsyncDiskService extends TestCase {
 
   /**
    * This test creates some directories inside the volume roots, and then 
-   * call asyncDiskService.MoveAndDeleteAllVolumes.
+   * call asyncDiskService.cleanupAllVolumes.
    * We should be able to delete all files/dirs inside the volumes except
    * the toBeDeleted directory.
    */
-  public void testMRAsyncDiskServiceMoveAndDeleteAllVolumes() throws Throwable {
+  public void testMRAsyncDiskServiceCleanupAllVolumes() throws Throwable {
     FileSystem localFileSystem = FileSystem.getLocal(new Configuration());
     String[] vols = new String[]{TEST_ROOT_DIR + "/0",
         TEST_ROOT_DIR + "/1"};
@@ -259,6 +259,44 @@ public class TestMRAsyncDiskService extends TestCase {
     // Make sure everything is cleaned up
     makeSureCleanedUp(vols, service);
   }
+
+  /**
+   * This test creates some directories inside the volume roots, and then call
+   * asyncDiskService.cleanupAllVolumes. We should be able to delete only those
+   * files/dirs that have been specified.
+   */
+  public void testCleanupDirsInAllVolumes() throws Throwable {
+    FileSystem localFileSystem = FileSystem.getLocal(new Configuration());
+    String[] vols = new String[] { TEST_ROOT_DIR + "/0", TEST_ROOT_DIR + "/1" };
+    MRAsyncDiskService service = new MRAsyncDiskService(localFileSystem, vols);
+
+    String a = "a";
+    String b = "b";
+
+    File fa0 = new File(vols[0], a);
+    File fa1 = new File(vols[1], a);
+    File fb0 = new File(vols[0], b);
+    File fb1 = new File(vols[1], b);
+
+    // Create the directories
+    fa0.mkdirs();
+    fa1.mkdirs();
+    fb0.mkdirs();
+    fb1.mkdirs();
+
+    assertTrue(fa0.exists());
+    assertTrue(fa1.exists());
+    assertTrue(fb0.exists());
+    assertTrue(fb1.exists());
+
+    // Delete all of them
+    service.cleanupDirsInAllVolumes(new String[] { a });
+
+    assertFalse(fa0.exists());
+    assertFalse(fa1.exists());
+    assertTrue(fb0.exists());
+    assertTrue(fb1.exists());
+  }
   
   /**
    * This test creates some directories inside the toBeDeleted directory and
-- 
1.7.0.4

