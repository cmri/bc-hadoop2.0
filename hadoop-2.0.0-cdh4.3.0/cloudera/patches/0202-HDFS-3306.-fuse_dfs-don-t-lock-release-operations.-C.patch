From 4ecbd9bbde9ce34f24f43e924811525267e0f413 Mon Sep 17 00:00:00 2001
From: Eli Collins <eli@apache.org>
Date: Fri, 13 Jul 2012 00:46:13 +0000
Subject: [PATCH 0202/1357] HDFS-3306. fuse_dfs: don't lock release operations. Contributed by Colin Patrick McCabe

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/branch-2@1361022 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit b99c8c875770e6088261d925db41eee766974990)
---
 .../src/contrib/fuse-dfs/src/fuse_impls_release.c  |   67 +++++++-------------
 1 files changed, 23 insertions(+), 44 deletions(-)

diff --git a/hadoop-hdfs-project/hadoop-hdfs/src/contrib/fuse-dfs/src/fuse_impls_release.c b/hadoop-hdfs-project/hadoop-hdfs/src/contrib/fuse-dfs/src/fuse_impls_release.c
index 78ea2b1..2019ff5 100644
--- a/hadoop-hdfs-project/hadoop-hdfs/src/contrib/fuse-dfs/src/fuse_impls_release.c
+++ b/hadoop-hdfs-project/hadoop-hdfs/src/contrib/fuse-dfs/src/fuse_impls_release.c
@@ -22,10 +22,17 @@
 #include "fuse_connect.h"
 
 /**
- * This mutex is to protect releasing a file handle in case the user calls close in different threads
- * and fuse passes these calls to here.
+ * release a fuse_file_info structure.
+ *
+ * When this function is invoked, there are no more references to our
+ * fuse_file_info structure that exist anywhere.  So there is no need for
+ * locking to protect this structure here.
+ *
+ * Another thread could open() the same file, and get a separate, different file
+ * descriptor with a different, separate fuse_file_info structure.  In HDFS,
+ * this results in one writer winning and overwriting everything the other
+ * writer has done.
  */
-pthread_mutex_t release_mutex = PTHREAD_MUTEX_INITIALIZER;
 
 int dfs_release (const char *path, struct fuse_file_info *fi) {
   TRACE1("release", path)
@@ -39,49 +46,21 @@ int dfs_release (const char *path, struct fuse_file_info *fi) {
   assert('/' == *path);
 
   int ret = 0;
-
-  //
-  // Critical section - protect from multiple close calls in different threads.
-  // (no returns until end)
-  //
-
-  pthread_mutex_lock(&release_mutex);
-
-  if (NULL != (void*)fi->fh) {
-
-    dfs_fh *fh = (dfs_fh*)fi->fh;
-    assert(fh);
-
-    hdfsFile file_handle = (hdfsFile)fh->hdfsFH;
-
-    if (NULL != file_handle) {
-      if (hdfsCloseFile(fh->fs, file_handle) != 0) {
-        ERROR("Could not close handle %ld for %s\n",(long)file_handle, path);
-        ret = -EIO;
-      }
-    }
-
-    if (fh->buf != NULL) {
-      free(fh->buf);
-    }
-
-    if (doDisconnect(fh->fs)) {
+  dfs_fh *fh = (dfs_fh*)fi->fh;
+  assert(fh);
+  hdfsFile file_handle = (hdfsFile)fh->hdfsFH;
+  if (NULL != file_handle) {
+    if (hdfsCloseFile(fh->fs, file_handle) != 0) {
+      ERROR("Could not close handle %ld for %s\n",(long)file_handle, path);
       ret = -EIO;
     }
-
-    // this is always created and initialized, so always destroy it. (see dfs_open)
-    pthread_mutex_destroy(&fh->mutex);
-
-    free(fh);
-
-    fi->fh = (uint64_t)0;
   }
-
-  pthread_mutex_unlock(&release_mutex);
-
-  //
-  // End critical section 
-  // 
-
+  free(fh->buf);
+  if (doDisconnect(fh->fs)) {
+    ret = -EIO;
+  }
+  pthread_mutex_destroy(&fh->mutex);
+  free(fh);
+  fi->fh = 0;
   return ret;
 }
-- 
1.7.0.4

