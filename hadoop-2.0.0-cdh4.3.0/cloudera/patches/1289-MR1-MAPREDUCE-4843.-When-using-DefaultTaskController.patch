From 54375d33cd6b75f9f13b16b5264518d879708db9 Mon Sep 17 00:00:00 2001
From: Alejandro Abdelnur <tucu@apache.org>
Date: Mon, 4 Feb 2013 22:26:34 +0000
Subject: [PATCH 1289/1357] MR1: MAPREDUCE-4843. When using DefaultTaskController, JobLocalizer not thread safe. (kkambatl via tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/branch-1@1442404 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit aa82ee9b532d08199d259a53890f7e15519dd43c)

Ref: CDH-9698
Author: Karthik Kambatla
---
 .../org/apache/hadoop/mapred/JobLocalizer.java     |   10 ++--
 .../org/apache/hadoop/mapred/TestJobLocalizer.java |   44 ++++++++++++++++++++
 2 files changed, 49 insertions(+), 5 deletions(-)
 create mode 100644 src/test/org/apache/hadoop/mapred/TestJobLocalizer.java

diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobLocalizer.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobLocalizer.java
index b526565..5a7ea52 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobLocalizer.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/JobLocalizer.java
@@ -82,7 +82,7 @@ public class JobLocalizer {
   private final FileSystem lfs;
   private final List<Path> localDirs;
   private final LocalDirAllocator lDirAlloc;
-  private final JobConf ttConf;
+  protected final JobConf ttConf;
 
   private final String JOBDIR;
   private final String DISTDIR;
@@ -90,7 +90,7 @@ public class JobLocalizer {
   private final String JARDST;
   private final String JOBCONF;
   private final String JOBTOKEN;
-  private static final String JOB_LOCAL_CTXT = "mapred.job.local.dir";
+  protected static final String JOB_LOCAL_CTXT = "mapred.job.local.dir";
 
   public JobLocalizer(JobConf ttConf, String user, String jobid)
       throws IOException {
@@ -108,10 +108,10 @@ public class JobLocalizer {
       throw new IOException("Cannot initialize for null jobid");
     }
     this.jobid = jobid;
-    this.ttConf = ttConf;
-    lfs = FileSystem.getLocal(ttConf).getRaw();
+    this.ttConf = new JobConf(ttConf);
+    lfs = FileSystem.getLocal(this.ttConf).getRaw();
     this.localDirs = createPaths(user, localDirs);
-    ttConf.setStrings(JOB_LOCAL_CTXT, localDirs);
+    this.ttConf.setStrings(JOB_LOCAL_CTXT, localDirs);
     Collections.shuffle(this.localDirs);
     lDirAlloc = new LocalDirAllocator(JOB_LOCAL_CTXT);
     JOBDIR = TaskTracker.JOBCACHE + Path.SEPARATOR + jobid;
diff --git a/src/test/org/apache/hadoop/mapred/TestJobLocalizer.java b/src/test/org/apache/hadoop/mapred/TestJobLocalizer.java
new file mode 100644
index 0000000..149fcb7
--- /dev/null
+++ b/src/test/org/apache/hadoop/mapred/TestJobLocalizer.java
@@ -0,0 +1,44 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.mapred;
+
+import static org.junit.Assert.assertTrue;
+
+import java.io.IOException;
+
+import org.apache.hadoop.conf.Configuration;
+import org.junit.Test;
+
+public class TestJobLocalizer {
+
+  @Test(timeout = 1000)
+  public void testConcurrentJobLocalizers() throws IOException {
+    final String LOCAL_DIR = "/tmp/mapred/local";
+    JobConf conf = new JobConf(new Configuration());
+    
+    JobLocalizer localizer1 = new JobLocalizer(conf, "user1", "jobid1",
+        LOCAL_DIR);
+    JobLocalizer localizer2 = new JobLocalizer(conf, "user2", "jobid2",
+        LOCAL_DIR);
+    assertTrue("Localizer 1 job local dirs should have user1",
+        localizer1.ttConf.get(JobLocalizer.JOB_LOCAL_CTXT).contains("user1"));
+    assertTrue("Localizer 2 job local dirs should have user2",
+        localizer2.ttConf.get(JobLocalizer.JOB_LOCAL_CTXT).contains("user2"));
+  }
+}
-- 
1.7.0.4

