From 48b1877f75201a770e6ba0d6e9a1c226668442a5 Mon Sep 17 00:00:00 2001
From: Alejandro Abdelnur <tucu@apache.org>
Date: Sat, 26 Jan 2013 04:29:54 +0000
Subject: [PATCH 1270/1357] MR1: MAPREDUCE-4963. StatisticsCollector improperly keeps track of Last Day and Last Hour statistics for new TaskTrackers. (rkanter via tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/branch-1@1438843 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit dd62cd17b0f975d22504162316072180fa03b141)
---
 .../apache/hadoop/mapred/StatisticsCollector.java  |   20 +++-----
 .../hadoop/mapred/TestStatisticsCollector.java     |   57 ++++++++++++++++++++
 2 files changed, 64 insertions(+), 13 deletions(-)

diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/StatisticsCollector.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/StatisticsCollector.java
index dc557ad..187a593 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/StatisticsCollector.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/StatisticsCollector.java
@@ -206,6 +206,7 @@ class StatisticsCollector {
       private final LinkedList<Integer> buckets = new LinkedList<Integer>();
       private int value;
       private int currentValue;
+      private int updates;
 
       public synchronized int getValue() {
         return value;
@@ -261,9 +262,6 @@ class StatisticsCollector {
     final int collectBuckets;
     final int updatesPerBucket;
     
-    private int updates;
-    private int buckets;
-
     TimeWindowStatUpdater(TimeWindow w, int updatePeriod) {
       if (updatePeriod > w.updateGranularity) {
         throw new RuntimeException(
@@ -274,18 +272,14 @@ class StatisticsCollector {
     }
 
     synchronized void update() {
-      updates++;
-      if (updates == updatesPerBucket) {
-        for(TimeStat stat : statToCollect.values()) {
+      for (TimeStat stat : statToCollect.values()) {
+        stat.updates++;
+        if (stat.updates == updatesPerBucket) {
           stat.addBucket();
+          stat.updates = 0;
         }
-        updates = 0;
-        buckets++;
-        if (buckets > collectBuckets) {
-          for (TimeStat stat : statToCollect.values()) {
-            stat.removeBucket();
-          }
-          buckets--;
+        if (stat.buckets.size() > collectBuckets) {
+          stat.removeBucket();
         }
       }
     }
diff --git a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/TestStatisticsCollector.java b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/TestStatisticsCollector.java
index 87ab6b2..3097de5 100644
--- a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/TestStatisticsCollector.java
+++ b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/TestStatisticsCollector.java
@@ -21,6 +21,7 @@ import junit.framework.TestCase;
 
 import org.apache.hadoop.mapred.StatisticsCollector.TimeWindow;
 import org.apache.hadoop.mapred.StatisticsCollector.Stat;
+import org.apache.hadoop.mapred.StatisticsCollector.Stat.TimeStat;
 
 public class TestStatisticsCollector extends TestCase{
 
@@ -80,4 +81,60 @@ public class TestStatisticsCollector extends TestCase{
     assertEquals(95, stat.getValues().get(sincStart).getValue());
   }
 
+  public void testBucketing() throws Exception {
+    StatisticsCollector collector = new StatisticsCollector();
+    TimeWindow window = new TimeWindow("test", 33, 11);
+    // We'll collect 3 buckets before we start removing: 33 / 11 = 3
+    // We'll do 2 updates per bucket (5 is default period): 11 / 5 = 2
+    TimeWindow[] windows = {window};
+    Stat stat1 = collector.createStat("TaskTracker A", windows);
+
+    // TT A starts out with 0 buckets
+    assertEquals(0, stat1.getValues().get(window).getValue());
+    stat1.inc(1);
+    collector.update();
+    assertEquals(0, stat1.getValues().get(window).getValue());
+    stat1.inc(1);
+    collector.update();
+    assertEquals(2, stat1.getValues().get(window).getValue());
+    stat1.inc(1);
+    collector.update();
+    assertEquals(2, stat1.getValues().get(window).getValue());
+    stat1.inc(2);
+    collector.update();
+    assertEquals(2+3, stat1.getValues().get(window).getValue());
+    stat1.inc(0);
+    collector.update();
+    assertEquals(2+3, stat1.getValues().get(window).getValue());
+    stat1.inc(1);
+    // At the next update, we now have 3 buckets for TT 1
+    collector.update();
+    assertEquals(2+3+1, stat1.getValues().get(window).getValue());
+    stat1.inc(4);
+    collector.update();
+    assertEquals(2+3+1, stat1.getValues().get(window).getValue());
+    // At the next update, we're going to drop the earliest bucket for TT A and
+    // keep a max of 3 buckets forever
+    collector.update();
+    assertEquals(3+1+4, stat1.getValues().get(window).getValue());
+
+    // A new TaskTracker connects and gets a Stat allocated for it
+    Stat stat2 = collector.createStat("TaskTracker B", windows);
+
+    // TT B starts out with 0 buckets even though TT A already has 3
+    assertEquals(0, stat2.getValues().get(window).getValue());
+    stat2.inc(10);
+    collector.update();
+    assertEquals(3+1+4, stat1.getValues().get(window).getValue());
+    assertEquals(0, stat2.getValues().get(window).getValue());
+    stat1.inc(3);
+    stat2.inc(2);
+    // At the next update, we're going to drop the earliest bucket for TT A
+    // but we shouldn't drop the earliest bucket for TT B because it only
+    // has one bucket so far (which would result in a value of 0 instead of 12)
+    collector.update();
+    assertEquals(1+4+3, stat1.getValues().get(window).getValue());
+    assertEquals(12, stat2.getValues().get(window).getValue());
+  }
+
 }
-- 
1.7.0.4

