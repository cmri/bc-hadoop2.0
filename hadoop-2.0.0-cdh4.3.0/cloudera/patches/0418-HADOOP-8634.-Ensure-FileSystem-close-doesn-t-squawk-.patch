From f720f9c4e57be62a9244165275463fdc8556af74 Mon Sep 17 00:00:00 2001
From: Robert Joseph Evans <bobby@apache.org>
Date: Mon, 30 Jul 2012 18:05:38 +0000
Subject: [PATCH 0418/1357] HADOOP-8634. Ensure FileSystem#close doesn't squawk for deleteOnExit paths (daryn via bobby)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367196 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 19d258120b79906d0b883342ad715b43b487632e)
---
 .../main/java/org/apache/hadoop/fs/FileSystem.java |    4 ++-
 .../apache/hadoop/fs/TestFileSystemCaching.java    |   28 ++++++++++++++++++-
 2 files changed, 29 insertions(+), 3 deletions(-)

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java
index 6043fcc..1c1122c 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java
@@ -1227,7 +1227,9 @@ public abstract class FileSystem extends Configured implements Closeable {
       for (Iterator<Path> iter = deleteOnExit.iterator(); iter.hasNext();) {
         Path path = iter.next();
         try {
-          delete(path, true);
+          if (exists(path)) {
+            delete(path, true);
+          }
         }
         catch (IOException e) {
           LOG.info("Ignoring failure to deleteOnExit for path " + path);
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCaching.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCaching.java
index 910139b..e8debf8 100644
--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCaching.java
+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestFileSystemCaching.java
@@ -35,7 +35,7 @@ import java.security.PrivilegedExceptionAction;
 import java.util.concurrent.Semaphore;
 
 import static org.junit.Assert.*;
-import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.*;
 
 
 public class TestFileSystemCaching {
@@ -267,4 +267,28 @@ public class TestFileSystemCaching {
     });
     assertNotSame(fsA, fsA1);
   }
-}
+  
+  @Test
+  public void testDeleteOnExitChecksExists() throws Exception {
+    FileSystem mockFs = mock(FileSystem.class);
+    FileSystem fs = new FilterFileSystem(mockFs);
+    Path p = new Path("/a");
+    
+    // path has to exist for deleteOnExit to register it
+    when(mockFs.getFileStatus(p)).thenReturn(new FileStatus());
+    fs.deleteOnExit(p);
+    verify(mockFs).getFileStatus(eq(p));
+    fs.close();
+    verify(mockFs).delete(eq(p), anyBoolean());
+    reset(mockFs);
+    
+    // make sure it doesn't try to delete a file that doesn't exist
+    when(mockFs.getFileStatus(p)).thenReturn(new FileStatus());
+    fs.deleteOnExit(p);
+    verify(mockFs).getFileStatus(eq(p));
+    reset(mockFs);
+    fs.close();
+    verify(mockFs).getFileStatus(eq(p));
+    verify(mockFs, never()).delete(any(Path.class), anyBoolean());
+  }
+}
\ No newline at end of file
-- 
1.7.0.4

