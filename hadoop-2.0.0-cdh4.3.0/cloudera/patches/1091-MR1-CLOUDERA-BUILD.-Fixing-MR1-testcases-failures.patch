From 6e86c40ccf9e2cc62d1b8c730ddaa68cb597c5f6 Mon Sep 17 00:00:00 2001
From: Alejandro Abdelnur <tucu@cloudera.com>
Date: Mon, 9 Jan 2012 13:46:32 -0800
Subject: [PATCH 1091/1357] MR1: CLOUDERA BUILD. Fixing MR1 testcases failures.

  Reason: Due to changes in hadoop-common 0.23.
  Author: Alejandro Abdelnur
  Ref: CDH-3997
---
 src/test/org/apache/hadoop/mapred/TestJobACLs.java |   20 ++++++++++----------
 .../TestUmbilicalProtocolWithJobToken.java         |    5 +++++
 .../TestMapredGroupMappingServiceRefresh.java      |    2 +-
 3 files changed, 16 insertions(+), 11 deletions(-)

diff --git a/src/test/org/apache/hadoop/mapred/TestJobACLs.java b/src/test/org/apache/hadoop/mapred/TestJobACLs.java
index b1a5d49..f84a5f1 100644
--- a/src/test/org/apache/hadoop/mapred/TestJobACLs.java
+++ b/src/test/org/apache/hadoop/mapred/TestJobACLs.java
@@ -249,17 +249,17 @@ public class TestJobACLs {
         // Tests authorization failure with getCounters
         try {
           myJob.getCounters();
-          fail("AccessControlException expected..");
+          fail("'cannot perform operation VIEW_JOB_COUNTERS' expected..");
         } catch (IOException ioe) {
-          assertTrue(ioe.getMessage().contains("AccessControlException"));
+          assertTrue(ioe.getMessage(), ioe.getMessage().contains("cannot perform operation VIEW_JOB_COUNTERS"));
         }
 
         // Tests authorization failure with getTaskReports
         try {
           client.getSetupTaskReports(jobId);
-          fail("AccessControlException expected..");
+          fail("'cannot perform operation VIEW_JOB_DETAILS' expected..");
         } catch (IOException ioe) {
-          assertTrue(ioe.getMessage().contains("AccessControlException"));
+          assertTrue(ioe.getMessage(), ioe.getMessage().contains("cannot perform operation VIEW_JOB_DETAILS"));
         }
 
         return null;
@@ -357,18 +357,18 @@ public class TestJobACLs {
         // Tests authorization failure with killJob
         try {
           myJob.killJob();
-          fail("AccessControlException expected..");
+          fail("'cannot perform operation KILL_JOB' expected..");
         } catch (IOException ioe) {
-          assertTrue(ioe.getMessage().contains("AccessControlException"));
+          assertTrue(ioe.getMessage(), ioe.getMessage().contains("cannot perform operation KILL_JOB"));
         }
 
 
         // Tests authorization failure with setJobPriority
         try {
           myJob.setJobPriority(JobPriority.HIGH.toString());
-          fail("AccessControlException expected..");
+          fail("'cannot perform operation SET_JOB_PRIORITY' expected..");
         } catch (IOException ioe) {
-          assertTrue(ioe.getMessage().contains("AccessControlException"));
+          assertTrue(ioe.getMessage(), ioe.getMessage().contains("cannot perform operation SET_JOB_PRIORITY"));
         }
 
         return null;
@@ -430,9 +430,9 @@ public class TestJobACLs {
         // Tests authorization failure with getCounters
         try {
           myJob.getCounters();
-          fail("AccessControlException expected..");
+          fail("'cannot perform operation VIEW_JOB_COUNTERS' expected..");
         } catch (IOException ioe) {
-          assertTrue(ioe.getMessage().contains("AccessControlException"));
+          assertTrue(ioe.getMessage(), ioe.getMessage().contains("cannot perform operation VIEW_JOB_COUNTERS"));
         }
 
         return null;
diff --git a/src/test/org/apache/hadoop/mapreduce/security/TestUmbilicalProtocolWithJobToken.java b/src/test/org/apache/hadoop/mapreduce/security/TestUmbilicalProtocolWithJobToken.java
index 89fca12..2058bad 100644
--- a/src/test/org/apache/hadoop/mapreduce/security/TestUmbilicalProtocolWithJobToken.java
+++ b/src/test/org/apache/hadoop/mapreduce/security/TestUmbilicalProtocolWithJobToken.java
@@ -20,6 +20,7 @@ package org.apache.hadoop.mapreduce.security;
 
 import static org.apache.hadoop.fs.CommonConfigurationKeys.HADOOP_SECURITY_AUTHENTICATION;
 import static org.mockito.Matchers.anyLong;
+import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -36,6 +37,7 @@ import org.apache.hadoop.io.Text;
 import org.apache.hadoop.ipc.Client;
 import org.apache.hadoop.ipc.RPC;
 import org.apache.hadoop.ipc.Server;
+import org.apache.hadoop.ipc.ProtocolSignature;
 import org.apache.hadoop.mapred.TaskUmbilicalProtocol;
 import org.apache.hadoop.mapreduce.security.token.JobTokenIdentifier;
 import org.apache.hadoop.mapreduce.security.token.JobTokenSecretManager;
@@ -73,9 +75,12 @@ public class TestUmbilicalProtocolWithJobToken {
 
   @Test
   public void testJobTokenRpc() throws Exception {
+    ProtocolSignature mockPS = mock(ProtocolSignature.class);
+    when(mockPS.getVersion()).thenReturn(TaskUmbilicalProtocol.versionID);
     TaskUmbilicalProtocol mockTT = mock(TaskUmbilicalProtocol.class);
     when(mockTT.getProtocolVersion(anyString(), anyLong())).thenReturn(
         TaskUmbilicalProtocol.versionID);
+    when(mockTT.getProtocolSignature(anyString(), anyLong(), anyInt())).thenReturn(mockPS);
 
     JobTokenSecretManager sm = new JobTokenSecretManager();
     final Server server = RPC.getServer(TaskUmbilicalProtocol.class, mockTT,
diff --git a/src/test/org/apache/hadoop/security/TestMapredGroupMappingServiceRefresh.java b/src/test/org/apache/hadoop/security/TestMapredGroupMappingServiceRefresh.java
index b508b21..b8f0abe 100644
--- a/src/test/org/apache/hadoop/security/TestMapredGroupMappingServiceRefresh.java
+++ b/src/test/org/apache/hadoop/security/TestMapredGroupMappingServiceRefresh.java
@@ -246,7 +246,7 @@ public class TestMapredGroupMappingServiceRefresh {
   private void addNewConfigResource(String rsrcName, String keyGroup,
       String groups, String keyHosts, String hosts)  throws FileNotFoundException {
     // location for temp resource should be in CLASSPATH
-    URL url = config.getResource("mapred-default.xml");
+    URL url = config.getResource("empty-file");
     Path p = new Path(url.getPath());
     Path dir = p.getParent();
     tempResource = dir.toString() + "/" + rsrcName;
-- 
1.7.0.4

