From 02aeb18f4474e422f6faa55e9b00e69200cd76e8 Mon Sep 17 00:00:00 2001
From: Tom White <tom@cloudera.com>
Date: Fri, 2 Dec 2011 17:19:15 -0800
Subject: [PATCH 1064/1357] MR1: MAPREDUCE-895. FileSystem::ListStatus will now throw FileNotFoundException, MapRed needs updated.

Author: Jakob Homan.
Reason: Support 0.23 API in MR1
Ref: CDH-3861
---
 src/mapred/org/apache/hadoop/mapred/JobClient.java |   11 +++++++++--
 .../org/apache/hadoop/mapred/JobHistory.java       |   11 +++++------
 .../org/apache/hadoop/mapred/JobTracker.java       |   10 ++++++++--
 .../org/apache/hadoop/mapred/TaskTracker.java      |   14 +++++++++-----
 .../org/apache/hadoop/mapred/BigMapOutput.java     |    2 +-
 .../org/apache/hadoop/mapred/TestBadRecords.java   |    1 +
 .../apache/hadoop/mapred/TestIsolationRunner.java  |   19 ++++++++++++-------
 7 files changed, 45 insertions(+), 23 deletions(-)

diff --git a/src/mapred/org/apache/hadoop/mapred/JobClient.java b/src/mapred/org/apache/hadoop/mapred/JobClient.java
index ee3eba2..9008f3c 100644
--- a/src/mapred/org/apache/hadoop/mapred/JobClient.java
+++ b/src/mapred/org/apache/hadoop/mapred/JobClient.java
@@ -1023,9 +1023,16 @@ public class JobClient extends Configured implements MRConstants, Tool  {
    */
   public static boolean isJobDirValid(Path jobDirPath, FileSystem fs) 
   throws IOException {
-    FileStatus[] contents = fs.listStatus(jobDirPath);
+    FileStatus[] contents = null;
+    
+    try {
+      contents = fs.listStatus(jobDirPath);
+    } catch(FileNotFoundException fnfe) {
+      return false;
+    }
+    
     int matchCount = 0;
-    if (contents != null && contents.length >=2) {
+    if (contents.length >=2) {
       for (FileStatus status : contents) {
         if ("job.xml".equals(status.getPath().getName())) {
           ++matchCount;
diff --git a/src/mapred/org/apache/hadoop/mapred/JobHistory.java b/src/mapred/org/apache/hadoop/mapred/JobHistory.java
index 2e66d3f..a644f91 100644
--- a/src/mapred/org/apache/hadoop/mapred/JobHistory.java
+++ b/src/mapred/org/apache/hadoop/mapred/JobHistory.java
@@ -2078,13 +2078,12 @@ public class JobHistory {
       isRunning = true; 
       try {
         FileStatus[] historyFiles = DONEDIR_FS.listStatus(DONE);
+
         // delete if older than 30 days
-        if (historyFiles != null) {
-          for (FileStatus f : historyFiles) {
-            if (now - f.getModificationTime() > THIRTY_DAYS_IN_MS) {
-              DONEDIR_FS.delete(f.getPath(), true); 
-              LOG.info("Deleting old history file : " + f.getPath());
-            }
+        for (FileStatus f : historyFiles) {
+          if (now - f.getModificationTime() > THIRTY_DAYS_IN_MS) {
+            DONEDIR_FS.delete(f.getPath(), true); 
+            LOG.info("Deleting old history file : " + f.getPath());
           }
         }
 
diff --git a/src/mapred/org/apache/hadoop/mapred/JobTracker.java b/src/mapred/org/apache/hadoop/mapred/JobTracker.java
index 099e1a9..ea99f8d 100644
--- a/src/mapred/org/apache/hadoop/mapred/JobTracker.java
+++ b/src/mapred/org/apache/hadoop/mapred/JobTracker.java
@@ -2255,8 +2255,14 @@ public class JobTracker implements MRConstants, JTProtocols, JobTrackerMXBean {
           }
         } catch (FileNotFoundException fnf) {} //ignore
         // Make sure that the backup data is preserved
-        FileStatus[] systemDirData = fs.listStatus(this.systemDir);
-        // Check if the history is enabled .. as we cant have persistence with 
+        FileStatus[] systemDirData;
+        try {
+          systemDirData = fs.listStatus(this.systemDir);
+        } catch (FileNotFoundException fnfe) {
+          systemDirData = null;
+        }
+        
+        // Check if the history is enabled .. as we can't have persistence with 
         // history disabled
         if (conf.getBoolean("mapred.jobtracker.restart.recover", false) 
             && systemDirData != null) {
diff --git a/src/mapred/org/apache/hadoop/mapred/TaskTracker.java b/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
index 904bafe..b122092 100644
--- a/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
+++ b/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
@@ -772,12 +772,16 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
    */
   private void deleteUserDirectories(Configuration conf) throws IOException {
     for(String root: localStorage.getDirs()) {
-      for(FileStatus status: localFs.listStatus(new Path(root, SUBDIR))) {
-        String owner = status.getOwner();
-        String path = status.getPath().getName();
-        if (path.equals(owner)) {
-          taskController.deleteAsUser(owner, "");
+      try {
+        for(FileStatus status: localFs.listStatus(new Path(root, SUBDIR))) {
+          String owner = status.getOwner();
+          String path = status.getPath().getName();
+          if (path.equals(owner)) {
+            taskController.deleteAsUser(owner, "");
+          }
         }
+      } catch (FileNotFoundException e) {
+        // ignore
       }
     }
   }
diff --git a/src/test/org/apache/hadoop/mapred/BigMapOutput.java b/src/test/org/apache/hadoop/mapred/BigMapOutput.java
index f39d88f..a3c5b6d 100644
--- a/src/test/org/apache/hadoop/mapred/BigMapOutput.java
+++ b/src/test/org/apache/hadoop/mapred/BigMapOutput.java
@@ -55,7 +55,7 @@ public class BigMapOutput extends Configured implements Tool {
     // Check if the input path exists and is non-empty
     if (fs.exists(dir)) {
       FileStatus[] list = fs.listStatus(dir);
-      if (list != null && list.length > 0) {
+      if (list.length > 0) {
         throw new IOException("Input path: " + dir + " already exists... ");
       }
     }
diff --git a/src/test/org/apache/hadoop/mapred/TestBadRecords.java b/src/test/org/apache/hadoop/mapred/TestBadRecords.java
index 014db32..a9ccbc6 100644
--- a/src/test/org/apache/hadoop/mapred/TestBadRecords.java
+++ b/src/test/org/apache/hadoop/mapred/TestBadRecords.java
@@ -136,6 +136,7 @@ public class TestBadRecords extends ClusterMapReduceTestCase {
     
     //validate skipped records
     Path skipDir = SkipBadRecords.getSkipOutputPath(conf);
+    assertNotNull(skipDir);
     Path[] skips = FileUtil.stat2Paths(getFileSystem().listStatus(skipDir));
     List<String> mapSkipped = new ArrayList<String>();
     List<String> redSkipped = new ArrayList<String>();
diff --git a/src/test/org/apache/hadoop/mapred/TestIsolationRunner.java b/src/test/org/apache/hadoop/mapred/TestIsolationRunner.java
index 69af044..2f7aa89 100644
--- a/src/test/org/apache/hadoop/mapred/TestIsolationRunner.java
+++ b/src/test/org/apache/hadoop/mapred/TestIsolationRunner.java
@@ -19,6 +19,7 @@ package org.apache.hadoop.mapred;
 
 import java.io.DataOutputStream;
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.UUID;
 
@@ -92,13 +93,17 @@ public class TestIsolationRunner extends TestCase {
   private static int countSideEffectFiles(JobConf conf, final String prefix)
       throws IOException {
     FileSystem localFs = FileSystem.getLocal(conf);
-    FileStatus[] files = localFs.listStatus(
-        new Path(conf.get(SIDE_EFFECT_DIR_PROPERTY)), new PathFilter() {
-      @Override public boolean accept(Path path) {
-        return path.getName().startsWith(prefix + "-");
-      }
-    });
-    return files.length;
+    try {
+      FileStatus[] files = localFs.listStatus(
+          new Path(conf.get(SIDE_EFFECT_DIR_PROPERTY)), new PathFilter() {
+        @Override public boolean accept(Path path) {
+          return path.getName().startsWith(prefix + "-");
+        }
+      });
+      return files.length;
+    } catch (FileNotFoundException fnfe) {
+      return 0;
+    }
   }
   
   private Path getAttemptJobXml(JobConf conf, JobID jobId, boolean isMap)
-- 
1.7.0.4

