From 43aad7775f67d08e2967bd43c0343849c54f1a93 Mon Sep 17 00:00:00 2001
From: Harsh J <harsh@apache.org>
Date: Tue, 24 Jul 2012 17:54:47 +0000
Subject: [PATCH 1169/1357] MR1: MAPREDUCE-4415. Backport the Job.getInstance methods from MAPREDUCE-1505 to branch-1. Contributed by Harsh J. (harsh)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/branch-1@1365193 13f79535-47bb-0310-9956-ffa450edef68
---
 src/mapred/org/apache/hadoop/mapreduce/Job.java    |   50 ++++++++++++++++++++
 .../apache/hadoop/mapreduce/MapReduceTestUtil.java |    8 ++--
 .../TestMRSequenceFileAsBinaryOutputFormat.java    |    3 +-
 .../mapreduce/lib/partition/TestInputSampler.java  |    2 +-
 4 files changed, 57 insertions(+), 6 deletions(-)

diff --git a/src/mapred/org/apache/hadoop/mapreduce/Job.java b/src/mapred/org/apache/hadoop/mapreduce/Job.java
index 51802fe..8582082 100644
--- a/src/mapred/org/apache/hadoop/mapreduce/Job.java
+++ b/src/mapred/org/apache/hadoop/mapreduce/Job.java
@@ -44,6 +44,56 @@ public class Job extends JobContextImpl implements JobContext {
   private JobClient jobClient;
   private RunningJob info;
 
+  /**
+   * Creates a new {@link Job}
+   * A Job will be created with a generic {@link Configuration}.
+   *
+   * @return the {@link Job}
+   * @throws IOException
+   */
+  public static Job getInstance() throws IOException {
+    // create with a null Cluster
+    return getInstance(new Configuration());
+  }
+
+  /**
+   * Creates a new {@link Job} with a given {@link Configuration}.
+   *
+   * The <code>Job</code> makes a copy of the <code>Configuration</code> so
+   * that any necessary internal modifications do not reflect on the incoming
+   * parameter.
+   *
+   * @param conf the {@link Configuration}
+   * @return the {@link Job}
+   * @throws IOException
+   */
+  public static Job getInstance(Configuration conf) throws IOException {
+    // create with a null Cluster
+    JobConf jobConf = new JobConf(conf);
+    return new Job(jobConf);
+  }
+
+  /**
+   * Creates a new {@link Job} with a given {@link Configuration}
+   * and a given jobName.
+   *
+   * The <code>Job</code> makes a copy of the <code>Configuration</code> so
+   * that any necessary internal modifications do not reflect on the incoming
+   * parameter.
+   *
+   * @param conf the {@link Configuration}
+   * @param jobName the job instance's name
+   * @return the {@link Job}
+   * @throws IOException
+   */
+  public static Job getInstance(Configuration conf, String jobName)
+           throws IOException {
+    // create with a null Cluster
+    Job result = getInstance(conf);
+    result.setJobName(jobName);
+    return result;
+  }
+
   public Job() throws IOException {
     this(new Configuration());
   }
diff --git a/src/test/org/apache/hadoop/mapreduce/MapReduceTestUtil.java b/src/test/org/apache/hadoop/mapreduce/MapReduceTestUtil.java
index c75784d..aac5300 100644
--- a/src/test/org/apache/hadoop/mapreduce/MapReduceTestUtil.java
+++ b/src/test/org/apache/hadoop/mapreduce/MapReduceTestUtil.java
@@ -136,7 +136,7 @@ public class MapReduceTestUtil {
   public static Job createCopyJob(Configuration conf, Path outdir, 
       Path... indirs) throws Exception {
     conf.setInt("mapred.map.tasks", 3);
-    Job theJob = new Job(new JobConf(conf));
+    Job theJob = Job.getInstance(conf);
     theJob.setJobName("DataMoveJob");
 
     FileInputFormat.setInputPaths(theJob, indirs);
@@ -166,7 +166,7 @@ public class MapReduceTestUtil {
       fs.delete(outdir, true);
     }
     conf.setInt("mapred.map.max.attempts", 2);
-    Job theJob = new Job(new JobConf(conf));
+    Job theJob = Job.getInstance(conf);
     theJob.setJobName("Fail-Job");
 
     FileInputFormat.setInputPaths(theJob, indirs);
@@ -191,7 +191,7 @@ public class MapReduceTestUtil {
   public static Job createKillJob(Configuration conf, Path outdir, 
       Path... indirs) throws Exception {
 
-    Job theJob = new Job(new JobConf(conf));
+    Job theJob = Job.getInstance(conf);
     theJob.setJobName("Kill-Job");
 
     FileInputFormat.setInputPaths(theJob, indirs);
@@ -353,7 +353,7 @@ public class MapReduceTestUtil {
 
   public static Job createJob(Configuration conf, Path inDir, Path outDir, 
       int numInputFiles, int numReds, String input) throws IOException {
-    Job job = new Job(new JobConf(conf));
+    Job job = Job.getInstance(conf);
     FileSystem fs = FileSystem.get(conf);
     if (fs.exists(outDir)) {
       fs.delete(outDir, true);
diff --git a/src/test/org/apache/hadoop/mapreduce/lib/output/TestMRSequenceFileAsBinaryOutputFormat.java b/src/test/org/apache/hadoop/mapreduce/lib/output/TestMRSequenceFileAsBinaryOutputFormat.java
index e3332c1..e5e4f91 100644
--- a/src/test/org/apache/hadoop/mapreduce/lib/output/TestMRSequenceFileAsBinaryOutputFormat.java
+++ b/src/test/org/apache/hadoop/mapreduce/lib/output/TestMRSequenceFileAsBinaryOutputFormat.java
@@ -174,7 +174,8 @@ public class TestMRSequenceFileAsBinaryOutputFormat extends TestCase {
 
   public void testcheckOutputSpecsForbidRecordCompression() 
       throws IOException {
-    Job job = new Job();
+    Job job = Job.getInstance(new Configuration(),
+        "testcheckOutputSpecsForbidRecordCompression");
     FileSystem fs = FileSystem.getLocal(job.getConfiguration());
     Path outputdir = new Path(System.getProperty("test.build.data", "/tmp") 
                               + "/output");
diff --git a/src/test/org/apache/hadoop/mapreduce/lib/partition/TestInputSampler.java b/src/test/org/apache/hadoop/mapreduce/lib/partition/TestInputSampler.java
index 0850d62..6a4ccaa 100644
--- a/src/test/org/apache/hadoop/mapreduce/lib/partition/TestInputSampler.java
+++ b/src/test/org/apache/hadoop/mapreduce/lib/partition/TestInputSampler.java
@@ -136,7 +136,7 @@ public class TestInputSampler {
     for (int i = 0; i < TOT_SPLITS; ++i) {
       inits[i] = i;
     }
-    Job ignored = new Job();
+    Job ignored = Job.getInstance();
     Object[] samples = sampler.getSample(new TestInputSamplerIF(
           NUM_SAMPLES, TOT_SPLITS, inits), ignored);
     assertEquals(NUM_SAMPLES, samples.length);
-- 
1.7.0.4

