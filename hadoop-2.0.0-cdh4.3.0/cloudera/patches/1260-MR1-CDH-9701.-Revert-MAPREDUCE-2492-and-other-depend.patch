From 5b0940b6ca651c11ffe3bad60cd9bf3ef3225617 Mon Sep 17 00:00:00 2001
From: Karthik Kambatla <kasha@cloudera.com>
Date: Wed, 23 Jan 2013 14:48:56 -0800
Subject: [PATCH 1260/1357] MR1: CDH-9701. Revert MAPREDUCE-2492 and other dependent JIRAs. The reverted commits are:

e804373 "CDH-9220. Fix TestStreamingStatus to check log contains error"
e809c60 "CDH-9220. TestStreamingStatus failing - regression due to CDH-8955"
6381204 "Backport MAPREDUCE-4800. Remove Unnecessary code from MapTaskStatus."
72a156f "Backport MAPREDUCE-2492. The new MapReduce API should make available task's progress to the task."

Reason: Maintain binary compatibility for rolling upgrade
Ref: CDH-9701
---
 .../hadoop/mrunit/mapreduce/mock/MockReporter.java |    5 --
 .../apache/hadoop/mrunit/mock/MockReporter.java    |    4 --
 .../hadoop/streaming/TestStreamingStatus.java      |    6 +-
 .../mapred/org/apache/hadoop/mapred/MapTask.java   |   21 --------
 .../org/apache/hadoop/mapred/MapTaskStatus.java    |   55 ++------------------
 .../mapred/org/apache/hadoop/mapred/Reporter.java  |   10 ----
 .../src/mapred/org/apache/hadoop/mapred/Task.java  |    5 --
 .../hadoop/mapred/TaskAttemptContextImpl.java      |    5 --
 .../org/apache/hadoop/mapred/TaskStatus.java       |   35 ++-----------
 .../apache/hadoop/mapreduce/StatusReporter.java    |    6 --
 .../hadoop/mapreduce/TaskAttemptContext.java       |    7 ---
 .../mapreduce/lib/map/MultithreadedMapper.java     |    4 --
 .../hadoop/mapreduce/lib/map/WrappedMapper.java    |    5 --
 .../mapreduce/lib/output/MultipleOutputs.java      |    5 --
 .../mapreduce/lib/reduce/WrappedReducer.java       |    5 --
 .../mapreduce/task/TaskAttemptContextImpl.java     |    8 ---
 .../org/apache/hadoop/mapred/UtilsForTests.java    |   13 +----
 .../apache/hadoop/mapreduce/MapReduceTestUtil.java |    4 --
 .../apache/hadoop/mapreduce/TestTaskContext.java   |   53 +------------------
 19 files changed, 16 insertions(+), 240 deletions(-)

diff --git a/hadoop-mapreduce1-project/src/contrib/mrunit/src/java/org/apache/hadoop/mrunit/mapreduce/mock/MockReporter.java b/hadoop-mapreduce1-project/src/contrib/mrunit/src/java/org/apache/hadoop/mrunit/mapreduce/mock/MockReporter.java
index 621344a..cc425fe 100644
--- a/hadoop-mapreduce1-project/src/contrib/mrunit/src/java/org/apache/hadoop/mrunit/mapreduce/mock/MockReporter.java
+++ b/hadoop-mapreduce1-project/src/contrib/mrunit/src/java/org/apache/hadoop/mrunit/mapreduce/mock/MockReporter.java
@@ -58,10 +58,5 @@ public class MockReporter extends StatusReporter {
 
     return counter;
   }
-  
-  @Override
-  public float getProgress() {
-    return 0;
-  }
 }
 
diff --git a/hadoop-mapreduce1-project/src/contrib/mrunit/src/java/org/apache/hadoop/mrunit/mock/MockReporter.java b/hadoop-mapreduce1-project/src/contrib/mrunit/src/java/org/apache/hadoop/mrunit/mock/MockReporter.java
index 03bbf6c..1fb9fa1 100644
--- a/hadoop-mapreduce1-project/src/contrib/mrunit/src/java/org/apache/hadoop/mrunit/mock/MockReporter.java
+++ b/hadoop-mapreduce1-project/src/contrib/mrunit/src/java/org/apache/hadoop/mrunit/mock/MockReporter.java
@@ -92,9 +92,5 @@ public class MockReporter implements Reporter {
 
     return counter;
   }
-  
-  public float getProgress() {
-    return 0;
-  };
 }
 
diff --git a/hadoop-mapreduce1-project/src/contrib/streaming/src/test/org/apache/hadoop/streaming/TestStreamingStatus.java b/hadoop-mapreduce1-project/src/contrib/streaming/src/test/org/apache/hadoop/streaming/TestStreamingStatus.java
index 6c0a416..1269449 100644
--- a/hadoop-mapreduce1-project/src/contrib/streaming/src/test/org/apache/hadoop/streaming/TestStreamingStatus.java
+++ b/hadoop-mapreduce1-project/src/contrib/streaming/src/test/org/apache/hadoop/streaming/TestStreamingStatus.java
@@ -280,8 +280,8 @@ public class TestStreamingStatus {
       finalPhaseInTask = "reduce";
     }
     assertEquals(1, reports.length);
-    assertEquals(expectedStatus + " > "
-        + (finalPhaseInTask == null ? "sort" : finalPhaseInTask),
+    assertEquals(expectedStatus +
+        (finalPhaseInTask == null ? "" : " > " + finalPhaseInTask),
         reports[0].getState());
   }
 
@@ -307,7 +307,7 @@ public class TestStreamingStatus {
 
     // trim() is called on expectedStderr here because the method
     // MapReduceTestUtil.readTaskLog() returns trimmed String.
-    assertTrue(log.contains(expectedStderr.trim()));
+    assertTrue(log.equals(expectedStderr.trim()));
   }
 
   // Validate if user counter is incremented properly
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/MapTask.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/MapTask.java
index 8898563..e70bf4f 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/MapTask.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/MapTask.java
@@ -87,12 +87,8 @@ class MapTask extends Task {
 
   private static final Log LOG = LogFactory.getLog(MapTask.class.getName());
 
-  private Progress mapPhase;
-  private Progress sortPhase;
-
   {   // set phase for this task
     setPhase(TaskStatus.Phase.MAP); 
-    getProgress().setStatus("map");
   }
 
   public MapTask() {
@@ -304,17 +300,6 @@ class MapTask extends Task {
     throws IOException, ClassNotFoundException, InterruptedException {
     this.umbilical = umbilical;
 
-    // If there are no reducers then there won't be any sort. Hence the map 
-    // phase will govern the entire attempt's progress.
-    if (conf.getNumReduceTasks() == 0) {
-      mapPhase = getProgress().addPhase("map", 1.0f);
-    } else {
-      // If there are reducers then the entire attempt's progress will be 
-      // split between the map phase (67%) and the sort phase (33%).
-      mapPhase = getProgress().addPhase("map", 0.667f);
-      sortPhase  = getProgress().addPhase("sort", 0.333f);
-    }
-
     // start thread that will handle communication with parent
     TaskReporter reporter = new TaskReporter(getProgress(), umbilical,
         jvmContext);
@@ -406,12 +391,6 @@ class MapTask extends Task {
 
     try {
       runner.run(in, new OldOutputCollector(collector, conf), reporter);
-      mapPhase.complete();
-      // start the sort phase only if there are reducers
-      if (numReduceTasks > 0) {
-        setPhase(TaskStatus.Phase.SORT);
-      }
-      statusUpdate(umbilical);
       collector.flush();
     } finally {
       //close
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/MapTaskStatus.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/MapTaskStatus.java
index 2607771..8d5cf00 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/MapTaskStatus.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/MapTaskStatus.java
@@ -18,15 +18,9 @@
 
 package org.apache.hadoop.mapred;
 
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-
 
 class MapTaskStatus extends TaskStatus {
 
-  private long mapFinishTime;
-  
   public MapTaskStatus() {}
 
   public MapTaskStatus(TaskAttemptID taskid, float progress, int numSlots,
@@ -41,19 +35,6 @@ class MapTaskStatus extends TaskStatus {
     return true;
   }
 
-  /**
-   * Sets finishTime. 
-   * @param finishTime finish time of task.
-   */
-  @Override
-  void setFinishTime(long finishTime) {
-    super.setFinishTime(finishTime);
-    // set mapFinishTime if it hasn't been set before
-    if (getMapFinishTime() == 0) {
-      setMapFinishTime(finishTime);
-    }
-  }
-  
   @Override
   public long getShuffleFinishTime() {
     throw new UnsupportedOperationException("getShuffleFinishTime() not supported for MapTask");
@@ -65,40 +46,12 @@ class MapTaskStatus extends TaskStatus {
   }
 
   @Override
-  public long getMapFinishTime() {
-    return mapFinishTime;
-  }
-  
-  @Override
-  void setMapFinishTime(long mapFinishTime) {
-    this.mapFinishTime = mapFinishTime;
-  }
-  
-  @Override
-  synchronized void statusUpdate(TaskStatus status) {
-    super.statusUpdate(status);
-    
-    if (status.getMapFinishTime() != 0) {
-      this.mapFinishTime = status.getMapFinishTime();
-    }
-  }
-  
-  @Override
-  public void readFields(DataInput in) throws IOException {
-    super.readFields(in);
-    mapFinishTime = in.readLong();
-  }
-  
-  @Override
-  public void write(DataOutput out) throws IOException {
-    super.write(out);
-    out.writeLong(mapFinishTime);
+  public long getSortFinishTime() {
+    throw new UnsupportedOperationException("getSortFinishTime() not supported for MapTask");
   }
 
   @Override
-  public void addFetchFailedMap(TaskAttemptID mapTaskId) {
-    throw new UnsupportedOperationException
-                ("addFetchFailedMap() not supported for MapTask");
+  void setSortFinishTime(long sortFinishTime) {
+    throw new UnsupportedOperationException("setSortFinishTime() not supported for MapTask");
   }
-
 }
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/Reporter.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/Reporter.java
index 9a3bc41..14f171d 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/Reporter.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/Reporter.java
@@ -61,10 +61,6 @@ public interface Reporter extends Progressable {
       public InputSplit getInputSplit() throws UnsupportedOperationException {
         throw new UnsupportedOperationException("NULL reporter has no input");
       }
-      @Override
-      public float getProgress() {
-        return 0;
-      }
     };
 
   /**
@@ -121,10 +117,4 @@ public interface Reporter extends Progressable {
    */
   public abstract InputSplit getInputSplit() 
     throws UnsupportedOperationException;
-  
-  /**
-   * Get the progress of the task. Progress is represented as a number between
-   * 0 and 1 (inclusive).
-   */
-  public float getProgress();
 }
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/Task.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/Task.java
index 655f59b..e7fe59c 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/Task.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/Task.java
@@ -577,11 +577,6 @@ abstract public class Task implements Writable, Configurable {
       // indicate that progress update needs to be sent
       setProgressFlag();
     }
-    
-    public float getProgress() {
-      return taskProgress.getProgress();
-    }
-    
     public void progress() {
       // indicate that progress update needs to be sent
       setProgressFlag();
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskAttemptContextImpl.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskAttemptContextImpl.java
index 9e2f55e..2bd9093 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskAttemptContextImpl.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskAttemptContextImpl.java
@@ -56,11 +56,6 @@ public class TaskAttemptContextImpl
   public JobConf getJobConf() {
     return (JobConf) getConfiguration();
   }
-  
-  @Override
-  public float getProgress() {
-    return reporter.getProgress();
-  }
 
   @Override
   public Counter getCounter(Enum<?> counterName) {
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskStatus.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskStatus.java
index af3abe2..f6e0e73 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskStatus.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapred/TaskStatus.java
@@ -207,32 +207,11 @@ public abstract class TaskStatus implements Writable, Cloneable {
   void setShuffleFinishTime(long shuffleFinishTime) {}
 
   /**
-   * Get map phase finish time for the task. If map finsh time was not set due
-   * to sort phase ending within same heartbeat interval, it is set to finish
-   * time of next phase i.e. sort phase when it is set.
-   * 
-   * @return 0 if mapFinishTime, sortFinishTime are not set. else it returns
-   *         approximate map finish time.
-   */
-  public long getMapFinishTime() {
-    return 0;
-  }
-
-  /**
-   * Set map phase finish time.
-   * 
-   * @param mapFinishTime
-   */
-  void setMapFinishTime(long mapFinishTime) {
-  }
-
-  /**
-   * Get sort finish time for the task,. If sort finish time was not set due to
-   * sort and reduce phase finishing in same heartebat interval, it is set to
-   * finish time, when finish time is set.
-   * 
-   * @return 0 if sort finish time and finish time are not set, else returns
-   *         sort finish time if that is set, else it returns finish time.
+   * Get sort finish time for the task,. If sort finish time was not set 
+   * due to sort and reduce phase finishing in same heartebat interval, it is 
+   * set to finish time, when finish time is set. 
+   * @return 0 if sort finish time and finish time are not set, else returns sort
+   * finish time if that is set, else it returns finish time. 
    */
   public long getSortFinishTime() {
     return 0;
@@ -287,11 +266,7 @@ public abstract class TaskStatus implements Writable, Cloneable {
     if (oldPhase != phase){
       // sort phase started
       if (phase == TaskStatus.Phase.SORT){
-        if (oldPhase == TaskStatus.Phase.MAP) {
-          setMapFinishTime(System.currentTimeMillis());
-        } else {
         setShuffleFinishTime(System.currentTimeMillis());
-        }
       }else if (phase == TaskStatus.Phase.REDUCE){
         setSortFinishTime(System.currentTimeMillis());
       }
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/StatusReporter.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/StatusReporter.java
index fe28a37..0bc4525 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/StatusReporter.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/StatusReporter.java
@@ -21,11 +21,5 @@ public abstract class StatusReporter {
   public abstract Counter getCounter(Enum<?> name);
   public abstract Counter getCounter(String group, String name);
   public abstract void progress();
-  /**
-   * Get the current progress.
-   * @return a number between 0.0 and 1.0 (inclusive) indicating the attempt's 
-   * progress.
-   */
-  public abstract float getProgress();
   public abstract void setStatus(String status);
 }
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/TaskAttemptContext.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/TaskAttemptContext.java
index 14c481e..e2a7e45 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/TaskAttemptContext.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/TaskAttemptContext.java
@@ -40,13 +40,6 @@ public interface TaskAttemptContext extends JobContext, Progressable {
    * @return the current status message
    */
   public String getStatus();
-  
-  /**
-   * The current progress of the task attempt.
-   * @return a number between 0.0 and 1.0 (inclusive) indicating the attempt's
-   * progress.
-   */
-  public abstract float getProgress();
 
   /**
    * Get the {@link Counter} for the given <code>counterName</code>.
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/map/MultithreadedMapper.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/map/MultithreadedMapper.java
index 1b1715f..47f138e 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/map/MultithreadedMapper.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/map/MultithreadedMapper.java
@@ -237,10 +237,6 @@ public class MultithreadedMapper<K1, V1, K2, V2>
       outer.setStatus(status);
     }
     
-    @Override
-    public float getProgress() {
-      return outer.getProgress();
-    }
   }
 
   private class MapRunner extends Thread {
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/map/WrappedMapper.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/map/WrappedMapper.java
index 452226f..ab011e5 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/map/WrappedMapper.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/map/WrappedMapper.java
@@ -306,10 +306,5 @@ public class WrappedMapper<KEYIN, VALUEIN, KEYOUT, VALUEOUT>
     public Credentials getCredentials() {
       return mapContext.getCredentials();
     }
-    
-    @Override
-    public float getProgress() {
-      return mapContext.getProgress();
-    }
   }
 }
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/output/MultipleOutputs.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/output/MultipleOutputs.java
index ea58af5..df012f5 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/output/MultipleOutputs.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/output/MultipleOutputs.java
@@ -469,11 +469,6 @@ public class MultipleOutputs<KEYOUT, VALUEOUT> {
     }
 
     @Override
-    public float getProgress() {
-      return context.getProgress();
-    }
-    
-    @Override
     public void setStatus(String status) {
       context.setStatus(status);
     }
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/reduce/WrappedReducer.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/reduce/WrappedReducer.java
index 119b626..b990b62 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/reduce/WrappedReducer.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/lib/reduce/WrappedReducer.java
@@ -310,10 +310,5 @@ public class WrappedReducer<KEYIN, VALUEIN, KEYOUT, VALUEOUT>
     public Credentials getCredentials() {
       return reduceContext.getCredentials();
     }
-    
-    @Override
-    public float getProgress() {
-      return reduceContext.getProgress();
-    }
   }
 }
diff --git a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/task/TaskAttemptContextImpl.java b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/task/TaskAttemptContextImpl.java
index e683226..0aa5965 100644
--- a/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/task/TaskAttemptContextImpl.java
+++ b/hadoop-mapreduce1-project/src/mapred/org/apache/hadoop/mapreduce/task/TaskAttemptContextImpl.java
@@ -103,13 +103,5 @@ public class TaskAttemptContextImpl extends JobContextImpl
     public Counter getCounter(String group, String name) {
       return new Counters().findCounter(group, name);
     }
-    public float getProgress() {
-      return 0f;
-    }
-  }
-  
-  @Override
-  public float getProgress() {
-    return reporter.getProgress();
   }
 }
\ No newline at end of file
diff --git a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/UtilsForTests.java b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/UtilsForTests.java
index 22e26cb..4786cbc 100644
--- a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/UtilsForTests.java
+++ b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapred/UtilsForTests.java
@@ -619,16 +619,6 @@ public class UtilsForTests {
   public static RunningJob runJob(JobConf conf, Path inDir, Path outDir, 
                                   int numMaps, int numReds) throws IOException {
 
-    String input = "The quick brown fox\n" + "has many silly\n"
-                   + "red fox sox\n";
-    
-    // submit the job and wait for it to complete
-    return runJob(conf, inDir, outDir, numMaps, numReds, input);
-  }
-  
-  // Start a job with the specified input and return its RunningJob object
-  static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, 
-                           int numReds, String input) throws IOException {
     FileSystem fs = FileSystem.get(conf);
     if (fs.exists(outDir)) {
       fs.delete(outDir, true);
@@ -636,7 +626,8 @@ public class UtilsForTests {
     if (!fs.exists(inDir)) {
       fs.mkdirs(inDir);
     }
-    
+    String input = "The quick brown fox\n" + "has many silly\n"
+        + "red fox sox\n";
     for (int i = 0; i < numMaps; ++i) {
       DataOutputStream file = fs.create(new Path(inDir, "part-" + i));
       file.writeBytes(input);
diff --git a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapreduce/MapReduceTestUtil.java b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapreduce/MapReduceTestUtil.java
index b49ff2b..aac5300 100644
--- a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapreduce/MapReduceTestUtil.java
+++ b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapreduce/MapReduceTestUtil.java
@@ -386,10 +386,6 @@ public class MapReduceTestUtil {
       }
       public void progress() {
       }
-      @Override
-      public float getProgress() {
-        return 0;
-      }
       public Counter getCounter(Enum<?> name) {
         return new Counters().findCounter(name);
       }
diff --git a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapreduce/TestTaskContext.java b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapreduce/TestTaskContext.java
index 6da3ded..ff52d54 100644
--- a/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapreduce/TestTaskContext.java
+++ b/hadoop-mapreduce1-project/src/test/org/apache/hadoop/mapreduce/TestTaskContext.java
@@ -18,46 +18,17 @@
 package org.apache.hadoop.mapreduce;
 
 import java.io.IOException;
-import java.util.Iterator;
- 
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.fs.FileSystem;
+
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.io.LongWritable;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.mapred.HadoopTestCase;
 import org.apache.hadoop.mapred.TaskReport;
-import org.apache.hadoop.mapreduce.MapReduceTestUtil.DataCopyMapper;
-import org.apache.hadoop.mapreduce.MapReduceTestUtil.DataCopyReducer;
-
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-import org.junit.Test;
 
 /**
- * Tests context api and {@link StatusReporter#getProgress()} via 
- * {@link TaskAttemptContext#getProgress()} API . 
+ * Tests context api. 
  */
 public class TestTaskContext extends HadoopTestCase {
-  private static final Path rootTempDir =
-    new Path(System.getProperty("test.build.data", "/tmp"));
-  private static final Path testRootTempDir = 
-    new Path(rootTempDir, "TestTaskContext");
-  
-  private static FileSystem fs = null;
-
-  @BeforeClass
-  public static void setup() throws Exception {
-    fs = FileSystem.getLocal(new Configuration());
-    fs.delete(testRootTempDir, true);
-    fs.mkdirs(testRootTempDir);
-  }
-
-  @AfterClass
-  public static void cleanup() throws Exception {
-    fs.delete(testRootTempDir, true);
-  }
-
   public TestTaskContext() throws IOException {
     super(HadoopTestCase.CLUSTER_MR , HadoopTestCase.LOCAL_FS, 1, 1);
   }
@@ -80,31 +51,11 @@ public class TestTaskContext extends HadoopTestCase {
    */
   public void testContextStatus()
       throws IOException, InterruptedException, ClassNotFoundException {
-    Path test = new Path(testRootTempDir, "testContextStatus");
-    
-    // test with 1 map and 0 reducers
-    // test with custom task status
     int numMaps = 1;
     Job job = MapReduceTestUtil.createJob(createJobConf(), new Path("in"),
         new Path("out"), numMaps, 0);
     job.setMapperClass(MyMapper.class);
     job.waitForCompletion(true);
     assertTrue("Job failed", job.isSuccessful());
-    
-    // test with 1 map and 1 reducer
-    // test with default task status
-    int numReduces = 1;
-    job = MapReduceTestUtil.createJob(createJobConf(), 
-            new Path(test, "in"), new Path(test, "out"), numMaps, numReduces);
-    job.setMapperClass(DataCopyMapper.class);
-    job.setReducerClass(DataCopyReducer.class);
-    job.setMapOutputKeyClass(Text.class);
-    job.setMapOutputValueClass(Text.class);
-    job.setOutputKeyClass(Text.class);
-    job.setOutputValueClass(Text.class);
-    
-    // run the job and wait for completion
-    job.waitForCompletion(true);
-    assertTrue("Job failed", job.isSuccessful());
   }
 }
-- 
1.7.0.4

