From 43932e7426475e598baacea638af8256e747f57f Mon Sep 17 00:00:00 2001
From: Alejandro Abdelnur <tucu@cloudera.com>
Date: Fri, 8 Jun 2012 12:45:00 -0700
Subject: [PATCH 1157/1357] MR1: MAPREDUCE-336. The logging level of the tasks should be configurable by the job

  Reason: customers request
  Author: Arun C Murthy
  Ref: CDH-3931
---
 src/mapred/mapred-default.xml                      |   16 +++++++++++++
 src/mapred/org/apache/hadoop/mapred/JobConf.java   |   24 ++++++++++++++++++++
 .../org/apache/hadoop/mapred/MapTaskRunner.java    |    7 +++++
 .../org/apache/hadoop/mapred/ReduceTaskRunner.java |    7 +++++
 .../org/apache/hadoop/mapred/TaskRunner.java       |   12 ++++++++-
 .../hadoop/mapred/TestTaskClasspathPrecedence.java |    5 ++++
 .../org/apache/hadoop/mapreduce/TestChild.java     |   18 ++++++++++++++-
 7 files changed, 86 insertions(+), 3 deletions(-)

diff --git a/src/mapred/mapred-default.xml b/src/mapred/mapred-default.xml
index 71a93dc..f6e3e78 100644
--- a/src/mapred/mapred-default.xml
+++ b/src/mapred/mapred-default.xml
@@ -549,6 +549,22 @@
 </property>
 
 <property>
+  <name>mapred.map.child.log.level</name>
+  <value>INFO</value>
+  <description>The logging level for the map task. The allowed levels are:
+  OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE and ALL.
+  </description>
+</property>
+
+<property>
+  <name>mapred.reduce.child.log.level</name>
+  <value>INFO</value>
+  <description>The logging level for the reduce task. The allowed levels are:
+  OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE and ALL.
+  </description>
+</property>
+
+<property>
   <name>mapred.inmem.merge.threshold</name>
   <value>1000</value>
   <description>The threshold, in terms of the number of files 
diff --git a/src/mapred/org/apache/hadoop/mapred/JobConf.java b/src/mapred/org/apache/hadoop/mapred/JobConf.java
index a011150..2e5dba3 100644
--- a/src/mapred/org/apache/hadoop/mapred/JobConf.java
+++ b/src/mapred/org/apache/hadoop/mapred/JobConf.java
@@ -46,6 +46,7 @@ import org.apache.hadoop.mapreduce.JobContext;
 import org.apache.hadoop.security.Credentials;
 import org.apache.hadoop.util.ReflectionUtils;
 import org.apache.hadoop.util.Tool;
+import org.apache.log4j.Level;
 
 /** 
  * A map/reduce job configuration.
@@ -324,6 +325,29 @@ public class JobConf extends Configuration {
   private Credentials credentials = new Credentials();
   
   /**
+   * Configuration key to set the logging {@link Level} for the map task.
+   *
+   * The allowed logging levels are:
+   * OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE and ALL.
+   */
+  public static final String MAPRED_MAP_TASK_LOG_LEVEL =
+    "mapred.map.child.log.level";
+
+  /**
+   * Configuration key to set the logging {@link Level} for the reduce task.
+   *
+   * The allowed logging levels are:
+   * OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE and ALL.
+   */
+  public static final String MAPRED_REDUCE_TASK_LOG_LEVEL =
+    "mapred.reduce.child.log.level";
+
+  /**
+   * Default logging level for map/reduce tasks.
+   */
+  public static final Level DEFAULT_LOG_LEVEL = Level.INFO;
+
+  /**
    * Construct a map/reduce job configuration.
    */
   public JobConf() {
diff --git a/src/mapred/org/apache/hadoop/mapred/MapTaskRunner.java b/src/mapred/org/apache/hadoop/mapred/MapTaskRunner.java
index 06ec76f..8e8e272 100644
--- a/src/mapred/org/apache/hadoop/mapred/MapTaskRunner.java
+++ b/src/mapred/org/apache/hadoop/mapred/MapTaskRunner.java
@@ -20,6 +20,7 @@ package org.apache.hadoop.mapred;
 import java.io.*;
 
 import org.apache.hadoop.mapred.TaskTracker.TaskInProgress;
+import org.apache.log4j.Level;
 
 /** Runs a map task. */
 class MapTaskRunner extends TaskRunner {
@@ -64,4 +65,10 @@ class MapTaskRunner extends TaskRunner {
     return jobConf.get(JobConf.MAPRED_MAP_TASK_ENV, super.getChildEnv(jobConf));
   }
 
+  @Override
+  public Level getLogLevel(JobConf jobConf) {
+    return Level.toLevel(jobConf.get(JobConf.MAPRED_MAP_TASK_LOG_LEVEL,
+                                     JobConf.DEFAULT_LOG_LEVEL.toString()));
+  }
+
 }
diff --git a/src/mapred/org/apache/hadoop/mapred/ReduceTaskRunner.java b/src/mapred/org/apache/hadoop/mapred/ReduceTaskRunner.java
index 6942895..6d1c310 100644
--- a/src/mapred/org/apache/hadoop/mapred/ReduceTaskRunner.java
+++ b/src/mapred/org/apache/hadoop/mapred/ReduceTaskRunner.java
@@ -20,6 +20,7 @@ package org.apache.hadoop.mapred;
 import java.io.*;
 
 import org.apache.hadoop.mapred.TaskTracker.TaskInProgress;
+import org.apache.log4j.Level;
 
 /** Runs a reduce task. */
 class ReduceTaskRunner extends TaskRunner {
@@ -69,4 +70,10 @@ class ReduceTaskRunner extends TaskRunner {
                        super.getChildEnv(jobConf));
   }
 
+  @Override
+  public Level getLogLevel(JobConf jobConf) {
+    return Level.toLevel(jobConf.get(JobConf.MAPRED_REDUCE_TASK_LOG_LEVEL,
+                                     JobConf.DEFAULT_LOG_LEVEL.toString()));
+  }
+
 }
diff --git a/src/mapred/org/apache/hadoop/mapred/TaskRunner.java b/src/mapred/org/apache/hadoop/mapred/TaskRunner.java
index 8925eba..c99dcba 100644
--- a/src/mapred/org/apache/hadoop/mapred/TaskRunner.java
+++ b/src/mapred/org/apache/hadoop/mapred/TaskRunner.java
@@ -46,6 +46,7 @@ import org.apache.hadoop.fs.permission.FsPermission;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.hadoop.util.Shell;
 import org.apache.hadoop.util.StringUtils;
+import org.apache.log4j.Level;
 
 /** Base class that runs a task in a separate process.  Tasks are run in a
  * separate process in order to isolate the map/reduce system code from bugs in
@@ -162,7 +163,14 @@ abstract class TaskRunner extends Thread {
   public String getChildEnv(JobConf jobConf) {
     return jobConf.get(JobConf.MAPRED_TASK_ENV);
   }
-  
+
+  /**
+   * Get the log {@link Level} for the child map/reduce tasks.
+   * @param jobConf
+   * @return the log-level for the child map/reduce tasks
+   */
+  public abstract Level getLogLevel(JobConf jobConf);
+
   @Override
   public final void run() {
     String errorInfo = "Child Error";
@@ -482,7 +490,7 @@ abstract class TaskRunner extends Thread {
       long logSize) {
     vargs.add("-Dhadoop.log.dir=" + 
         new File(System.getProperty("hadoop.log.dir")).getAbsolutePath());
-    vargs.add("-Dhadoop.root.logger=INFO,TLA");
+    vargs.add("-Dhadoop.root.logger=" + getLogLevel(conf).toString() + ",TLA");
     vargs.add("-D" + TaskLogAppender.TASKID_PROPERTY +  "=" + taskid);
     vargs.add("-D" + TaskLogAppender.ISCLEANUP_PROPERTY +
               "=" + t.isTaskCleanupTask());
diff --git a/src/test/org/apache/hadoop/mapred/TestTaskClasspathPrecedence.java b/src/test/org/apache/hadoop/mapred/TestTaskClasspathPrecedence.java
index dcc9afc..8d82f7c 100644
--- a/src/test/org/apache/hadoop/mapred/TestTaskClasspathPrecedence.java
+++ b/src/test/org/apache/hadoop/mapred/TestTaskClasspathPrecedence.java
@@ -61,6 +61,11 @@ public class TestTaskClasspathPrecedence {
       vargs.add(classPath);
       return vargs;
     }
+
+    @Override
+    public Level getLogLevel(JobConf jobConf) {
+      return Level.ALL;
+    }
   }
 
   @Before
diff --git a/src/test/org/apache/hadoop/mapreduce/TestChild.java b/src/test/org/apache/hadoop/mapreduce/TestChild.java
index dce45ca..51c6709 100644
--- a/src/test/org/apache/hadoop/mapreduce/TestChild.java
+++ b/src/test/org/apache/hadoop/mapreduce/TestChild.java
@@ -29,6 +29,7 @@ import org.apache.hadoop.io.LongWritable;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.mapred.HadoopTestCase;
 import org.apache.hadoop.mapred.JobConf;
+import org.apache.log4j.Level;
 
 public class TestChild extends HadoopTestCase {
   private static String TEST_ROOT_DIR =
@@ -68,6 +69,12 @@ public class TestChild extends HadoopTestCase {
                      mapJavaOpts, 
                      mapJavaOpts, MAP_OPTS_VAL);
       }
+
+      Level logLevel =
+        Level.toLevel(conf.get(JobConf.MAPRED_MAP_TASK_LOG_LEVEL,
+                               Level.INFO.toString()));
+      assertEquals(JobConf.MAPRED_MAP_TASK_LOG_LEVEL + "has value of " +
+                   logLevel, logLevel, Level.OFF);
     }
   }
   
@@ -94,6 +101,12 @@ public class TestChild extends HadoopTestCase {
                      reduceJavaOpts, 
                      reduceJavaOpts, REDUCE_OPTS_VAL);
       }
+
+      Level logLevel =
+        Level.toLevel(conf.get(JobConf.MAPRED_REDUCE_TASK_LOG_LEVEL,
+                               Level.INFO.toString()));
+      assertEquals(JobConf.MAPRED_REDUCE_TASK_LOG_LEVEL + "has value of " +
+                   logLevel, logLevel, Level.OFF);
     }
   }
   
@@ -107,7 +120,10 @@ public class TestChild extends HadoopTestCase {
       conf.set(JobConf.MAPRED_MAP_TASK_JAVA_OPTS, MAP_OPTS_VAL);
       conf.set(JobConf.MAPRED_REDUCE_TASK_JAVA_OPTS, REDUCE_OPTS_VAL);
     }
-    
+
+    conf.set(JobConf.MAPRED_MAP_TASK_LOG_LEVEL, Level.OFF.toString());
+    conf.set(JobConf.MAPRED_REDUCE_TASK_LOG_LEVEL, Level.OFF.toString());
+
     Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 
                 numMaps, numReds);
     job.setMapperClass(MyMapper.class);
-- 
1.7.0.4

