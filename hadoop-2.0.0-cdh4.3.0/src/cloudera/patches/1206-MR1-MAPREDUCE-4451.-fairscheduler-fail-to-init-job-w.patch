From 3005ab3b736bae3ba6d45b930bcc6fb7558178ca Mon Sep 17 00:00:00 2001
From: Alejandro Abdelnur <tucu@apache.org>
Date: Thu, 11 Oct 2012 21:53:25 +0000
Subject: [PATCH 1206/1357] MR1: MAPREDUCE-4451. fairscheduler fail to init job with kerberos authentication configured. (erik.fang via tucu)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/branch-1@1397330 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 82fae0f9071121bdcde24f04336a05901b120b85)

Reason: FairScheduler job initialization issues on secure cluster
Ref: CDH-7461
Author: Erik Fang
(cherry picked from commit 09f12262a74649171e086c2fff7a3d0ed6dd63a1)
---
 .../org/apache/hadoop/mapred/FairScheduler.java    |   53 +++++++++++++++++++-
 1 files changed, 52 insertions(+), 1 deletions(-)

diff --git a/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/FairScheduler.java b/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/FairScheduler.java
index 604a4ac..5f65a5b 100644
--- a/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/FairScheduler.java
+++ b/src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/FairScheduler.java
@@ -28,6 +28,9 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -265,6 +268,55 @@ public class FairScheduler extends TaskScheduler {
     }
   }
 
+  private class JobInitializer {
+    private final int DEFAULT_NUM_THREADS = 1;
+    private ThreadPoolExecutor threadPool;
+    private TaskTrackerManager ttm;
+    public JobInitializer(Configuration conf, TaskTrackerManager ttm) {
+      int numThreads = conf.getInt("mapred.jobinit.threads",
+          DEFAULT_NUM_THREADS);
+      threadPool = new ThreadPoolExecutor(numThreads, numThreads, 0L,
+					TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
+      // Pre-starting all threads to ensure the threads are executed as JobTracker
+      // instead of the user submitted the job, otherwise job initialization fails
+      // when security is enabled
+      if (threadPool.prestartAllCoreThreads() != numThreads) {
+          throw new RuntimeException("Failed to pre-start threads in JobInitializer");
+      }
+      this.ttm = ttm;
+    }
+
+    public void initJob(JobInfo jobInfo, JobInProgress job) {
+      if (!mockMode) {
+        threadPool.execute(new InitJob(jobInfo, job));
+      } else {
+        new InitJob(jobInfo, job).run();
+      }
+    }
+
+    class InitJob implements Runnable {
+      private JobInfo jobInfo;
+      private JobInProgress job;
+      public InitJob(JobInfo jobInfo, JobInProgress job) {
+        this.jobInfo = jobInfo;
+        this.job = job;
+      }
+      public void run() {
+        ttm.initJob(job);
+      }
+    }
+
+    void terminate() {
+      LOG.info("Shutting down thread pool");
+      threadPool.shutdownNow();
+      try {
+        threadPool.awaitTermination(1, TimeUnit.MINUTES);
+      } catch (InterruptedException e) {
+        // Ignore, we are in shutdown anyway.
+      }
+    }
+  }
+
   /**
    * Responsible for updating metrics when the metrics context requests it.
    */
@@ -1066,5 +1118,4 @@ public class FairScheduler extends TaskScheduler {
           + "file. Valid pools are: "
           + StringUtils.join(", ", declaredPools));
   }
-
 }
-- 
1.7.0.4

