From b616346e0c54b17a7d8fbdc9cf5bbd144cd77f16 Mon Sep 17 00:00:00 2001
From: Siddharth Seth <sseth@apache.org>
Date: Tue, 21 Aug 2012 22:27:11 +0000
Subject: [PATCH 0680/1357] YARN-22. Fix ContainerLogs to work if the log-dir is specified as a URI. (Contributed by Mayank Bansal)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1375829 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit cb9b62b9aa972484a415ce0ec943887a60fe161c)
---
 .../nodemanager/webapp/ContainerLogsPage.java      |   45 ++++++++-----
 .../nodemanager/webapp/TestContainerLogsPage.java  |   71 ++++++++++++++++++++
 2 files changed, 99 insertions(+), 17 deletions(-)
 create mode 100644 hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestContainerLogsPage.java

diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java
index ee01925..94c7f0e 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java
@@ -29,6 +29,8 @@ import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -53,6 +55,7 @@ import org.apache.hadoop.yarn.util.ConverterUtils;
 import org.apache.hadoop.yarn.webapp.YarnWebParams;
 import org.apache.hadoop.yarn.webapp.SubView;
 import org.apache.hadoop.yarn.webapp.view.HtmlBlock;
+import org.mortbay.log.Log;
 
 import com.google.inject.Inject;
 
@@ -198,12 +201,14 @@ public class ContainerLogsPage extends NMView {
       if (!$(CONTAINER_LOG_TYPE).isEmpty()) {
         File logFile = null;
         try {
-          logFile =
-              new File(this.dirsHandler.getLogPathToRead(
-                  ContainerLaunch.getRelativeContainerLogDir(
+          URI logPathURI = new URI(this.dirsHandler.getLogPathToRead(
+              ContainerLaunch.getRelativeContainerLogDir(
                   applicationId.toString(), containerId.toString())
-                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE))
-                  .toUri().getPath());
+                  + Path.SEPARATOR + $(CONTAINER_LOG_TYPE)).toString());
+          logFile = new File(logPathURI.getPath());
+        } catch (URISyntaxException e) {
+          html.h1("Cannot find this log on the local disk.");
+          return;
         } catch (Exception e) {
           html.h1("Cannot find this log on the local disk.");
           return;
@@ -278,14 +283,16 @@ public class ContainerLogsPage extends NMView {
         boolean foundLogFile = false;
         for (File containerLogsDir : containerLogsDirs) {
           File[] logFiles = containerLogsDir.listFiles();
-          Arrays.sort(logFiles);
-          for (File logFile : logFiles) {
-            foundLogFile = true;
-            html.p()
-                .a(url("containerlogs", $(CONTAINER_ID), $(APP_OWNER), 
-                    logFile.getName(), "?start=-4096"),
-                    logFile.getName() + " : Total file length is "
-                        + logFile.length() + " bytes.")._();
+          if (logFiles != null) {
+            Arrays.sort(logFiles);
+            for (File logFile : logFiles) {
+              foundLogFile = true;
+              html.p()
+                  .a(url("containerlogs", $(CONTAINER_ID), $(APP_OWNER),
+                      logFile.getName(), "?start=-4096"),
+                      logFile.getName() + " : Total file length is "
+                          + logFile.length() + " bytes.")._();
+            }
           }
         }
         if (!foundLogFile) {
@@ -297,13 +304,17 @@ public class ContainerLogsPage extends NMView {
     }
 
     static List<File> getContainerLogDirs(ContainerId containerId,
-            LocalDirsHandlerService dirsHandler) {
+        LocalDirsHandlerService dirsHandler) {
       List<String> logDirs = dirsHandler.getLogDirs();
       List<File> containerLogDirs = new ArrayList<File>(logDirs.size());
       for (String logDir : logDirs) {
-        String appIdStr = 
-            ConverterUtils.toString(
-                containerId.getApplicationAttemptId().getApplicationId());
+        try {
+          logDir = new URI(logDir).getPath();
+        } catch (URISyntaxException e) {
+          Log.warn(e.getMessage());
+        }
+        String appIdStr = ConverterUtils.toString(containerId
+            .getApplicationAttemptId().getApplicationId());
         File appLogDir = new File(logDir, appIdStr);
         String containerIdStr = ConverterUtils.toString(containerId);
         containerLogDirs.add(new File(appLogDir, containerIdStr));
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestContainerLogsPage.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestContainerLogsPage.java
new file mode 100644
index 0000000..28985f5
--- /dev/null
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestContainerLogsPage.java
@@ -0,0 +1,71 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.yarn.server.nodemanager.webapp;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
+import org.apache.hadoop.yarn.api.records.ApplicationId;
+import org.apache.hadoop.yarn.api.records.ContainerId;
+import org.apache.hadoop.yarn.conf.YarnConfiguration;
+import org.apache.hadoop.yarn.factories.RecordFactory;
+import org.apache.hadoop.yarn.factory.providers.RecordFactoryProvider;
+import org.apache.hadoop.yarn.server.nodemanager.LocalDirsHandlerService;
+import org.apache.hadoop.yarn.server.nodemanager.NodeHealthCheckerService;
+import org.apache.hadoop.yarn.server.nodemanager.containermanager.application.Application;
+import org.apache.hadoop.yarn.util.BuilderUtils;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestContainerLogsPage {
+
+  @Test
+  public void testContainerLogDirs() throws IOException {
+    String logdirwithFile = "file:///target/"
+        + TestNMWebServer.class.getSimpleName() + "LogDir";
+    Configuration conf = new Configuration();
+    conf.set(YarnConfiguration.NM_LOG_DIRS, logdirwithFile);
+    NodeHealthCheckerService healthChecker = new NodeHealthCheckerService();
+    healthChecker.init(conf);
+    LocalDirsHandlerService dirsHandler = healthChecker.getDiskHandler();
+    // Add an application and the corresponding containers
+    RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(conf);
+    String user = "nobody";
+    long clusterTimeStamp = 1234;
+    ApplicationId appId = BuilderUtils.newApplicationId(recordFactory,
+        clusterTimeStamp, 1);
+    Application app = mock(Application.class);
+    when(app.getUser()).thenReturn(user);
+    when(app.getAppId()).thenReturn(appId);
+    ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(
+        appId, 1);
+    ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId,
+        appAttemptId, 0);
+    List<File> files = null;
+    files = ContainerLogsPage.ContainersLogsBlock.getContainerLogDirs(
+        container1, dirsHandler);
+    Assert.assertTrue(!(files.get(0).toString().contains("file:")));
+  }
+}
-- 
1.7.0.4

