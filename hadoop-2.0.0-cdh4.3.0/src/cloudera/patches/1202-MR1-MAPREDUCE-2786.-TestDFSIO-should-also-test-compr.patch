From 580667885455d6eb59b6145796dee94598f49d8c Mon Sep 17 00:00:00 2001
From: Robert Kanter <rkanter@cloudera.com>
Date: Fri, 5 Oct 2012 16:37:04 -0700
Subject: [PATCH 1202/1357] MR1: MAPREDUCE-2786. TestDFSIO should also test compression reading/writing from command-line.

---
 src/test/org/apache/hadoop/fs/IOMapperBase.java |   19 +++++++++++++++++++
 src/test/org/apache/hadoop/fs/TestDFSIO.java    |   20 ++++++++++++++++++--
 2 files changed, 37 insertions(+), 2 deletions(-)

diff --git a/src/test/org/apache/hadoop/fs/IOMapperBase.java b/src/test/org/apache/hadoop/fs/IOMapperBase.java
index 69741f8..fe1af6a 100644
--- a/src/test/org/apache/hadoop/fs/IOMapperBase.java
+++ b/src/test/org/apache/hadoop/fs/IOMapperBase.java
@@ -22,7 +22,9 @@ import java.net.InetAddress;
 import org.apache.hadoop.conf.Configured;
 import org.apache.hadoop.io.LongWritable;
 import org.apache.hadoop.io.Text;
+import org.apache.hadoop.io.compress.CompressionCodec;
 import org.apache.hadoop.mapred.*;
+import org.apache.hadoop.util.ReflectionUtils;
 
 /**
  * Base mapper class for IO operations.
@@ -41,6 +43,7 @@ public abstract class IOMapperBase<T> extends Configured
   protected int bufferSize;
   protected FileSystem fs;
   protected String hostName;
+  protected CompressionCodec compressionCodec;
 
   public IOMapperBase() { 
   }
@@ -59,6 +62,22 @@ public abstract class IOMapperBase<T> extends Configured
     } catch(Exception e) {
       hostName = "localhost";
     }
+    
+    //grab compression
+    String compression = getConf().get("test.io.compression.class", null);
+    Class<? extends CompressionCodec> codec;
+
+    //try to initialize codec
+    try {
+      codec = (compression == null) ? null : 
+     Class.forName(compression).asSubclass(CompressionCodec.class);
+    } catch(Exception e) {
+      throw new RuntimeException("Compression codec not found: ", e);
+    }
+
+    if(codec != null) {
+      compressionCodec = (CompressionCodec) ReflectionUtils.newInstance(codec, getConf());
+    }
   }
 
   public void close() throws IOException {
diff --git a/src/test/org/apache/hadoop/fs/TestDFSIO.java b/src/test/org/apache/hadoop/fs/TestDFSIO.java
index de7baec..4a685dc 100644
--- a/src/test/org/apache/hadoop/fs/TestDFSIO.java
+++ b/src/test/org/apache/hadoop/fs/TestDFSIO.java
@@ -23,6 +23,7 @@ import java.io.DataInputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.PrintStream;
@@ -298,7 +299,9 @@ public class TestDFSIO extends Configured implements Tool {
       // create file
       OutputStream out;
       out = fs.create(new Path(getDataDir(getConf()), name), true, bufferSize);
-      
+
+      if(compressionCodec != null) out = compressionCodec.createOutputStream(out);
+
       try {
         // write to the file
         long nrRemaining;
@@ -361,6 +364,8 @@ public class TestDFSIO extends Configured implements Tool {
       OutputStream out;
       out = fs.append(new Path(getDataDir(getConf()), name), bufferSize);
 
+      if(compressionCodec != null) out = compressionCodec.createOutputStream(out);
+
       try {
         // write to the file
         long nrRemaining;
@@ -397,7 +402,10 @@ public class TestDFSIO extends Configured implements Tool {
 		       long totalSize // in bytes
                        ) throws IOException {
 
-      DataInputStream in = fs.open(new Path(getDataDir(getConf()), name));
+      InputStream in = fs.open(new Path(getDataDir(getConf()), name));
+
+      if(compressionCodec != null) in = compressionCodec.createInputStream(in);
+
       long actualSize = 0;
       try {
         while (actualSize < totalSize) {
@@ -538,6 +546,7 @@ public class TestDFSIO extends Configured implements Tool {
     long fileSize = 1*MEGA;
     int nrFiles = 1;
     String resFileName = DEFAULT_RES_FILE_NAME;
+    String compressionClass = null;
     boolean isSequential = false;
     String version = TestDFSIO.class.getSimpleName() + ".0.0.6";
     
@@ -557,6 +566,8 @@ public class TestDFSIO extends Configured implements Tool {
         testType = TEST_TYPE_CLEANUP;
       } else if (args[i].startsWith("-seq")) {
         isSequential = true;
+      } else if (args[i].startsWith("-compression")) {
+        compressionClass = args[++i];
       } else if (args[i].equals("-nrFiles")) {
         nrFiles = Integer.parseInt(args[++i]);
       } else if (args[i].equals("-fileSize")) {
@@ -576,6 +587,11 @@ public class TestDFSIO extends Configured implements Tool {
     LOG.info("bufferSize = " + bufferSize);
     LOG.info("baseDir = " + getBaseDir(config));
 
+    if(compressionClass != null) {
+      config.set("test.io.compression.class", compressionClass);
+      LOG.info("compressionClass = " + compressionClass);
+    }
+
     config.setInt("test.io.file.buffer.size", bufferSize);
     config.setBoolean(DFSConfigKeys.DFS_SUPPORT_APPEND_KEY, true);
     FileSystem fs = FileSystem.get(config);
-- 
1.7.0.4

