From 8e1e13b46edc2fb06f9e3d15a73cde19d96d0df6 Mon Sep 17 00:00:00 2001
From: Tom White <tom@cloudera.com>
Date: Wed, 19 Dec 2012 12:46:45 +0000
Subject: [PATCH 1231/1357] MR1: CLOUDERA-BUILD. JT HA: should not need to specify mapred.ha.jobtracker.id

Reason: Bug
Ref: CDH-9490
Author: Tom White
---
 src/mapred/org/apache/hadoop/mapred/HAUtil.java    |   13 ++++++----
 .../mapred/tools/MRZKFailoverController.java       |    9 ++++---
 .../org/apache/hadoop/mapred/MiniMRHACluster.java  |   25 ++++++++++---------
 src/test/org/apache/hadoop/mapred/TestHAUtil.java  |   26 +++++++++++++++++++-
 .../hadoop/mapred/TestMRZKFailoverController.java  |    8 ++++--
 5 files changed, 56 insertions(+), 25 deletions(-)

diff --git a/src/mapred/org/apache/hadoop/mapred/HAUtil.java b/src/mapred/org/apache/hadoop/mapred/HAUtil.java
index cfa2847..d971ddb 100644
--- a/src/mapred/org/apache/hadoop/mapred/HAUtil.java
+++ b/src/mapred/org/apache/hadoop/mapred/HAUtil.java
@@ -226,7 +226,13 @@ public class HAUtil {
       }
     }
 
-    if (found > 1) { // Only one address must match the local address
+    // Only one address must match the local address
+    if (found == 0) {
+      String msg = "Configuration has no addresses that match "
+          + "local node's address. Please configure the system with "
+          + MR_HA_JOBTRACKER_ID_KEY;
+      throw new HadoopIllegalArgumentException(msg);
+    } else if (found > 1) {
       String msg = "Configuration has multiple addresses that match "
           + "local node's address. Please configure the system with "
           + MR_HA_JOBTRACKER_ID_KEY;
@@ -273,10 +279,7 @@ public class HAUtil {
   
   private static String getKey(String prefix, Configuration conf) {
     String logicalName = getLogicalName(conf);
-    String jtId = conf.get(MR_HA_JOBTRACKER_ID_KEY);
-    if (jtId == null) {
-      throw new IllegalArgumentException(MR_HA_JOBTRACKER_ID_KEY + " not set.");
-    }
+    String jtId = getJobTrackerId(conf);
     return addKeySuffixes(prefix, logicalName, jtId);
   }
   
diff --git a/src/mapred/org/apache/hadoop/mapred/tools/MRZKFailoverController.java b/src/mapred/org/apache/hadoop/mapred/tools/MRZKFailoverController.java
index 1f8721f..88a7002 100644
--- a/src/mapred/org/apache/hadoop/mapred/tools/MRZKFailoverController.java
+++ b/src/mapred/org/apache/hadoop/mapred/tools/MRZKFailoverController.java
@@ -114,14 +114,15 @@ public class MRZKFailoverController extends ZKFailoverController {
   
   public static MRZKFailoverController create(Configuration conf) {
     Configuration localJTConf = MRHAAdmin.addSecurityConfiguration(conf);
-    
-    if (!HAUtil.isHAEnabled(localJTConf, HAUtil.getLogicalName(localJTConf))) {
+
+    String logicalName = HAUtil.getLogicalName(localJTConf);
+    if (!HAUtil.isHAEnabled(localJTConf, logicalName)) {
       throw new HadoopIllegalArgumentException(
           "HA is not enabled for this jobtracker.");
     }
     String jtId = HAUtil.getJobTrackerId(localJTConf);
-    HAUtil.setGenericConf(localJTConf, "logicaljt", jtId, HAUtil.JOB_TRACKER_SPECIFIC_KEYS);
-    HAUtil.setGenericConf(localJTConf, "logicaljt", jtId, ZKFC_CONF_KEYS);
+    HAUtil.setGenericConf(localJTConf, logicalName, jtId, HAUtil.JOB_TRACKER_SPECIFIC_KEYS);
+    HAUtil.setGenericConf(localJTConf, logicalName, jtId, ZKFC_CONF_KEYS);
     
     JobTrackerHAServiceTarget localTarget = new JobTrackerHAServiceTarget(
         localJTConf, jtId);
diff --git a/src/test/org/apache/hadoop/mapred/MiniMRHACluster.java b/src/test/org/apache/hadoop/mapred/MiniMRHACluster.java
index 23ef4fb..4dd95a0 100644
--- a/src/test/org/apache/hadoop/mapred/MiniMRHACluster.java
+++ b/src/test/org/apache/hadoop/mapred/MiniMRHACluster.java
@@ -36,6 +36,8 @@ public class MiniMRHACluster {
   private static final Log LOG = 
     LogFactory.getLog(MiniMRHACluster.class);
 
+  public static final String LOGICAL_NAME = "logicaljt";
+
   private Configuration conf; // client and tt configuration
   private List<JobTrackerHADaemon> jtHaDaemonList = new ArrayList<JobTrackerHADaemon>();
 
@@ -78,7 +80,6 @@ public class MiniMRHACluster {
   }
   
   public static void configureLogicalName(Configuration conf) {
-    String logicalName = "logicaljt";
     String jt1Id = "jt1";
     String jt2Id = "jt2";
     
@@ -95,22 +96,22 @@ public class MiniMRHACluster {
     String jt1HttpRedirectAddress = "localhost:50030";
     String jt2HttpRedirectAddress = "localhost:50031";
     
-    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_JOBTRACKER_RPC_ADDRESS_KEY, logicalName, jt1Id), jt1Address);
-    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_JOBTRACKER_RPC_ADDRESS_KEY, logicalName, jt2Id), jt2Address);
+    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_JOBTRACKER_RPC_ADDRESS_KEY, LOGICAL_NAME, jt1Id), jt1Address);
+    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_JOBTRACKER_RPC_ADDRESS_KEY, LOGICAL_NAME, jt2Id), jt2Address);
     
-    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_HA_JOBTRACKER_RPC_ADDRESS_KEY, logicalName, jt1Id), jt1HaAddress);
-    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_HA_JOBTRACKER_RPC_ADDRESS_KEY, logicalName, jt2Id), jt2HaAddress);
+    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_HA_JOBTRACKER_RPC_ADDRESS_KEY, LOGICAL_NAME, jt1Id), jt1HaAddress);
+    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_HA_JOBTRACKER_RPC_ADDRESS_KEY, LOGICAL_NAME, jt2Id), jt2HaAddress);
 
-    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_JOBTRACKER_HTTP_ADDRESS_KEY, logicalName, jt1Id), jt1HttpAddress);
-    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_JOBTRACKER_HTTP_ADDRESS_KEY, logicalName, jt2Id), jt2HttpAddress);
+    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_JOBTRACKER_HTTP_ADDRESS_KEY, LOGICAL_NAME, jt1Id), jt1HttpAddress);
+    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_JOBTRACKER_HTTP_ADDRESS_KEY, LOGICAL_NAME, jt2Id), jt2HttpAddress);
 
-    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_HA_JOBTRACKER_HTTP_REDIRECT_ADDRESS_KEY, logicalName, jt1Id), jt1HttpRedirectAddress);
-    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_HA_JOBTRACKER_HTTP_REDIRECT_ADDRESS_KEY, logicalName, jt2Id), jt2HttpRedirectAddress);
+    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_HA_JOBTRACKER_HTTP_REDIRECT_ADDRESS_KEY, LOGICAL_NAME, jt1Id), jt1HttpRedirectAddress);
+    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_HA_JOBTRACKER_HTTP_REDIRECT_ADDRESS_KEY, LOGICAL_NAME, jt2Id), jt2HttpRedirectAddress);
 
-    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_HA_JOBTRACKERS_KEY_PREFIX, logicalName), jt1Id + "," + jt2Id);
-    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_CLIENT_FAILOVER_PROXY_PROVIDER_KEY_PREFIX, logicalName), ConfiguredFailoverProxyProvider.class.getName());
+    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_HA_JOBTRACKERS_KEY_PREFIX, LOGICAL_NAME), jt1Id + "," + jt2Id);
+    conf.set(HAUtil.addKeySuffixes(HAUtil.MR_CLIENT_FAILOVER_PROXY_PROVIDER_KEY_PREFIX, LOGICAL_NAME), ConfiguredFailoverProxyProvider.class.getName());
     
-    conf.set(HAUtil.MR_JOBTRACKER_ADDRESS_KEY, logicalName);
+    conf.set(HAUtil.MR_JOBTRACKER_ADDRESS_KEY, LOGICAL_NAME);
   }
   
   // Wait until at least one JT is active
diff --git a/src/test/org/apache/hadoop/mapred/TestHAUtil.java b/src/test/org/apache/hadoop/mapred/TestHAUtil.java
index c9910a9..8c47cb1 100644
--- a/src/test/org/apache/hadoop/mapred/TestHAUtil.java
+++ b/src/test/org/apache/hadoop/mapred/TestHAUtil.java
@@ -21,6 +21,7 @@ package org.apache.hadoop.mapred;
 import static org.apache.hadoop.mapred.HAUtil.MR_HA_JOBTRACKERS_KEY_PREFIX;
 import static org.apache.hadoop.mapred.HAUtil.MR_JOBTRACKER_ADDRESS_KEY;
 import static org.apache.hadoop.mapred.HAUtil.MR_HA_JOBTRACKER_ID_KEY;
+import static org.apache.hadoop.mapred.HAUtil.MR_HA_JOBTRACKER_RPC_ADDRESS_KEY;
 import static org.apache.hadoop.mapred.HAUtil.MR_JOBTRACKER_RPC_ADDRESS_KEY;
 import static org.apache.hadoop.mapred.HAUtil.addKeySuffixes;
 import static org.apache.hadoop.mapred.HAUtil.getHaJtRpcAddresses;
@@ -28,10 +29,12 @@ import static org.apache.hadoop.mapred.HAUtil.getJobTrackerId;
 import static org.apache.hadoop.mapred.HAUtil.getJobTrackerIdOfOtherNode;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 import java.net.InetSocketAddress;
 import java.util.Map;
 
+import org.apache.hadoop.HadoopIllegalArgumentException;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.net.NetUtils;
 
@@ -78,7 +81,14 @@ public class TestHAUtil {
     assertEquals("Honors " + MR_HA_JOBTRACKER_ID_KEY + " if set",
         "jt1", getJobTrackerId(conf));
   }
-  
+
+  @Test(expected = HadoopIllegalArgumentException.class)
+  public void testGetJobTrackerIdWithNoMatch() throws Exception {
+    // change conf so neither jt1 nor jt2 match
+    conf.set(addKeySuffixes(MR_JOBTRACKER_RPC_ADDRESS_KEY, "logicalName", "jt2"), "2.3.4.5:8022");
+    getJobTrackerId(conf);
+  }
+
   @Test
   public void testGetJobTrackerIdOfOtherNode() throws Exception {
     assertEquals(MR_HA_JOBTRACKER_ID_KEY + " not set", "jt1",
@@ -88,4 +98,18 @@ public class TestHAUtil {
         getJobTrackerIdOfOtherNode(conf));
   }
 
+  @Test
+  public void testGetJtHaRpcAddress() throws Exception {
+    final String JT1_HA_ADDRESS = "1.2.3.4:10000";
+    final String JT2_HA_ADDRESS = "localhost:10000";
+    conf.set(addKeySuffixes(MR_HA_JOBTRACKER_RPC_ADDRESS_KEY, "logicalName", "jt1"), JT1_HA_ADDRESS);
+    conf.set(addKeySuffixes(MR_HA_JOBTRACKER_RPC_ADDRESS_KEY, "logicalName", "jt2"), JT2_HA_ADDRESS);
+    assertEquals("Matches localhost when " + MR_HA_JOBTRACKER_ID_KEY +
+        " not set", "localhost",
+        HAUtil.getJtHaRpcAddress(conf).getHostName());
+    conf.set(MR_HA_JOBTRACKER_ID_KEY, "jt1");
+    assertEquals("Honors " + MR_HA_JOBTRACKER_ID_KEY + " if set",
+        "1.2.3.4", HAUtil.getJtHaRpcAddress(conf).getHostName());
+  }
+
 }
diff --git a/src/test/org/apache/hadoop/mapred/TestMRZKFailoverController.java b/src/test/org/apache/hadoop/mapred/TestMRZKFailoverController.java
index 87b5199..b11ab07 100644
--- a/src/test/org/apache/hadoop/mapred/TestMRZKFailoverController.java
+++ b/src/test/org/apache/hadoop/mapred/TestMRZKFailoverController.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.mapred;
 
+import static org.apache.hadoop.mapred.HAUtil.addKeySuffixes;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
@@ -69,8 +70,9 @@ public class TestMRZKFailoverController extends ClientBaseWithFixes {
   
   @Before
   public void setup() throws Exception {
+    String logicalName = MiniMRHACluster.LOGICAL_NAME;
     conf = new Configuration();
-    conf.set(ZKFailoverController.ZK_QUORUM_KEY + ".logicaljt", hostPort);
+    conf.set(addKeySuffixes(ZKFailoverController.ZK_QUORUM_KEY, logicalName), hostPort);
     conf.set(HAUtil.MR_HA_FENCING_METHODS_KEY,
         AlwaysSucceedFencer.class.getName());
     conf.setBoolean(HAUtil.MR_HA_AUTO_FAILOVER_ENABLED_KEY, true);
@@ -81,8 +83,8 @@ public class TestMRZKFailoverController extends ClientBaseWithFixes {
         CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,
         0);
     
-    conf.setInt(HAUtil.MR_HA_ZKFC_PORT_KEY + ".logicaljt.jt1", 10003);
-    conf.setInt(HAUtil.MR_HA_ZKFC_PORT_KEY + ".logicaljt.jt2", 10004);
+    conf.setInt(addKeySuffixes(HAUtil.MR_HA_ZKFC_PORT_KEY, logicalName, "jt1"), 10003);
+    conf.setInt(addKeySuffixes(HAUtil.MR_HA_ZKFC_PORT_KEY, logicalName, "jt2"), 10004);
 
     cluster = new MiniMRHACluster(conf);
 
-- 
1.7.0.4

