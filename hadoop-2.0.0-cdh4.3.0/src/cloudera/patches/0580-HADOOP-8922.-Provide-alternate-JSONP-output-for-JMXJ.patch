From 6aa97ff9dcf9fe785060df1a6e56a6c8d7c5fd8a Mon Sep 17 00:00:00 2001
From: Robert Joseph Evans <bobby@apache.org>
Date: Tue, 16 Oct 2012 21:40:53 +0000
Subject: [PATCH 0580/1357] HADOOP-8922. Provide alternate JSONP output for JMXJsonServlet to allow javascript in browser (Damien Hardy via bobby)

git-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/branch-2@1399001 13f79535-47bb-0310-9956-ffa450edef68
(cherry picked from commit 36192f6d414a290e6c5829ae363db582902a6eb9)
---
 .../java/org/apache/hadoop/jmx/JMXJsonServlet.java |   36 +++++++++++++++++---
 .../org/apache/hadoop/jmx/TestJMXJsonServlet.java  |   24 +++++++++++++
 2 files changed, 55 insertions(+), 5 deletions(-)

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java
index fe8dbdb..3b605e0 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java
@@ -113,6 +113,9 @@ import org.codehaus.jackson.JsonGenerator;
  *  All other objects will be converted to a string and output as such.
  *  
  *  The bean's name and modelerType will be returned for all beans.
+ *
+ *  Optional paramater "callback" should be used to deliver JSONP response.
+ *  
  */
 public class JMXJsonServlet extends HttpServlet {
   private static final Log LOG = LogFactory.getLog(JMXJsonServlet.class);
@@ -120,6 +123,8 @@ public class JMXJsonServlet extends HttpServlet {
   private static final long serialVersionUID = 1L;
 
   // ----------------------------------------------------- Instance Variables
+  private static final String CALLBACK_PARAM = "callback";
+
   /**
    * MBean server.
    */
@@ -145,20 +150,33 @@ public class JMXJsonServlet extends HttpServlet {
    */
   @Override
   public void doGet(HttpServletRequest request, HttpServletResponse response) {
+    String jsonpcb = null;
+    PrintWriter writer = null;
     try {
       if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(),
                                                      request, response)) {
         return;
       }
+      
+      JsonGenerator jg = null;
 
-      response.setContentType("application/json; charset=utf8");
-
-      PrintWriter writer = response.getWriter();
+      writer = response.getWriter();
+ 
+      // "callback" parameter implies JSONP outpout
+      jsonpcb = request.getParameter(CALLBACK_PARAM);
+      if (jsonpcb != null) {
+        response.setContentType("application/javascript; charset=utf8");
+        writer.write(jsonpcb + "(");
+      } else {
+        response.setContentType("application/json; charset=utf8");
+      }
 
       JsonFactory jsonFactory = new JsonFactory();
-      JsonGenerator jg = jsonFactory.createJsonGenerator(writer);
+      jg = jsonFactory.createJsonGenerator(writer);
+      jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);
       jg.useDefaultPrettyPrinter();
       jg.writeStartObject();
+
       if (mBeanServer == null) {
         jg.writeStringField("result", "ERROR");
         jg.writeStringField("message", "No MBeanServer could be found");
@@ -183,6 +201,7 @@ public class JMXJsonServlet extends HttpServlet {
             response);
         jg.close();
         return;
+        
       }
 
       // query per mbean
@@ -199,6 +218,13 @@ public class JMXJsonServlet extends HttpServlet {
     } catch ( MalformedObjectNameException e ) {
       LOG.error("Caught an exception while processing JMX request", e);
       response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
+    } finally {
+      if (jsonpcb != null) {
+         writer.write(");");
+      }
+      if (writer != null) {
+        writer.close();
+      }
     }
   }
 
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/jmx/TestJMXJsonServlet.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/jmx/TestJMXJsonServlet.java
index 62a2af9..a03eba9 100644
--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/jmx/TestJMXJsonServlet.java
+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/jmx/TestJMXJsonServlet.java
@@ -78,5 +78,29 @@ public class TestJMXJsonServlet extends HttpServerFunctionalTest {
         "/jmx?get=java.lang:type=Memory::"));
     LOG.info("/jmx RESULT: "+result);
     assertReFind("\"ERROR\"", result);
+
+    // test to get JSONP result
+    result = readOutput(new URL(baseUrl, "/jmx?qry=java.lang:type=Memory&callback=mycallback1"));
+    LOG.info("/jmx?qry=java.lang:type=Memory&callback=mycallback RESULT: "+result);
+    assertReFind("^mycallback1\\(\\{", result);
+    assertReFind("\\}\\);$", result);
+
+    // negative test to get an attribute of a mbean as JSONP
+    result = readOutput(new URL(baseUrl,
+        "/jmx?get=java.lang:type=Memory::&callback=mycallback2"));
+    LOG.info("/jmx RESULT: "+result);
+    assertReFind("^mycallback2\\(\\{", result);
+    assertReFind("\"ERROR\"", result);
+    assertReFind("\\}\\);$", result);
+
+    // test to get an attribute of a mbean as JSONP
+    result = readOutput(new URL(baseUrl,
+        "/jmx?get=java.lang:type=Memory::HeapMemoryUsage&callback=mycallback3"));
+    LOG.info("/jmx RESULT: "+result);
+    assertReFind("^mycallback3\\(\\{", result);
+    assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"", result);
+    assertReFind("\"committed\"\\s*:", result);
+    assertReFind("\\}\\);$", result);
+
   }
 }
-- 
1.7.0.4

