From af0805d5982c65d29c071043dfeb0840fd495403 Mon Sep 17 00:00:00 2001
From: Aaron T. Myers <atm@cloudera.com>
Date: Mon, 12 Nov 2012 13:39:58 -0800
Subject: [PATCH 0579/1357] Revert "HADOOP-8922. Provide alternate JSONP output for JMXJsonServlet to allow javascript in browser dashboard (Damien Hardy via bobby)"

This reverts commit 74e1186fe69eaf7cf57fa5b692d645f819e8189b.

Reason: Bad merge from trunk of HADOOP-8922. Should have merged from branch-2.
Ref: CDH-9009
---
 .../java/org/apache/hadoop/jmx/JMXJsonServlet.java |   82 ++++++++------------
 .../org/apache/hadoop/jmx/TestJMXJsonServlet.java  |   24 ------
 2 files changed, 32 insertions(+), 74 deletions(-)

diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java
index 1c20227..fe8dbdb 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java
@@ -113,16 +113,11 @@ import org.codehaus.jackson.JsonGenerator;
  *  All other objects will be converted to a string and output as such.
  *  
  *  The bean's name and modelerType will be returned for all beans.
- *  
- *  Optional paramater "callback" should be used to deliver JSONP response.
- *  
  */
 public class JMXJsonServlet extends HttpServlet {
   private static final Log LOG = LogFactory.getLog(JMXJsonServlet.class);
 
   private static final long serialVersionUID = 1L;
-  
-  private static final String CALLBACK_PARAM = "callback";
 
   // ----------------------------------------------------- Instance Variables
   /**
@@ -156,61 +151,48 @@ public class JMXJsonServlet extends HttpServlet {
         return;
       }
 
+      response.setContentType("application/json; charset=utf8");
+
       PrintWriter writer = response.getWriter();
+
       JsonFactory jsonFactory = new JsonFactory();
       JsonGenerator jg = jsonFactory.createJsonGenerator(writer);
+      jg.useDefaultPrettyPrinter();
+      jg.writeStartObject();
+      if (mBeanServer == null) {
+        jg.writeStringField("result", "ERROR");
+        jg.writeStringField("message", "No MBeanServer could be found");
+        jg.close();
+        LOG.error("No MBeanServer could be found.");
+        response.setStatus(HttpServletResponse.SC_NOT_FOUND);
+        return;
+      }
       
-      try {
-        jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);
-        jg.useDefaultPrettyPrinter();
-        jg.writeStartObject();
-        
-        // "callback" parameter implies JSONP outpout
-        String jsonpcb = request.getParameter(CALLBACK_PARAM);
-        if (jsonpcb != null) {
-          response.setContentType("application/javascript; charset=utf8");
-          writer.write(jsonpcb + "(");
-        } else {
-          response.setContentType("application/json; charset=utf8");
-        }
-        
-        if (mBeanServer == null) {
+      // query per mbean attribute
+      String getmethod = request.getParameter("get");
+      if (getmethod != null) {
+        String[] splitStrings = getmethod.split("\\:\\:");
+        if (splitStrings.length != 2) {
           jg.writeStringField("result", "ERROR");
-          jg.writeStringField("message", "No MBeanServer could be found");
-          jg.close();
-          LOG.error("No MBeanServer could be found.");
-          response.setStatus(HttpServletResponse.SC_NOT_FOUND);
-          return;
-        }
-              
-        // query per mbean attribute
-        String getmethod = request.getParameter("get");
-        if (getmethod != null) {
-          String[] splitStrings = getmethod.split("\\:\\:");
-          if (splitStrings.length != 2) {
-            jg.writeStringField("result", "ERROR");
-            jg.writeStringField("message", "query format is not as expected.");
-            jg.close();
-            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
-            return;
-          }
-          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],
-              response);
+          jg.writeStringField("message", "query format is not as expected.");
           jg.close();
+          response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
           return;
         }
-
-        // query per mbean
-        String qry = request.getParameter("qry");
-        if (qry == null) {
-          qry = "*:*";
-        }
-        listBeans(jg, new ObjectName(qry), null, response);
-      } finally {
+        listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],
+            response);
         jg.close();
-        writer.write(");");
-        writer.close();
+        return;
       }
+
+      // query per mbean
+      String qry = request.getParameter("qry");
+      if (qry == null) {
+        qry = "*:*";
+      }
+      listBeans(jg, new ObjectName(qry), null, response);
+      jg.close();
+
     } catch ( IOException e ) {
       LOG.error("Caught an exception while processing JMX request", e);
       response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/jmx/TestJMXJsonServlet.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/jmx/TestJMXJsonServlet.java
index a03eba9..62a2af9 100644
--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/jmx/TestJMXJsonServlet.java
+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/jmx/TestJMXJsonServlet.java
@@ -78,29 +78,5 @@ public class TestJMXJsonServlet extends HttpServerFunctionalTest {
         "/jmx?get=java.lang:type=Memory::"));
     LOG.info("/jmx RESULT: "+result);
     assertReFind("\"ERROR\"", result);
-
-    // test to get JSONP result
-    result = readOutput(new URL(baseUrl, "/jmx?qry=java.lang:type=Memory&callback=mycallback1"));
-    LOG.info("/jmx?qry=java.lang:type=Memory&callback=mycallback RESULT: "+result);
-    assertReFind("^mycallback1\\(\\{", result);
-    assertReFind("\\}\\);$", result);
-
-    // negative test to get an attribute of a mbean as JSONP
-    result = readOutput(new URL(baseUrl,
-        "/jmx?get=java.lang:type=Memory::&callback=mycallback2"));
-    LOG.info("/jmx RESULT: "+result);
-    assertReFind("^mycallback2\\(\\{", result);
-    assertReFind("\"ERROR\"", result);
-    assertReFind("\\}\\);$", result);
-
-    // test to get an attribute of a mbean as JSONP
-    result = readOutput(new URL(baseUrl,
-        "/jmx?get=java.lang:type=Memory::HeapMemoryUsage&callback=mycallback3"));
-    LOG.info("/jmx RESULT: "+result);
-    assertReFind("^mycallback3\\(\\{", result);
-    assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"", result);
-    assertReFind("\"committed\"\\s*:", result);
-    assertReFind("\\}\\);$", result);
-
   }
 }
-- 
1.7.0.4

