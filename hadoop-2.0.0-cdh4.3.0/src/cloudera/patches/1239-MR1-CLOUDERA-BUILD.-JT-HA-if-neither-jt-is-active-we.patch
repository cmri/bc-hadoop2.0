From f289889adbb5c5bd72b60d9c88b3ce19e04316fd Mon Sep 17 00:00:00 2001
From: Alejandro Abdelnur <tucu@cloudera.com>
Date: Fri, 4 Jan 2013 10:40:29 +0100
Subject: [PATCH 1239/1357] MR1: CLOUDERA-BUILD. JT HA: if neither jt is active, web ui redirect leads to a redirect loop.

  Reason: bug
  Author: Alejandro Abdelnur
  Ref: CDH-9676
---
 .../hadoop/mapred/JobTrackerHAHttpRedirector.java  |   23 ++++--
 src/test/org/apache/hadoop/mapred/TestHAWebUI.java |   91 ++++++++++++++++++++
 2 files changed, 107 insertions(+), 7 deletions(-)

diff --git a/src/mapred/org/apache/hadoop/mapred/JobTrackerHAHttpRedirector.java b/src/mapred/org/apache/hadoop/mapred/JobTrackerHAHttpRedirector.java
index d7bb374..c841043 100644
--- a/src/mapred/org/apache/hadoop/mapred/JobTrackerHAHttpRedirector.java
+++ b/src/mapred/org/apache/hadoop/mapred/JobTrackerHAHttpRedirector.java
@@ -37,7 +37,7 @@ public class JobTrackerHAHttpRedirector {
   private static final Log LOG =
     LogFactory.getLog(JobTrackerHAHttpRedirector.class);
 
-  private static final String ACTIVE_JOBTRACKER_BASEURL =
+  static final String ACTIVE_JOBTRACKER_BASEURL =
     "mapred.ha.active.jobtracker.baseurl";
 
   private Configuration conf;
@@ -102,6 +102,8 @@ public class JobTrackerHAHttpRedirector {
   public static class RedirectorServlet extends HttpServlet {
     private String baseURL;
 
+    private static final String REDIR_COUNT = "redirCount";
+    
     @Override
     public void init() {
       baseURL = (String)
@@ -111,13 +113,20 @@ public class JobTrackerHAHttpRedirector {
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp)
       throws ServletException, IOException {
-      StringBuilder sb = new StringBuilder(baseURL);
-      sb.append(req.getRequestURI());
-      String queryString = req.getQueryString();
-      if (queryString != null) {
-        sb.append("?").append(queryString);
+      String redirCountStr = req.getParameter(REDIR_COUNT);
+      int redirCount = ((redirCountStr == null) ? 0 : Integer.parseInt(redirCountStr)) + 1;
+      if (redirCount == 1) {
+        StringBuilder sb = new StringBuilder(baseURL);
+        sb.append(req.getRequestURI());
+        String queryString = req.getQueryString();
+        if (queryString != null) {
+          sb.append("?").append(queryString);
+        }
+        sb.append((queryString == null) ? "?" : "&").append(REDIR_COUNT).append("=").append(redirCount);
+        resp.sendRedirect(sb.toString());
+      } else {
+        resp.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE, "None of the JobTrackers is active");
       }
-      resp.sendRedirect(sb.toString());
     }
   }
 
diff --git a/src/test/org/apache/hadoop/mapred/TestHAWebUI.java b/src/test/org/apache/hadoop/mapred/TestHAWebUI.java
index 35bb869..35b1c4f 100644
--- a/src/test/org/apache/hadoop/mapred/TestHAWebUI.java
+++ b/src/test/org/apache/hadoop/mapred/TestHAWebUI.java
@@ -19,9 +19,13 @@
 package org.apache.hadoop.mapred;
 
 import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import java.io.File;
 import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.net.InetAddress;
+import java.net.ServerSocket;
 import java.net.URL;
 
 import org.apache.commons.logging.Log;
@@ -38,6 +42,13 @@ import org.apache.hadoop.hdfs.DFSTestUtil;
 import org.apache.hadoop.mapred.ConfiguredFailoverProxyProvider;
 import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
 import org.junit.*;
+import org.mortbay.jetty.Server;
+import org.mortbay.jetty.servlet.Context;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
 
 /**
  * Tests web UI redirect from standby to active jobtracker.
@@ -102,4 +113,84 @@ public class TestHAWebUI {
     assertTrue(page.contains("Hadoop Map/Reduce Administration"));
   }
 
+  public static class OKServlet extends HttpServlet {
+    @Override
+    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
+      throws ServletException, IOException {
+      resp.setStatus(HttpServletResponse.SC_OK);
+    }
+  }
+
+  private Server createJettyServer() throws Exception {
+    InetAddress localhost = InetAddress.getByName("localhost");
+    String host = "localhost";
+    ServerSocket ss = new ServerSocket(0, 50, localhost);
+    int port = ss.getLocalPort();
+    ss.close();
+    Server server = new Server(0);
+    server.getConnectors()[0].setHost(host);
+    server.getConnectors()[0].setPort(port);
+    return server;
+  }
+
+  private URL getJettyURL(Server server) throws Exception {
+    if (server == null) {
+      throw new IllegalStateException("This test does not use @TestJetty");
+    }
+    return new URL("http://" + server.getConnectors()[0].getHost() + ":" + 
+      server.getConnectors()[0].getPort());
+  }
+
+  private void testRedirect(Class firstServletClass, Class secondServlet,
+                            int expectedResponse) throws Exception {
+    Server server1 = null;
+    Server server2 = null;
+    try {
+      server1 = createJettyServer();
+      server2 = createJettyServer();
+
+      Context context = new Context();
+      context.setContextPath("/");
+      context.addServlet(firstServletClass, "/*");
+      context.setAttribute(JobTrackerHAHttpRedirector.ACTIVE_JOBTRACKER_BASEURL,
+        getJettyURL(server2).toExternalForm());
+      server1.addHandler(context);
+
+      context = new Context();
+      context.setContextPath("/");
+      context.addServlet(secondServlet, "/*");
+      context.setAttribute(JobTrackerHAHttpRedirector.ACTIVE_JOBTRACKER_BASEURL,
+        getJettyURL(server1).toExternalForm());
+      server2.addHandler(context);
+
+      server1.start();
+      server2.start();
+
+      URL url = new URL(getJettyURL(server1), "/bar");
+      HttpURLConnection conn = (HttpURLConnection) url.openConnection();
+      assertEquals(expectedResponse, conn.getResponseCode());
+
+    } finally {
+      if (server1 != null) {
+        server1.stop();
+      }
+      if (server2 != null) {
+        server1.stop();
+      }
+    }
+  }
+
+  @Test
+  public void redirectOK() throws Exception {
+    testRedirect(JobTrackerHAHttpRedirector.RedirectorServlet.class,
+      OKServlet.class, HttpServletResponse.SC_OK);
+  }
+
+  @Test
+  public void redirectLoop() throws Exception {
+    testRedirect(JobTrackerHAHttpRedirector.RedirectorServlet.class,
+      JobTrackerHAHttpRedirector.RedirectorServlet.class,
+      HttpServletResponse.SC_SERVICE_UNAVAILABLE);
+  }
+
 }
-- 
1.7.0.4

