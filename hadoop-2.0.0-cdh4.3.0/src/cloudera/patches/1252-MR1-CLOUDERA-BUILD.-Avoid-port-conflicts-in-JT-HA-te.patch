From 32d099f77bc3dacb69d4600099e2b97fbd4c9ccb Mon Sep 17 00:00:00 2001
From: Tom White <tom@cloudera.com>
Date: Tue, 15 Jan 2013 21:16:34 +0000
Subject: [PATCH 1252/1357] MR1: CLOUDERA-BUILD. Avoid port conflicts in JT HA tests.

Reason: Test
Ref: CDH-9819
Author: Tom White
---
 .../org/apache/hadoop/mapred/MiniMRHACluster.java  |   46 +++++++++++++-------
 1 files changed, 30 insertions(+), 16 deletions(-)

diff --git a/src/test/org/apache/hadoop/mapred/MiniMRHACluster.java b/src/test/org/apache/hadoop/mapred/MiniMRHACluster.java
index 4dd95a0..67de4ef 100644
--- a/src/test/org/apache/hadoop/mapred/MiniMRHACluster.java
+++ b/src/test/org/apache/hadoop/mapred/MiniMRHACluster.java
@@ -20,6 +20,7 @@ package org.apache.hadoop.mapred;
 
 import java.io.File;
 import java.io.IOException;
+import java.net.ServerSocket;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
@@ -27,6 +28,7 @@ import java.util.List;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.io.IOUtils;
 import org.apache.hadoop.mapred.MiniMRHACluster.TaskTrackerRunner;
 import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
 import org.apache.hadoop.util.ExitUtil;
@@ -71,30 +73,42 @@ public class MiniMRHACluster {
     return conf;
   }
   
-  private static JobTrackerHADaemon createJobTrackerHADaemon(Configuration conf, String jtId) {
+  private static JobTrackerHADaemon createJobTrackerHADaemon(Configuration conf, String jtId) throws IOException {
     Configuration c = new Configuration(conf);
     c.setBoolean("mapred.jobtracker.restart.recover", true); // recover jobs
-    configureLogicalName(c);
     c.set(HAUtil.MR_HA_JOBTRACKER_ID_KEY, jtId);
     return new JobTrackerHADaemon(c);
   }
+
+  private static int findEphemeralPort() throws IOException {
+    ServerSocket socket = null;
+    try {
+      socket = new ServerSocket(0);
+      return socket.getLocalPort();
+    } finally {
+      if (socket != null) {
+        socket.close();
+      }
+    }
+  }
   
-  public static void configureLogicalName(Configuration conf) {
+  public static void configureLogicalName(Configuration conf) throws IOException {
     String jt1Id = "jt1";
     String jt2Id = "jt2";
-    
-    // Use hardcoded port numbers as using ephemeral ports for JTs doesn't work
-    // since they are not
-    // resolved until the JTs are started, and the standby JT will
-    // not start until failover, which is too late for the client
-    String jt1Address = "localhost:1234";
-    String jt2Address = "localhost:5678";
-    String jt1HaAddress = "localhost:12340";
-    String jt2HaAddress = "localhost:56780";
-    String jt1HttpAddress = "0.0.0.0:50030";
-    String jt2HttpAddress = "0.0.0.0:50031";
-    String jt1HttpRedirectAddress = "localhost:50030";
-    String jt2HttpRedirectAddress = "localhost:50031";
+
+    // We can't use port number 0 directly since a free port will
+    // not be picked until the JTs are started, and the standby JT will
+    // not start until failover, which is too late for the client.
+    // Instead we find a free port by opening then immediately closing
+    // a server socket.
+    String jt1Address = "localhost:" + findEphemeralPort();
+    String jt2Address = "localhost:" + findEphemeralPort();
+    String jt1HaAddress = "localhost:" + findEphemeralPort();
+    String jt2HaAddress = "localhost:" + findEphemeralPort();
+    String jt1HttpAddress = "0.0.0.0:" + findEphemeralPort();
+    String jt2HttpAddress = "0.0.0.0:" + findEphemeralPort();
+    String jt1HttpRedirectAddress = jt1HttpAddress.replace("0.0.0.0", "localhost");
+    String jt2HttpRedirectAddress = jt2HttpAddress.replace("0.0.0.0", "localhost");
     
     conf.set(HAUtil.addKeySuffixes(HAUtil.MR_JOBTRACKER_RPC_ADDRESS_KEY, LOGICAL_NAME, jt1Id), jt1Address);
     conf.set(HAUtil.addKeySuffixes(HAUtil.MR_JOBTRACKER_RPC_ADDRESS_KEY, LOGICAL_NAME, jt2Id), jt2Address);
-- 
1.7.0.4

