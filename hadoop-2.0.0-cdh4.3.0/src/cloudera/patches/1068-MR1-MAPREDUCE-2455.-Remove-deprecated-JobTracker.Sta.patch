From 07cf8b4e89cb26cf2f53be7b4e46e613afff5c13 Mon Sep 17 00:00:00 2001
From: Tom White <tom@cloudera.com>
Date: Mon, 12 Dec 2011 13:35:52 -0800
Subject: [PATCH 1068/1357] MR1: MAPREDUCE-2455. Remove deprecated JobTracker.State in favour of JobTrackerStatus.

Author: Tom White
Reason: Support 0.23 API in MR1
Ref: CDH-3861
---
 .../hadoop/mapred/TestCapacityScheduler.java       |    3 +-
 .../apache/hadoop/mapred/TestFairScheduler.java    |    2 +-
 .../org/apache/hadoop/mapred/ClusterStatus.java    |   50 ++++++++++----------
 .../org/apache/hadoop/mapred/JobTracker.java       |    5 +-
 .../org/apache/hadoop/mapred/LocalJobRunner.java   |    3 +-
 .../org/apache/hadoop/mapreduce/Cluster.java       |   28 +++++++++++
 .../apache/hadoop/mapred/FakeObjectUtilities.java  |    3 +-
 .../org/apache/hadoop/mapred/MiniMRCluster.java    |    5 +-
 .../hadoop/mapred/TestJobQueueTaskScheduler.java   |    3 +-
 .../hadoop/mapred/TestJobTrackerRestart.java       |    2 +-
 .../hadoop/mapred/TestParallelInitialization.java  |    3 +-
 .../apache/hadoop/mapred/TestRecoveryManager.java  |    3 +-
 .../org/apache/hadoop/mapred/UtilsForTests.java    |    3 +-
 src/webapps/job/jobtracker.jsp                     |    2 +-
 src/webapps/job/jobtracker.jspx                    |    2 +-
 15 files changed, 77 insertions(+), 40 deletions(-)
 create mode 100644 src/mapred/org/apache/hadoop/mapreduce/Cluster.java

diff --git a/src/contrib/capacity-scheduler/src/test/org/apache/hadoop/mapred/TestCapacityScheduler.java b/src/contrib/capacity-scheduler/src/test/org/apache/hadoop/mapred/TestCapacityScheduler.java
index 9eeae61..a438158 100644
--- a/src/contrib/capacity-scheduler/src/test/org/apache/hadoop/mapred/TestCapacityScheduler.java
+++ b/src/contrib/capacity-scheduler/src/test/org/apache/hadoop/mapred/TestCapacityScheduler.java
@@ -37,6 +37,7 @@ import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.io.BytesWritable;
 import org.apache.hadoop.mapred.JobStatusChangeEvent.EventType;
+import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
 import org.apache.hadoop.mapreduce.TaskType;
 import org.apache.hadoop.mapreduce.server.jobtracker.TaskTracker;
 import org.apache.hadoop.mapreduce.split.JobSplit;
@@ -489,7 +490,7 @@ public class TestCapacityScheduler extends TestCase {
       return new ClusterStatus(numTrackers, maps, reduces,
           numTrackers * maxMapTasksPerTracker,
           numTrackers * maxReduceTasksPerTracker,
-          JobTracker.State.RUNNING);
+          JobTrackerStatus.RUNNING);
     }
 
     public int getNumberOfUniqueHosts() {
diff --git a/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/TestFairScheduler.java b/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/TestFairScheduler.java
index 74fc591..ee5f1c2 100644
--- a/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/TestFairScheduler.java
+++ b/src/contrib/fairscheduler/src/test/org/apache/hadoop/mapred/TestFairScheduler.java
@@ -377,7 +377,7 @@ public class TestFairScheduler extends TestCase {
       return new ClusterStatus(numTrackers, maps, reduces,
           numTrackers * maxMapTasksPerTracker,
           numTrackers * maxReduceTasksPerTracker,
-          JobTracker.State.RUNNING);
+          JobTrackerStatus.RUNNING);
     }
 
     @Override
diff --git a/src/mapred/org/apache/hadoop/mapred/ClusterStatus.java b/src/mapred/org/apache/hadoop/mapred/ClusterStatus.java
index 3f96b69..979a847 100644
--- a/src/mapred/org/apache/hadoop/mapred/ClusterStatus.java
+++ b/src/mapred/org/apache/hadoop/mapred/ClusterStatus.java
@@ -27,6 +27,7 @@ import java.util.Collection;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.io.Writable;
 import org.apache.hadoop.io.WritableUtils;
+import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
 
 /**
  * Status information on the current state of the Map-Reduce cluster.
@@ -67,7 +68,7 @@ public class ClusterStatus implements Writable {
   private int reduce_tasks;
   private int max_map_tasks;
   private int max_reduce_tasks;
-  private JobTracker.State state;
+  private JobTrackerStatus status;
 
   public static final long UNINITIALIZED_MEMORY_VALUE = -1;
   private long used_memory = UNINITIALIZED_MEMORY_VALUE;
@@ -83,14 +84,14 @@ public class ClusterStatus implements Writable {
    * @param reduces no. of currently running reduce-tasks in the cluster
    * @param maxMaps the maximum no. of map tasks in the cluster
    * @param maxReduces the maximum no. of reduce tasks in the cluster
-   * @param state the {@link JobTracker.State} of the <code>JobTracker</code>
+   * @param status the {@link JobTrackerStatus} of the <code>JobTracker</code>
    * @deprecated 
    */
   @Deprecated
   ClusterStatus(int trackers, int maps, int reduces, int maxMaps,
-                int maxReduces, JobTracker.State state) {
+                int maxReduces, JobTrackerStatus status) {
     this(trackers, 0, JobTracker.TASKTRACKER_EXPIRY_INTERVAL, maps, reduces,
-        maxMaps, maxReduces, state);
+        maxMaps, maxReduces, status);
   }
   
   /**
@@ -103,13 +104,13 @@ public class ClusterStatus implements Writable {
    * @param reduces no. of currently running reduce-tasks in the cluster
    * @param maxMaps the maximum no. of map tasks in the cluster
    * @param maxReduces the maximum no. of reduce tasks in the cluster
-   * @param state the {@link JobTracker.State} of the <code>JobTracker</code>
+   * @param status the {@link JobTrackerStatus} of the <code>JobTracker</code>
    */
   ClusterStatus(int trackers, int blacklists, long ttExpiryInterval, 
                 int maps, int reduces,
-                int maxMaps, int maxReduces, JobTracker.State state) {
+                int maxMaps, int maxReduces, JobTrackerStatus status) {
     this(trackers, blacklists, ttExpiryInterval, maps, reduces, maxMaps, 
-         maxReduces, state, 0);
+         maxReduces, status, 0);
   }
 
   /**
@@ -121,14 +122,14 @@ public class ClusterStatus implements Writable {
    * @param reduces no. of currently running reduce-tasks in the cluster
    * @param maxMaps the maximum no. of map tasks in the cluster
    * @param maxReduces the maximum no. of reduce tasks in the cluster
-   * @param state the {@link JobTracker.State} of the <code>JobTracker</code>
+   * @param status the {@link JobTrackerStatus} of the <code>JobTracker</code>
    * @param numDecommissionedNodes number of decommission trackers
    */
   ClusterStatus(int trackers, int blacklists, long ttExpiryInterval, 
                 int maps, int reduces, int maxMaps, int maxReduces, 
-                JobTracker.State state, int numDecommissionedNodes) {
+                JobTrackerStatus status, int numDecommissionedNodes) {
     this(trackers, blacklists, ttExpiryInterval, maps, reduces, 
-         maxMaps, maxReduces, state, numDecommissionedNodes, 
+         maxMaps, maxReduces, status, numDecommissionedNodes, 
          UNINITIALIZED_MEMORY_VALUE, UNINITIALIZED_MEMORY_VALUE);
   }
 
@@ -142,20 +143,20 @@ public class ClusterStatus implements Writable {
    * @param reduces no. of currently running reduce-tasks in the cluster
    * @param maxMaps the maximum no. of map tasks in the cluster
    * @param maxReduces the maximum no. of reduce tasks in the cluster
-   * @param state the {@link JobTracker.State} of the <code>JobTracker</code>
+   * @param status the {@link JobTrackerStatus} of the <code>JobTracker</code>
    */
   ClusterStatus(Collection<String> activeTrackers, 
       Collection<String> blacklistedTrackers,
       long ttExpiryInterval,
       int maps, int reduces, int maxMaps, int maxReduces, 
-      JobTracker.State state) {
+      JobTrackerStatus status) {
     this(activeTrackers, blacklistedTrackers, ttExpiryInterval, maps, reduces, 
-         maxMaps, maxReduces, state, 0);
+         maxMaps, maxReduces, status, 0);
   }
 
   ClusterStatus(int trackers, int blacklists, long ttExpiryInterval, 
       int maps, int reduces, int maxMaps, int maxReduces, 
-      JobTracker.State state, int numDecommissionedNodes,
+      JobTrackerStatus status, int numDecommissionedNodes,
       long used_memory, long max_memory) {
     numActiveTrackers = trackers;
     numBlacklistedTrackers = blacklists;
@@ -165,7 +166,7 @@ public class ClusterStatus implements Writable {
     reduce_tasks = reduces;
     max_map_tasks = maxMaps;
     max_reduce_tasks = maxReduces;
-    this.state = state;
+    this.status = status;
     this.used_memory = used_memory;
     this.max_memory = max_memory;
   }
@@ -179,15 +180,15 @@ public class ClusterStatus implements Writable {
    * @param reduces no. of currently running reduce-tasks in the cluster
    * @param maxMaps the maximum no. of map tasks in the cluster
    * @param maxReduces the maximum no. of reduce tasks in the cluster
-   * @param state the {@link JobTracker.State} of the <code>JobTracker</code>
+   * @param status the {@link JobTrackerStatus} of the <code>JobTracker</code>
    * @param numDecommissionNodes number of decommission trackers
    */
   ClusterStatus(Collection<String> activeTrackers, 
                 Collection<String> blacklistedTrackers, long ttExpiryInterval,
                 int maps, int reduces, int maxMaps, int maxReduces, 
-                JobTracker.State state, int numDecommissionNodes) {
+                JobTrackerStatus status, int numDecommissionNodes) {
     this(activeTrackers.size(), blacklistedTrackers.size(), ttExpiryInterval, 
-        maps, reduces, maxMaps, maxReduces, state, numDecommissionNodes, 
+        maps, reduces, maxMaps, maxReduces, status, numDecommissionNodes, 
         Runtime.getRuntime().totalMemory(), Runtime.getRuntime().maxMemory());
     this.activeTrackers = activeTrackers;
     this.blacklistedTrackers = blacklistedTrackers;
@@ -282,13 +283,12 @@ public class ClusterStatus implements Writable {
   }
   
   /**
-   * Get the current state of the <code>JobTracker</code>, 
-   * as {@link JobTracker.State}
+   * Get the JobTracker's status.
    * 
-   * @return the current state of the <code>JobTracker</code>.
+   * @return {@link JobTrackerStatus} of the JobTracker
    */
-  public JobTracker.State getJobTrackerState() {
-    return state;
+  public JobTrackerStatus getJobTrackerStatus() {
+    return status;
   }
 
   /**
@@ -338,7 +338,7 @@ public class ClusterStatus implements Writable {
     out.writeInt(max_reduce_tasks);
     out.writeLong(used_memory);
     out.writeLong(max_memory);
-    WritableUtils.writeEnum(out, state);
+    WritableUtils.writeEnum(out, status);
   }
 
   public void readFields(DataInput in) throws IOException {
@@ -366,6 +366,6 @@ public class ClusterStatus implements Writable {
     max_reduce_tasks = in.readInt();
     used_memory = in.readLong();
     max_memory = in.readLong();
-    state = WritableUtils.readEnum(in, JobTracker.State.class);
+    status = WritableUtils.readEnum(in, JobTrackerStatus.class);
   }
 }
diff --git a/src/mapred/org/apache/hadoop/mapred/JobTracker.java b/src/mapred/org/apache/hadoop/mapred/JobTracker.java
index ea99f8d..a45eef4 100644
--- a/src/mapred/org/apache/hadoop/mapred/JobTracker.java
+++ b/src/mapred/org/apache/hadoop/mapred/JobTracker.java
@@ -109,6 +109,7 @@ import org.apache.hadoop.util.ReflectionUtils;
 import org.apache.hadoop.util.StringUtils;
 import org.apache.hadoop.util.VersionInfo;
 
+import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
 import org.apache.hadoop.mapreduce.ClusterMetrics;
 import org.apache.hadoop.mapreduce.TaskType;
 import org.apache.hadoop.mapreduce.security.token.DelegationTokenRenewal;
@@ -3914,7 +3915,7 @@ public class JobTracker implements MRConstants, JTProtocols, JobTrackerMXBean {
             totalReduces,
             totalMapTaskCapacity,
             totalReduceTaskCapacity, 
-            state, getExcludedNodes().size()
+            JobTrackerStatus.valueOf(state.name()), getExcludedNodes().size()
             );
       } else {
         return new ClusterStatus(taskTrackers.size() - 
@@ -3925,7 +3926,7 @@ public class JobTracker implements MRConstants, JTProtocols, JobTrackerMXBean {
             totalReduces,
             totalMapTaskCapacity,
             totalReduceTaskCapacity, 
-            state, getExcludedNodes().size());          
+            JobTrackerStatus.valueOf(state.name()), getExcludedNodes().size());
       }
     }
   }
diff --git a/src/mapred/org/apache/hadoop/mapred/LocalJobRunner.java b/src/mapred/org/apache/hadoop/mapred/LocalJobRunner.java
index a8564ee..74b09f8 100644
--- a/src/mapred/org/apache/hadoop/mapred/LocalJobRunner.java
+++ b/src/mapred/org/apache/hadoop/mapred/LocalJobRunner.java
@@ -40,6 +40,7 @@ import org.apache.hadoop.io.Text;
 import org.apache.hadoop.io.serializer.SerializationFactory;
 import org.apache.hadoop.io.serializer.Serializer;
 import org.apache.hadoop.ipc.ProtocolSignature;
+import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
 import org.apache.hadoop.mapreduce.split.SplitMetaInfoReader;
 import org.apache.hadoop.mapreduce.split.JobSplit.TaskSplitMetaInfo;
 import org.apache.hadoop.security.UserGroupInformation;
@@ -502,7 +503,7 @@ class LocalJobRunner implements JobSubmissionProtocol {
   
   public ClusterStatus getClusterStatus(boolean detailed) {
     return new ClusterStatus(1, 0, 0, map_tasks, reduce_tasks, 1, 1, 
-                             JobTracker.State.RUNNING);
+                             JobTrackerStatus.RUNNING);
   }
 
   public JobStatus[] jobsToComplete() {return null;}
diff --git a/src/mapred/org/apache/hadoop/mapreduce/Cluster.java b/src/mapred/org/apache/hadoop/mapreduce/Cluster.java
new file mode 100644
index 0000000..82bbf02
--- /dev/null
+++ b/src/mapred/org/apache/hadoop/mapreduce/Cluster.java
@@ -0,0 +1,28 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.mapreduce;
+
+/**
+ * Provides a way to access information about the map/reduce cluster.
+ */
+public class Cluster {
+  
+  public static enum JobTrackerStatus {INITIALIZING, RUNNING};
+
+}
diff --git a/src/test/org/apache/hadoop/mapred/FakeObjectUtilities.java b/src/test/org/apache/hadoop/mapred/FakeObjectUtilities.java
index e32a7c3..abfd77a 100644
--- a/src/test/org/apache/hadoop/mapred/FakeObjectUtilities.java
+++ b/src/test/org/apache/hadoop/mapred/FakeObjectUtilities.java
@@ -27,6 +27,7 @@ import java.util.Iterator;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.mapred.TaskStatus.Phase;
+import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
 import org.apache.hadoop.mapreduce.split.*;
 import org.apache.hadoop.mapreduce.split.JobSplit.TaskSplitMetaInfo;
 
@@ -59,7 +60,7 @@ public class FakeObjectUtilities {
     @Override
     public ClusterStatus getClusterStatus(boolean detailed) {
       return new ClusterStatus(trackers.length,
-          0, 0, 0, 0, totalSlots/2, totalSlots/2, JobTracker.State.RUNNING, 0);
+          0, 0, 0, 0, totalSlots/2, totalSlots/2, JobTrackerStatus.RUNNING, 0);
     }
 
     public void setNumSlots(int totalSlots) {
diff --git a/src/test/org/apache/hadoop/mapred/MiniMRCluster.java b/src/test/org/apache/hadoop/mapred/MiniMRCluster.java
index b383d20..0253ae2 100644
--- a/src/test/org/apache/hadoop/mapred/MiniMRCluster.java
+++ b/src/test/org/apache/hadoop/mapred/MiniMRCluster.java
@@ -33,6 +33,7 @@ import org.apache.hadoop.net.DNSToSwitchMapping;
 import org.apache.hadoop.net.NetUtils;
 import org.apache.hadoop.net.NetworkTopology;
 import org.apache.hadoop.net.StaticMapping;
+import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
 import org.apache.hadoop.security.AccessControlException;
 import org.apache.hadoop.security.UserGroupInformation;
 
@@ -635,8 +636,8 @@ public class MiniMRCluster {
     ClusterStatus status = null;
     if (jobTracker.isUp()) {
       status = jobTracker.getJobTracker().getClusterStatus(false);
-      while (jobTracker.isActive() && status.getJobTrackerState() 
-             == JobTracker.State.INITIALIZING) {
+      while (jobTracker.isActive() && status.getJobTrackerStatus() 
+             == JobTrackerStatus.INITIALIZING) {
         try {
           LOG.info("JobTracker still initializing. Waiting.");
           Thread.sleep(1000);
diff --git a/src/test/org/apache/hadoop/mapred/TestJobQueueTaskScheduler.java b/src/test/org/apache/hadoop/mapred/TestJobQueueTaskScheduler.java
index 51af55a..2448415 100644
--- a/src/test/org/apache/hadoop/mapred/TestJobQueueTaskScheduler.java
+++ b/src/test/org/apache/hadoop/mapred/TestJobQueueTaskScheduler.java
@@ -27,6 +27,7 @@ import java.util.Map;
 import junit.framework.TestCase;
 
 import org.apache.hadoop.io.BytesWritable;
+import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
 import org.apache.hadoop.mapreduce.server.jobtracker.TaskTracker;
 import org.apache.hadoop.mapreduce.split.JobSplit;
 
@@ -149,7 +150,7 @@ public class TestJobQueueTaskScheduler extends TestCase {
                                maps, reduces,
                                numTrackers * maxMapTasksPerTracker,
                                numTrackers * maxReduceTasksPerTracker,
-                               JobTracker.State.RUNNING);
+                               JobTrackerStatus.RUNNING);
     }
 
     @Override
diff --git a/src/test/org/apache/hadoop/mapred/TestJobTrackerRestart.java b/src/test/org/apache/hadoop/mapred/TestJobTrackerRestart.java
index 19cacfd..634afda 100644
--- a/src/test/org/apache/hadoop/mapred/TestJobTrackerRestart.java
+++ b/src/test/org/apache/hadoop/mapred/TestJobTrackerRestart.java
@@ -372,7 +372,7 @@ public class TestJobTrackerRestart extends TestCase {
   
   private boolean checkClusterStatusOnCompletion(ClusterStatus status, 
                                                  ClusterStatus prevStatus) {
-    return status.getJobTrackerState() == prevStatus.getJobTrackerState()
+    return status.getJobTrackerStatus() == prevStatus.getJobTrackerStatus()
            && status.getMapTasks() == 0
            && status.getReduceTasks() == 0;
   }
diff --git a/src/test/org/apache/hadoop/mapred/TestParallelInitialization.java b/src/test/org/apache/hadoop/mapred/TestParallelInitialization.java
index d386944..88380c6 100644
--- a/src/test/org/apache/hadoop/mapred/TestParallelInitialization.java
+++ b/src/test/org/apache/hadoop/mapred/TestParallelInitialization.java
@@ -27,6 +27,7 @@ import java.util.Map;
 import junit.framework.TestCase;
 
 import org.apache.hadoop.io.IntWritable;
+import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
 import org.apache.hadoop.mapred.JobInProgress.KillInterruptedException;
 import org.apache.hadoop.mapred.JobStatusChangeEvent.EventType;
 
@@ -102,7 +103,7 @@ public class TestParallelInitialization extends TestCase {
                                maps, reduces,
                                numTrackers * maxMapTasksPerTracker,
                                numTrackers * maxReduceTasksPerTracker,
-                               JobTracker.State.RUNNING);
+                               JobTrackerStatus.RUNNING);
     }
     
     public int getNumberOfUniqueHosts() {
diff --git a/src/test/org/apache/hadoop/mapred/TestRecoveryManager.java b/src/test/org/apache/hadoop/mapred/TestRecoveryManager.java
index 3dc9824..d1818da 100644
--- a/src/test/org/apache/hadoop/mapred/TestRecoveryManager.java
+++ b/src/test/org/apache/hadoop/mapred/TestRecoveryManager.java
@@ -33,6 +33,7 @@ import org.apache.hadoop.hdfs.MiniDFSCluster;
 import org.apache.hadoop.mapred.MiniMRCluster.JobTrackerRunner;
 import org.apache.hadoop.mapred.QueueManager.QueueACL;
 import org.apache.hadoop.mapred.TestJobInProgressListener.MyScheduler;
+import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.junit.*;
 
@@ -130,7 +131,7 @@ public class TestRecoveryManager extends TestCase {
     
     // check if the jobtracker came up or not
     assertEquals("JobTracker crashed!", 
-                 JobTracker.State.RUNNING, status.getJobTrackerState());
+                 JobTrackerStatus.RUNNING, status.getJobTrackerStatus());
     
     mr.shutdown();
   }
diff --git a/src/test/org/apache/hadoop/mapred/UtilsForTests.java b/src/test/org/apache/hadoop/mapred/UtilsForTests.java
index 727a98f..4953d99 100644
--- a/src/test/org/apache/hadoop/mapred/UtilsForTests.java
+++ b/src/test/org/apache/hadoop/mapred/UtilsForTests.java
@@ -53,6 +53,7 @@ import org.apache.hadoop.mapred.SortValidator.RecordStatsChecker.NonSplitableSeq
 import org.apache.hadoop.mapred.TaskTracker.LocalStorage;
 import org.apache.hadoop.mapred.lib.IdentityMapper;
 import org.apache.hadoop.mapred.lib.IdentityReducer;
+import org.apache.hadoop.mapreduce.Cluster.JobTrackerStatus;
 import org.apache.hadoop.mapreduce.server.tasktracker.userlogs.UserLogEvent;
 import org.apache.hadoop.mapreduce.server.tasktracker.userlogs.UserLogManager;
 import org.apache.hadoop.util.ReflectionUtils;
@@ -248,7 +249,7 @@ public class UtilsForTests {
     while (true) {
       try {
         ClusterStatus status = jobClient.getClusterStatus();
-        while (status.getJobTrackerState() != JobTracker.State.RUNNING) {
+        while (status.getJobTrackerStatus() != JobTrackerStatus.RUNNING) {
           waitFor(100);
           status = jobClient.getClusterStatus();
         }
diff --git a/src/webapps/job/jobtracker.jsp b/src/webapps/job/jobtracker.jsp
index c61250d..bce6fb5 100644
--- a/src/webapps/job/jobtracker.jsp
+++ b/src/webapps/job/jobtracker.jsp
@@ -98,7 +98,7 @@
   </ul>
 </div>
 
-<b>State:</b> <%= status.getJobTrackerState() %><br>
+<b>State:</b> <%= status.getJobTrackerStatus() %><br>
 <b>Started:</b> <%= new Date(tracker.getStartTime())%><br>
 <b>Version:</b> <%= VersionInfo.getVersion()%>,
                 <%= VersionInfo.getRevision()%><br>
diff --git a/src/webapps/job/jobtracker.jspx b/src/webapps/job/jobtracker.jspx
index 29b7b79..adcc328 100644
--- a/src/webapps/job/jobtracker.jspx
+++ b/src/webapps/job/jobtracker.jspx
@@ -45,7 +45,7 @@
     <tracker_name><jsp:expression>trackerName</jsp:expression></tracker_name>
 
     <tracker>
-      <state><jsp:expression>tracker.getClusterStatus().getJobTrackerState()</jsp:expression></state>
+      <state><jsp:expression>tracker.getClusterStatus().getJobTrackerStatus()</jsp:expression></state>
       <started><jsp:expression>new Date(tracker.getStartTime())</jsp:expression></started>
       <version><jsp:expression>VersionInfo.getVersion()</jsp:expression></version>
       <revision><jsp:expression>VersionInfo.getRevision()</jsp:expression></revision>
-- 
1.7.0.4

